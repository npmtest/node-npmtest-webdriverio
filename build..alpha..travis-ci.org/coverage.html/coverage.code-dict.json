{"/home/travis/build/npmtest/node-npmtest-webdriverio/test.js":"/* istanbul instrument in package npmtest_webdriverio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webdriverio/lib.npmtest_webdriverio.js":"/* istanbul instrument in package npmtest_webdriverio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webdriverio = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webdriverio = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webdriverio/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webdriverio && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webdriverio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webdriverio\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webdriverio.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_webdriverio.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webdriverio.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_webdriverio.__dirname + '/lib.npmtest_webdriverio.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Launcher = exports.ErrorHandler = exports.VERSION = exports.multiremote = exports.remote = undefined;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _webdriverio = require('./lib/webdriverio');\n\nvar _webdriverio2 = _interopRequireDefault(_webdriverio);\n\nvar _multibrowser = require('./lib/multibrowser');\n\nvar _multibrowser2 = _interopRequireDefault(_multibrowser);\n\nvar _ErrorHandler = require('./lib/utils/ErrorHandler');\n\nvar _ErrorHandler2 = _interopRequireDefault(_ErrorHandler);\n\nvar _getImplementedCommands = require('./lib/helpers/getImplementedCommands');\n\nvar _getImplementedCommands2 = _interopRequireDefault(_getImplementedCommands);\n\nvar _launcher = require('./lib/launcher');\n\nvar _launcher2 = _interopRequireDefault(_launcher);\n\nvar _package = require('./package.json');\n\nvar _package2 = _interopRequireDefault(_package);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * webdriverio\n * https://github.com/Camme/webdriverio\n *\n * A WebDriver module for nodejs. Either use the super easy help commands or use the base\n * Webdriver wire protocol commands. Its totally inspired by jellyfishs webdriver, but the\n * goal is to make all the webdriver protocol items available, as near the original as possible.\n *\n * Copyright (c) 2013 Camilo Tapia <camilo.tapia@gmail.com>\n * Licensed under the MIT license.\n *\n * Contributors:\n *     Dan Jenkins <dan.jenkins@holidayextras.com>\n *     Christian Bromann <mail@christian-bromann.com>\n *     Vincent Voyer <vincent@zeroload.net>\n */\n\nvar IMPLEMENTED_COMMANDS = (0, _getImplementedCommands2.default)();\nvar VERSION = _package2.default.version;\n\nvar remote = function remote() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var modifier = arguments[1];\n\n    /**\n     * initialise monad\n     */\n    var wdio = (0, _webdriverio2.default)(options, modifier);\n\n    /**\n     * build prototype: commands\n     */\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(IMPLEMENTED_COMMANDS)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var commandName = _step.value;\n\n            wdio.lift(commandName, IMPLEMENTED_COMMANDS[commandName]);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    var prototype = wdio();\n    prototype.defer.resolve();\n    return prototype;\n};\n\nvar multiremote = function multiremote(options) {\n    var multibrowser = new _multibrowser2.default();\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n        for (var _iterator2 = (0, _getIterator3.default)((0, _keys2.default)(options)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var browserName = _step2.value;\n\n            multibrowser.addInstance(browserName, remote(options[browserName], multibrowser.getInstanceModifier()));\n        }\n    } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n            }\n        } finally {\n            if (_didIteratorError2) {\n                throw _iteratorError2;\n            }\n        }\n    }\n\n    return remote(options, multibrowser.getModifier());\n};\n\nexports.remote = remote;\nexports.multiremote = multiremote;\nexports.VERSION = VERSION;\nexports.ErrorHandler = _ErrorHandler2.default;\nexports.Launcher = _launcher2.default;\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/webdriverio.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _create = require('babel-runtime/core-js/object/create');\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _q = require('q');\n\nvar _q2 = _interopRequireDefault(_q);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _deepmerge = require('deepmerge');\n\nvar _deepmerge2 = _interopRequireDefault(_deepmerge);\n\nvar _mkdirp = require('mkdirp');\n\nvar _mkdirp2 = _interopRequireDefault(_mkdirp);\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _RequestHandler = require('./utils/RequestHandler');\n\nvar _RequestHandler2 = _interopRequireDefault(_RequestHandler);\n\nvar _ErrorHandler = require('./utils/ErrorHandler');\n\nvar _Logger = require('./utils/Logger');\n\nvar _Logger2 = _interopRequireDefault(_Logger);\n\nvar _safeExecute = require('./helpers/safeExecute');\n\nvar _safeExecute2 = _interopRequireDefault(_safeExecute);\n\nvar _sanitize = require('./helpers/sanitize');\n\nvar _sanitize2 = _interopRequireDefault(_sanitize);\n\nvar _mobileDetector2 = require('./helpers/mobileDetector');\n\nvar _mobileDetector3 = _interopRequireDefault(_mobileDetector2);\n\nvar _detectSeleniumBackend = require('./helpers/detectSeleniumBackend');\n\nvar _detectSeleniumBackend2 = _interopRequireDefault(_detectSeleniumBackend);\n\nvar _errorHandler = require('./helpers/errorHandler');\n\nvar _errorHandler2 = _interopRequireDefault(_errorHandler);\n\nvar _hasElementResultHelper = require('./helpers/hasElementResultHelper');\n\nvar _hasElementResultHelper2 = _interopRequireDefault(_hasElementResultHelper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar INTERNAL_EVENTS = ['init', 'command', 'error', 'result', 'end', 'screenshot'];\nvar PROMISE_FUNCTIONS = ['then', 'catch', 'finally'];\n\nvar EventEmitter = _events2.default.EventEmitter;\n\n/**\n * WebdriverIO v4\n */\nvar WebdriverIO = function WebdriverIO(args, modifier) {\n    var prototype = (0, _create2.default)(Object.prototype);\n    var rawCommands = {};\n    var eventHandler = new EventEmitter();\n    var fulFilledPromise = (0, _q2.default)();\n    var stacktrace = [];\n    var commandList = [];\n\n    var EVENTHANDLER_FUNCTIONS = (0, _getPrototypeOf2.default)(eventHandler);\n\n    /**\n     * merge default options with given user options\n     */\n    var options = (0, _deepmerge2.default)({\n        protocol: 'http',\n        waitforTimeout: 500,\n        waitforInterval: 500,\n        coloredLogs: true,\n        logLevel: 'silent',\n        baseUrl: null,\n        onError: [],\n        connectionRetryTimeout: 90000,\n        connectionRetryCount: 3\n    }, typeof args !== 'string' ? args : {});\n\n    /**\n     * define Selenium backend given on user options\n     */\n    options = (0, _deepmerge2.default)((0, _detectSeleniumBackend2.default)(args), options);\n\n    /**\n     * only set globals we wouldn't get otherwise\n     */\n    if (!process.env.WEBDRIVERIO_COLORED_LOGS) {\n        process.env.WEBDRIVERIO_COLORED_LOGS = options.coloredLogs;\n    }\n\n    var logger = new _Logger2.default(options, eventHandler);\n    var requestHandler = new _RequestHandler2.default(options, eventHandler, logger);\n\n    /**\n     * assign instance to existing session\n     */\n    if (typeof args === 'string') {\n        requestHandler.sessionID = args;\n    }\n\n    /**\n     * sanitize error handler\n     */\n    if (!Array.isArray(options.onError)) {\n        options.onError = [options.onError];\n    }\n    options.onError = options.onError.filter(function (fn) {\n        return typeof fn === 'function';\n    });\n\n    var desiredCapabilities = (0, _deepmerge2.default)({\n        javascriptEnabled: true,\n        locationContextEnabled: true,\n        handlesAlerts: true,\n        rotatable: true\n    }, options.desiredCapabilities || {});\n\n    var _mobileDetector = (0, _mobileDetector3.default)(desiredCapabilities),\n        isMobile = _mobileDetector.isMobile,\n        isIOS = _mobileDetector.isIOS,\n        isAndroid = _mobileDetector.isAndroid;\n\n    /**\n     * if no caps are specified fall back to firefox\n     */\n\n\n    if (!desiredCapabilities.browserName && !isMobile) {\n        desiredCapabilities.browserName = 'firefox';\n    }\n\n    if (!isMobile && typeof desiredCapabilities.loggingPrefs === 'undefined') {\n        desiredCapabilities.loggingPrefs = {\n            browser: 'ALL',\n            driver: 'ALL'\n        };\n    }\n\n    var resolve = function resolve(result, onFulfilled, onRejected, context) {\n        var _this = this;\n\n        if (typeof result === 'function') {\n            this.isExecuted = true;\n            result = result.call(this);\n        }\n\n        /**\n         * run error handler if command fails\n         */\n        if (result instanceof Error) {\n            (function () {\n                var _result = result;\n\n                _this.defer.resolve(_promise2.default.all(_errorHandler2.default.map(function (fn) {\n                    return fn.call(context, result);\n                })).then(function (res) {\n                    var handlerResponses = res.filter(function (r) {\n                        return typeof r !== 'undefined';\n                    });\n\n                    /**\n                     * if no handler was triggered trough actual error\n                     */\n                    if (handlerResponses.length === 0) {\n                        return callErrorHandlerAndReject.call(context, _result, onRejected);\n                    }\n\n                    return onFulfilled.call(context, handlerResponses[0]);\n                }, function (e) {\n                    return callErrorHandlerAndReject.call(context, e, onRejected);\n                }));\n            })();\n        } else {\n            this.defer.resolve(result);\n        }\n\n        return this.promise;\n    };\n\n    /**\n     * middleware to call on error handler in wdio mode\n     */\n    var callErrorHandlerAndReject = function callErrorHandlerAndReject(err, onRejected) {\n        var _this2 = this;\n\n        /**\n         * only call error handler if there is any and if error has bubbled up\n         */\n        if (!this || this.depth !== 0 || options.onError.length === 0) {\n            return reject.call(this, err, onRejected);\n        }\n\n        return new _promise2.default(function (resolve, reject) {\n            return _promise2.default.all(options.onError.map(function (fn) {\n                if (!global.wdioSync) {\n                    return fn.call(_this2, err);\n                }\n\n                return new _promise2.default(function (resolve) {\n                    return global.wdioSync(fn, resolve).call(_this2, err);\n                });\n            })).then(resolve, reject);\n        }).then(function () {\n            return reject.call(_this2, err, onRejected);\n        });\n    };\n\n    /**\n     * By using finally in our next method we omit the duty to throw an exception at some\n     * point. To avoid propagating rejected promises until everything crashes silently we\n     * check if the last and current promise got rejected. If so we can throw the error.\n     */\n    var reject = function reject(err, onRejected) {\n        if (!options.isWDIO && !options.screenshotOnReject && typeof onRejected === 'function') {\n            delete err.screenshot;\n            return onRejected(err);\n        }\n\n        var onRejectedSafe = function onRejectedSafe(err) {\n            if (typeof onRejected === 'function') {\n                onRejected(err);\n            }\n        };\n\n        if (!this && !options.screenshotOnReject) {\n            onRejectedSafe(err);\n            throw err;\n        }\n\n        if (this && this.depth !== 0) {\n            onRejectedSafe(err);\n            return this.promise;\n        }\n\n        var shouldTakeScreenshot = options.screenshotOnReject || typeof options.screenshotPath === 'string';\n        if (!shouldTakeScreenshot || err.shotTaken || insideCommand('screenshot', this)) {\n            return fail(err, onRejected);\n        }\n\n        err.shotTaken = true;\n        return takeScreenshot(err).catch(function (e) {\n            return logger.log('\\tFailed to take screenshot on reject:', e);\n        }).then(function () {\n            return fail(err, onRejected);\n        });\n    };\n\n    function insideCommand(command, unit) {\n        var commands = unit && unit.commandList;\n        return commands && commands[commands.length - 1].name === command;\n    }\n\n    function takeScreenshot(err) {\n        var client = unit();\n        var failDate = new Date();\n\n        if ((0, _typeof3.default)(options.screenshotOnReject) === 'object') {\n            client.requestHandler = createRequestHandlerDecorator(options.screenshotOnReject);\n        }\n\n        // don't take a new screenshot if we already got one from Selenium\n        var getScreenshot = typeof err.screenshot === 'string' ? function () {\n            return err.screenshot;\n        } : function () {\n            return rawCommands.screenshot.call(client).then(function (res) {\n                return res.value;\n            });\n        };\n\n        return _q2.default.fcall(getScreenshot).then(function (screenshot) {\n            if (options.screenshotOnReject) {\n                err.screenshot = screenshot;\n            }\n\n            if (typeof options.screenshotPath === 'string') {\n                var filename = saveScreenshotSync(screenshot, failDate);\n                client.emit('screenshot', { data: screenshot, filename: filename });\n            }\n        });\n    }\n\n    function createRequestHandlerDecorator(opts) {\n        return (0, _create2.default)(requestHandler, {\n            defaultOptions: {\n                value: (0, _assign2.default)({}, requestHandler.defaultOptions, opts)\n            }\n        });\n    }\n\n    function saveScreenshotSync(screenshot, date) {\n        var screenshotPath = _path2.default.isAbsolute(options.screenshotPath) ? options.screenshotPath : _path2.default.join(process.cwd(), options.screenshotPath);\n\n        /**\n        * create directory if not existing\n        */\n        try {\n            _fs2.default.statSync(screenshotPath);\n        } catch (e) {\n            _mkdirp2.default.sync(screenshotPath);\n        }\n\n        var capId = _sanitize2.default.caps(desiredCapabilities);\n        var timestamp = date.toJSON().replace(/:/g, '-');\n        var filename = 'ERROR_' + capId + '_' + timestamp + '.png';\n        var filePath = _path2.default.join(screenshotPath, filename);\n\n        _fs2.default.writeFileSync(filePath, new Buffer(screenshot, 'base64'));\n        logger.log('\\tSaved screenshot: ' + filename);\n\n        return filename;\n    }\n\n    function fail(e, onRejected) {\n        if (!e.stack) {\n            e = new Error(e);\n        }\n\n        var stack = stacktrace.slice().map(function (trace) {\n            return '    at ' + trace;\n        });\n        e.stack = e.name + ': ' + e.message + '\\n' + stack.reverse().join('\\n');\n\n        /**\n         * the waitUntil command can execute a lot of functions until it resolves\n         * to keep the stacktrace sane we just shrink down the stacktrack and\n         * only keep waitUntil in it\n         */\n        if (e.name === 'WaitUntilTimeoutError') {\n            stack = e.stack.split('\\n');\n            stack.splice(1, stack.length - 2);\n            e.stack = stack.join('\\n');\n        }\n\n        /**\n         * ToDo useful feature for standalone mode:\n         * option that if true causes script to throw exception if command fails:\n         *\n         * process.nextTick(() => {\n         *     throw e\n         * })\n         */\n\n        if (typeof onRejected !== 'function') {\n            throw e;\n        }\n\n        return onRejected(e);\n    }\n\n    /**\n     * WebdriverIO Monad\n     */\n    function unit(lastPromise) {\n        var client = (0, _create2.default)(prototype);\n        var defer = _q2.default.defer();\n        var promise = defer.promise;\n\n        client.defer = defer;\n        client.promise = promise;\n        client.lastPromise = lastPromise || fulFilledPromise;\n\n        client.desiredCapabilities = desiredCapabilities;\n        client.requestHandler = requestHandler;\n        client.logger = logger;\n        client.options = options;\n        client.commandList = commandList;\n\n        client.isMobile = isMobile;\n        client.isIOS = isIOS;\n        client.isAndroid = isAndroid;\n\n        /**\n         * actual bind function\n         */\n        client.next = function (func, args, name) {\n            var _this3 = this;\n\n            /**\n             * use finally to propagate rejected promises up the chain\n             */\n            return this.lastPromise.then(function (val) {\n                /**\n                 * store command into command list so `getHistory` can return it\n                 */\n                commandList.push({ name: name, args: args });\n\n                /**\n                 * allow user to leave out selector argument if they have already queried an element before\n                 */\n                var lastResult = val || _this3.lastResult;\n                if ((0, _hasElementResultHelper2.default)(lastResult) && args.length < func.length && func.toString().indexOf('function ' + name + '(selector') === 0) {\n                    if (lastResult.selector && name === 'waitForExist') {\n                        _this3.lastResult = null;\n                        args.unshift(lastResult.selector);\n                    } else {\n                        args.unshift(null);\n                    }\n                }\n\n                return resolve.call(_this3, (0, _safeExecute2.default)(func, args));\n            }, function (e) {\n                /**\n                 * this will get reached only in standalone mode if the command\n                 * fails and doesn't get followed by a then or catch method\n                 */\n                return resolve.call(_this3, e, null, null, { depth: 0 });\n            });\n        };\n\n        client.finally = function (fn) {\n            var _this4 = this;\n\n            var client = unit(this.promise.finally(function () {\n                return resolve.call(client, (0, _safeExecute2.default)(fn, []).bind(_this4));\n            }));\n            return client;\n        };\n\n        client.call = function (fn) {\n            var _this5 = this;\n\n            var client = unit(this.promise.done(function () {\n                return resolve.call(client, (0, _safeExecute2.default)(fn, []).bind(_this5));\n            }));\n            return client;\n        };\n\n        client.then = function (onFulfilled, onRejected) {\n            var _this6 = this;\n\n            if (typeof onFulfilled !== 'function' && typeof onRejected !== 'function') {\n                return this;\n            }\n\n            /**\n             * execute then function in context of the new instance\n             * but resolve result with this\n             */\n            var client = unit(this.promise.then(function () {\n                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = arguments[_key];\n                }\n\n                /**\n                 * store result in commandList\n                 */\n                if (commandList.length) {\n                    commandList[commandList.length - 1].result = args[0];\n                }\n\n                /**\n                 * resolve command\n                 */\n                return resolve.call(client, (0, _safeExecute2.default)(onFulfilled, args).bind(_this6));\n            }, function (e) {\n                var result = (0, _safeExecute2.default)(onRejected, [e]).bind(_this6);\n\n                /**\n                 * handle error once command was bubbled up the command chain\n                 */\n                if (_this6.depth === 0) {\n                    result = e;\n                }\n\n                return resolve.call(client, result, onFulfilled, onRejected, _this6);\n            }));\n\n            return client;\n        };\n\n        client.catch = function (onRejected) {\n            return this.then(undefined, onRejected);\n        };\n\n        client.inspect = function () {\n            return this.promise.inspect();\n        };\n\n        /**\n         * internal helper method to handle command results\n         *\n         * @param  {Promise[]} promises  list of promises\n         * @param  {Boolean}   option    if true extract value property from selenium result\n         */\n        client.unify = function (promises, option) {\n            option = option || {};\n            promises = Array.isArray(promises) ? promises : [promises];\n\n            return _promise2.default.all(promises)\n            /**\n             * extract value property from result if desired\n             */\n            .then(function (result) {\n                if (!option.extractValue || !Array.isArray(result)) {\n                    return result;\n                }\n\n                return result.map(function (res) {\n                    return res.value && typeof res.value === 'string' ? res.value.trim() : res.value;\n                });\n\n                /**\n                 * sanitize result for better assertion\n                 */\n            }).then(function (result) {\n                if (Array.isArray(result) && result.length === 1) {\n                    result = result[0];\n                }\n\n                if (option.lowercase && typeof result === 'string') {\n                    result = result.toLowerCase();\n                }\n\n                return result;\n            });\n        };\n\n        /**\n         * addCommand handler for async or standalone mode\n         * @param {String}   fnName         function name\n         * @param {Function} fn             function\n         * @param {Boolean}  forceOverwrite if true it can overwrite existing commands\n         */\n        client.addCommand = function (fnName, fn, forceOverwrite) {\n            if (typeof fn === 'string') {\n                var namespace = arguments[0];\n                fnName = arguments[1];\n                fn = arguments[2];\n                forceOverwrite = arguments[3];\n\n                switch ((0, _typeof3.default)(client[namespace])) {\n                    case 'function':\n                        throw new _ErrorHandler.RuntimeError('Command namespace \"' + namespace + '\" is used internally, and can\\'t be overwritten!');\n                    case 'object':\n                        if (client[namespace][fnName] && !forceOverwrite) {\n                            throw new _ErrorHandler.RuntimeError('Command \"' + fnName + '\" is already defined!');\n                        }\n                        break;\n                }\n                return unit.lift(namespace, fnName, fn);\n            }\n\n            if (client[fnName] && !forceOverwrite) {\n                throw new _ErrorHandler.RuntimeError('Command \"' + fnName + '\" is already defined!');\n            }\n            return unit.lift(fnName, fn);\n        };\n\n        client.getPrototype = function () {\n            return prototype;\n        };\n\n        client.transferPromiseness = function (target, promise) {\n            /**\n             * transfer WebdriverIO commands\n             */\n            var clientFunctions = (0, _keys2.default)(prototype);\n            var functionsToTranfer = clientFunctions.concat(PROMISE_FUNCTIONS);\n\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(functionsToTranfer), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var fnName = _step.value;\n\n                    if (typeof promise[fnName] === 'function') {\n                        target[fnName] = promise[fnName].bind(promise);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        };\n\n        if (typeof modifier === 'function') {\n            client = modifier(client, options);\n        }\n\n        return client;\n    }\n\n    /**\n     * enhance base monad prototype with methods\n     */\n    unit.lift = function (name, func) {\n        var commandGroup = prototype;\n\n        if (typeof func === 'string') {\n            var namespace = arguments[0];\n            name = arguments[1];\n            func = arguments[2];\n\n            if (!prototype[namespace]) {\n                prototype[namespace] = {};\n            }\n\n            commandGroup = prototype[namespace];\n        }\n\n        rawCommands[name] = func;\n\n        commandGroup[name] = function () {\n            var nextPromise = this.promise;\n\n            /**\n             * commands executed inside commands don't have to wait\n             * on any promise\n             */\n            if (this.isExecuted) {\n                nextPromise = this.lastPromise;\n            }\n\n            var client = unit(nextPromise);\n\n            /**\n             * catch stack to find information about where the command that causes\n             * the error was used (stack line 2) and only save it when it was not\n             * within WebdriverIO context\n             */\n            var stack = new Error().stack;\n            var lineInTest = stack.split('\\n').slice(2, 3).join('\\n');\n            var fileAndPosition = lineInTest.slice(lineInTest.indexOf('(') + 1, lineInTest.indexOf(')'));\n            var atCommand = lineInTest.trim().slice(3).split(' ')[0];\n\n            atCommand = atCommand.slice(atCommand.lastIndexOf('.') + 1);\n\n            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n            }\n\n            var trace = name + '(' + _sanitize2.default.args(args) + ') - ' + fileAndPosition.slice(fileAndPosition.lastIndexOf('/') + 1);\n            if ((0, _keys2.default)(prototype).indexOf(atCommand) === -1 && atCommand !== 'exports') {\n                stacktrace = [trace];\n            } else {\n                /**\n                 * save trace for nested commands\n                 */\n                stacktrace.push(trace);\n            }\n\n            /**\n             * determine execution depth:\n             * This little tweak helps us to determine whether the command was executed\n             * by the test script or by another command. With that we can make sure\n             * that errors are getting thrown once they bubbled up the command chain.\n             */\n            client.depth = stack.split('\\n').filter(function (line) {\n                return !!line.match(/\\/lib\\/(commands|protocol)\\/(\\w+)\\.js/);\n            }).length;\n\n            /**\n             * queue command\n             */\n            client.name = name;\n            client.lastResult = this.lastResult;\n            client.next(func, args, name);\n            return client;\n        };\n\n        return unit;\n    };\n\n    /**\n     * register event emitter\n     */\n\n    var _loop = function _loop(eventCommand) {\n        prototype[eventCommand] = function () {\n            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                args[_key3] = arguments[_key3];\n            }\n\n            /**\n             * custom commands needs to get emitted and registered in order\n             * to prevent race conditions\n             */\n            if (INTERNAL_EVENTS.indexOf(args[0]) === -1) {\n                return this.finally(function () {\n                    return eventHandler[eventCommand].apply(eventHandler, args);\n                });\n            }\n\n            eventHandler[eventCommand].apply(eventHandler, args);\n            return this;\n        };\n    };\n\n    for (var eventCommand in EVENTHANDLER_FUNCTIONS) {\n        _loop(eventCommand);\n    }\n\n    return unit;\n};\n\nexports.default = WebdriverIO;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/utils/RequestHandler.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _request2 = require('request');\n\nvar _request3 = _interopRequireDefault(_request2);\n\nvar _deepmerge = require('deepmerge');\n\nvar _deepmerge2 = _interopRequireDefault(_deepmerge);\n\nvar _constants = require('../helpers/constants');\n\nvar _ErrorHandler = require('./ErrorHandler');\n\nvar _package = require('../../package.json');\n\nvar _package2 = _interopRequireDefault(_package);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * RequestHandler\n */\nvar RequestHandler = function () {\n    function RequestHandler(options, eventHandler, logger) {\n        (0, _classCallCheck3.default)(this, RequestHandler);\n\n        this.sessionID = null;\n        this.startPath = options.path === '/' ? '' : options.path || '/wd/hub';\n        this.gridApiStartPath = '/grid/api';\n        this.eventHandler = eventHandler;\n        this.logger = logger;\n        this.defaultOptions = options;\n\n        /**\n         * actually host is `hostname:port` but to keep config properties\n         * short we abuse host as hostname\n         */\n        if (options.host !== undefined) {\n            options.hostname = options.host;\n            delete options.host;\n        }\n\n        /**\n         * set auth from user and password configs\n         */\n        if (this.defaultOptions.user && this.defaultOptions.key) {\n            this.auth = {\n                user: this.defaultOptions.user,\n                pass: this.defaultOptions.key\n            };\n\n            delete this.defaultOptions.user;\n            delete this.defaultOptions.key;\n        }\n    }\n\n    /**\n     * merges default options with request options\n     *\n     * @param  {Object} requestOptions  request options\n     */\n\n\n    (0, _createClass3.default)(RequestHandler, [{\n        key: 'createOptions',\n        value: function createOptions(requestOptions, data) {\n            var newOptions = {};\n\n            /**\n             * if we don't have a session id we set it here, unless we call commands that don't require session ids, for\n             * example /sessions. The call to /sessions is not connected to a session itself and it therefore doesn't\n             * require it\n             */\n            if (requestOptions.path.match(/:sessionId/) && !this.sessionID && requestOptions.requiresSession !== false) {\n                // throw session id error\n                throw new _ErrorHandler.RuntimeError(101);\n            }\n\n            newOptions.uri = _url2.default.parse(this.defaultOptions.protocol + '://' + this.defaultOptions.hostname + ':' + this.defaultOptions.port + (requestOptions.gridCommand ? this.gridApiStartPath : this.startPath) + requestOptions.path.replace(':sessionId', this.sessionID || ''));\n\n            // send authentication credentials only when creating new session\n            if (requestOptions.path === '/session' && this.auth !== undefined) {\n                newOptions.auth = this.auth;\n            }\n\n            if (requestOptions.method) {\n                newOptions.method = requestOptions.method;\n            }\n\n            if (requestOptions.gridCommand) {\n                newOptions.gridCommand = requestOptions.gridCommand;\n            }\n\n            newOptions.json = true;\n            newOptions.followAllRedirects = true;\n\n            newOptions.headers = {\n                'Connection': 'keep-alive',\n                'Accept': 'application/json',\n                'User-Agent': 'webdriverio/webdriverio/' + _package2.default.version\n            };\n\n            if ((0, _keys2.default)(data).length > 0) {\n                newOptions.json = data;\n                newOptions.method = 'POST';\n                newOptions.headers = (0, _deepmerge2.default)(newOptions.headers, {\n                    'Content-Type': 'application/json; charset=UTF-8',\n                    'Content-Length': Buffer.byteLength((0, _stringify2.default)(data), 'UTF-8')\n                });\n            }\n\n            newOptions.timeout = this.defaultOptions.connectionRetryTimeout;\n\n            return newOptions;\n        }\n\n        /**\n         * creates a http request with its given options and send the protocol\n         * command to the webdriver server\n         *\n         * @param  {Object}   requestOptions  defines url, method and other request options\n         * @param  {Object}   data            contains request data\n         */\n\n    }, {\n        key: 'create',\n        value: function create(requestOptions, data) {\n            var _this = this;\n\n            data = data || {};\n\n            /**\n             * allow to pass a string as shorthand argument\n             */\n            if (typeof requestOptions === 'string') {\n                requestOptions = {\n                    path: requestOptions\n                };\n            }\n\n            var fullRequestOptions = this.createOptions(requestOptions, data);\n\n            this.eventHandler.emit('command', {\n                method: fullRequestOptions.method || 'GET',\n                uri: fullRequestOptions.uri,\n                data: data\n            });\n\n            return this.request(fullRequestOptions, this.defaultOptions.connectionRetryCount).then(function (_ref) {\n                var body = _ref.body,\n                    response = _ref.response;\n\n                /**\n                 * if no session id was set before we've called the init command\n                 */\n                if (_this.sessionID === null && requestOptions.requiresSession !== false) {\n                    _this.sessionID = body.sessionId;\n\n                    _this.eventHandler.emit('init', {\n                        sessionID: _this.sessionID,\n                        options: body.value,\n                        desiredCapabilities: data.desiredCapabilities\n                    });\n\n                    _this.eventHandler.emit('info', 'SET SESSION ID ' + _this.sessionID);\n                }\n\n                if (body === undefined) {\n                    body = {\n                        status: 0,\n                        orgStatusMessage: _constants.ERROR_CODES[0].message\n                    };\n                }\n\n                _this.eventHandler.emit('result', {\n                    requestData: data,\n                    requestOptions: fullRequestOptions,\n                    response: response,\n                    body: body\n                });\n\n                return body;\n            }, function (err) {\n                _this.eventHandler.emit('result', {\n                    requestData: data,\n                    requestOptions: fullRequestOptions,\n                    body: err\n                });\n                throw err;\n            });\n        }\n    }, {\n        key: 'request',\n        value: function request(fullRequestOptions, totalRetryCount) {\n            var _this2 = this;\n\n            var retryCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n            return new _promise2.default(function (resolve, reject) {\n                (0, _request3.default)(fullRequestOptions, function (err, response, body) {\n                    /**\n                     * Resolve with a healthy response\n                     */\n                    if (!err && body && body.status === 0) {\n                        return resolve({ body: body, response: response });\n                    }\n\n                    if (fullRequestOptions.gridCommand) {\n                        if (body.success) {\n                            return resolve({ body: body, response: response });\n                        }\n\n                        return reject(new _ErrorHandler.RuntimeError({\n                            status: 102,\n                            type: _constants.ERROR_CODES[102].id,\n                            message: _constants.ERROR_CODES[102].message,\n                            orgStatusMessage: body.msg || 'unknown'\n                        }));\n                    }\n\n                    /**\n                     * in Appium you find sometimes more exact error messages in origValue\n                     */\n                    if (body && body.value && typeof body.value.origValue === 'string' && typeof body.value.message === 'string') {\n                        body.value.message += ' ' + body.value.origValue;\n                    }\n\n                    if (body && typeof body === 'string') {\n                        return reject(new _ErrorHandler.RuntimeError(body));\n                    }\n\n                    if (body) {\n                        var error = {\n                            status: body.status,\n                            type: _constants.ERROR_CODES[body.status] ? _constants.ERROR_CODES[body.status].id : 'unknown',\n                            message: _constants.ERROR_CODES[body.status] ? _constants.ERROR_CODES[body.status].message : 'unknown',\n                            orgStatusMessage: body.value ? body.value.message : ''\n                        };\n                        var screenshot = body.value && body.value.screen;\n\n                        if (screenshot) {\n                            error.screenshot = screenshot;\n                        }\n\n                        return reject(new _ErrorHandler.RuntimeError(error));\n                    }\n\n                    if (retryCount >= totalRetryCount) {\n                        var _error = null;\n\n                        if (err && err.message.indexOf('Nock') > -1) {\n                            // for better unit test error output\n                            _error = err;\n                        } else {\n                            _error = new _ErrorHandler.RuntimeError({\n                                status: -1,\n                                type: 'ECONNREFUSED',\n                                message: 'Couldn\\'t connect to selenium server',\n                                orgStatusMessage: 'Couldn\\'t connect to selenium server'\n                            });\n                        }\n\n                        return reject(_error);\n                    }\n\n                    _this2.request(fullRequestOptions, totalRetryCount, ++retryCount).then(resolve).catch(reject);\n                });\n            });\n        }\n    }]);\n    return RequestHandler;\n}();\n\nexports.default = RequestHandler;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/helpers/constants.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * logger colors\n */\nvar COLORS = {\n    black: '\\x1b[0;30m',\n    dkgray: '\\x1b[1;30m',\n    brick: '\\x1b[0;31m',\n    red: '\\x1b[1;31m',\n    dkred: '\\x1b[31m',\n    green: '\\x1b[0;32m',\n    lime: '\\x1b[1;32m',\n    brown: '\\x1b[0;33m',\n    yellow: '\\x1b[1;33m',\n    navy: '\\x1b[0;34m',\n    blue: '\\x1b[1;34m',\n    violet: '\\x1b[0;35m',\n    magenta: '\\x1b[1;35m',\n    teal: '\\x1b[0;36m',\n    cyan: '\\x1b[1;36m',\n    ltgray: '\\x1b[0;37m',\n    white: '\\x1b[1;37m',\n    reset: '\\x1b[0m'\n};\n\n/**\n * selenium error codes\n * https://w3c.github.io/webdriver/webdriver-spec.html#dfn-error-code\n */\nvar ERROR_CODES = {\n    '-1': { id: 'Unknown', message: 'Remote end send an unknown status code.' },\n    '0': { id: 'Success', message: 'The command executed successfully.' },\n    '6': { id: 'NoSuchDriver', message: 'A session is either terminated or not started' },\n    '7': { id: 'NoSuchElement', message: 'An element could not be located on the page using the given search parameters.' },\n    '8': { id: 'NoSuchFrame', message: 'A request to switch to a frame could not be satisfied because the frame could not be found.' },\n    '9': { id: 'UnknownCommand', message: 'The requested resource could not be found, or a request was received using an HTTP method that is not supported by the mapped resource.' },\n    '10': { id: 'StaleElementReference', message: 'An element command failed because the referenced element is no longer attached to the DOM.' },\n    '11': { id: 'ElementNotVisible', message: 'An element command could not be completed because the element is not visible on the page.' },\n    '12': { id: 'InvalidElementState', message: 'An element command could not be completed because the element is in an invalid state (e.g. attempting to click a disabled element).' },\n    '13': { id: 'UnknownError', message: 'An unknown server-side error occurred while processing the command.' },\n    '15': { id: 'ElementIsNotSelectable', message: 'An attempt was made to select an element that cannot be selected.' },\n    '17': { id: 'JavaScriptError', message: 'An error occurred while executing user supplied JavaScript.' },\n    '19': { id: 'XPathLookupError', message: 'An error occurred while searching for an element by XPath.' },\n    '21': { id: 'Timeout', message: 'An operation did not complete before its timeout expired.' },\n    '23': { id: 'NoSuchWindow', message: 'A request to switch to a different window could not be satisfied because the window could not be found.' },\n    '24': { id: 'InvalidCookieDomain', message: 'An illegal attempt was made to set a cookie under a different domain than the current page.' },\n    '25': { id: 'UnableToSetCookie', message: 'A request to set a cookie\\'s value could not be satisfied.' },\n    '26': { id: 'UnexpectedAlertOpen', message: 'A modal dialog was open, blocking this operation' },\n    '27': { id: 'NoAlertOpenError', message: 'An attempt was made to operate on a modal dialog when one was not open.' },\n    '28': { id: 'ScriptTimeout', message: 'A script did not complete before its timeout expired.' },\n    '29': { id: 'InvalidElementCoordinates', message: 'The coordinates provided to an interactions operation are invalid.' },\n    '30': { id: 'IMENotAvailable', message: 'IME was not available.' },\n    '31': { id: 'IMEEngineActivationFailed', message: 'An IME engine could not be started.' },\n    '32': { id: 'InvalidSelector', message: 'Argument was an invalid selector (e.g. XPath/CSS).' },\n    '33': { id: 'SessionNotCreatedException', message: 'A new session could not be created.' },\n    '34': { id: 'ElementNotScrollable', message: 'Element cannot be scrolled into view.' },\n\n    // WebdriverIO specific error codes\n    '100': { id: 'SelectorTimeoutError', message: 'Request timed out after the element was still found on the page.' },\n    '101': { id: 'NoSessionIdError', message: 'A session id is required for this command but wasn\\'t found in the response payload' },\n    '102': { id: 'GridApiError', message: 'A call to the Selenium Grid API failed' }\n};\n\n/**\n * unicode characters\n * https://w3c.github.io/webdriver/webdriver-spec.html#character-types\n */\nvar UNICODE_CHARACTERS = {\n    'NULL': '\\uE000',\n    'Unidentified': '\\uE000',\n    'Cancel': '\\uE001',\n    'Help': '\\uE002',\n    'Back space': '\\uE003',\n    'Backspace': '\\uE003',\n    'Tab': '\\uE004',\n    'Clear': '\\uE005',\n    'Return': '\\uE006',\n    'Enter': '\\uE007',\n    'Shift': '\\uE008',\n    'Control': '\\uE009',\n    'Alt': '\\uE00A',\n    'Pause': '\\uE00B',\n    'Escape': '\\uE00C',\n    'Space': '\\uE00D',\n    ' ': '\\uE00D',\n    'Pageup': '\\uE00E',\n    'PageUp': '\\uE00E',\n    'Page_Up': '\\uE00E',\n    'Pagedown': '\\uE00F',\n    'PageDown': '\\uE00F',\n    'Page_Down': '\\uE00F',\n    'End': '\\uE010',\n    'Home': '\\uE011',\n    'Left arrow': '\\uE012',\n    'Arrow_Left': '\\uE012',\n    'ArrowLeft': '\\uE012',\n    'Up arrow': '\\uE013',\n    'Arrow_Up': '\\uE013',\n    'ArrowUp': '\\uE013',\n    'Right arrow': '\\uE014',\n    'Arrow_Right': '\\uE014',\n    'ArrowRight': '\\uE014',\n    'Down arrow': '\\uE015',\n    'Arrow_Down': '\\uE015',\n    'ArrowDown': '\\uE015',\n    'Insert': '\\uE016',\n    'Delete': '\\uE017',\n    'Semicolon': '\\uE018',\n    'Equals': '\\uE019',\n    'Numpad 0': '\\uE01A',\n    'Numpad 1': '\\uE01B',\n    'Numpad 2': '\\uE01C',\n    'Numpad 3': '\\uE01D',\n    'Numpad 4': '\\uE01E',\n    'Numpad 5': '\\uE01F',\n    'Numpad 6': '\\uE020',\n    'Numpad 7': '\\uE021',\n    'Numpad 8': '\\uE022',\n    'Numpad 9': '\\uE023',\n    'Multiply': '\\uE024',\n    'Add': '\\uE025',\n    'Separator': '\\uE026',\n    'Subtract': '\\uE027',\n    'Decimal': '\\uE028',\n    'Divide': '\\uE029',\n    'F1': '\\uE031',\n    'F2': '\\uE032',\n    'F3': '\\uE033',\n    'F4': '\\uE034',\n    'F5': '\\uE035',\n    'F6': '\\uE036',\n    'F7': '\\uE037',\n    'F8': '\\uE038',\n    'F9': '\\uE039',\n    'F10': '\\uE03A',\n    'F11': '\\uE03B',\n    'F12': '\\uE03C',\n    'Command': '\\uE03D',\n    'Meta': '\\uE03D',\n    'Zenkaku_Hankaku': '\\uE040',\n    'ZenkakuHankaku': '\\uE040'\n};\n\nexports.COLORS = COLORS;\nexports.ERROR_CODES = ERROR_CODES;\nexports.UNICODE_CHARACTERS = UNICODE_CHARACTERS;\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/utils/ErrorHandler.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.isTimeoutError = exports.WaitUntilTimeoutError = exports.WaitForTimeoutError = exports.RuntimeError = exports.ProtocolError = exports.CommandError = exports.ErrorHandler = undefined;\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _constants = require('../helpers/constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ErrorHandler = function (_Error) {\n    (0, _inherits3.default)(ErrorHandler, _Error);\n\n    function ErrorHandler(type, msg, details) {\n        (0, _classCallCheck3.default)(this, ErrorHandler);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (ErrorHandler.__proto__ || (0, _getPrototypeOf2.default)(ErrorHandler)).call(this));\n\n        Error.captureStackTrace(_this, _this.constructor);\n\n        if (typeof msg === 'number') {\n            // if ID is not known error throw UnknownError\n            if (!_constants.ERROR_CODES[msg]) {\n                msg = 13;\n            }\n\n            _this.type = _constants.ERROR_CODES[msg].id;\n            _this.message = _constants.ERROR_CODES[msg].message;\n\n            if (msg === 7 && details) {\n                _this.message = _this.message.slice(0, -1) + ' (\"' + details + '\").';\n            }\n        } else if (arguments.length === 2) {\n            _this.message = msg;\n            _this.type = type;\n        } else if (arguments.length === 1) {\n            _this.type = 'WebdriverIOError';\n            _this.message = type;\n        }\n\n        if ((0, _typeof3.default)(_this.message) === 'object') {\n            var seleniumStack = _this.message;\n\n            if (seleniumStack.screenshot) {\n                _this.screenshot = seleniumStack.screenshot;\n                delete seleniumStack.screenshot;\n            }\n\n            if (seleniumStack.message && seleniumStack.type && seleniumStack.status) {\n                if (typeof seleniumStack.orgStatusMessage === 'string' && seleniumStack.orgStatusMessage.match(/\"errorMessage\":\"NoSuchElement\"/)) {\n                    seleniumStack.type = 'NoSuchElement';\n                    seleniumStack.status = 7;\n                    seleniumStack.message = _constants.ERROR_CODES['7'].message;\n                }\n\n                _this.message = seleniumStack.message + ' (' + seleniumStack.type + ':' + seleniumStack.status + ')';\n            }\n\n            if (typeof seleniumStack.orgStatusMessage === 'string') {\n                var reqPos = seleniumStack.orgStatusMessage.indexOf(',\"request\"');\n                var problem = '';\n\n                if (reqPos > 0) {\n                    problem = JSON.parse(seleniumStack.orgStatusMessage.slice(0, reqPos) + '}').errorMessage;\n                } else {\n                    problem = seleniumStack.orgStatusMessage;\n                }\n\n                if (problem.indexOf('No enum constant org.openqa.selenium.Platform') > -1) {\n                    problem = 'The Selenium backend you\\'ve chosen doesn\\'t support the desired platform (' + problem.slice(46) + ')';\n                }\n\n                // truncate errorMessage\n                if (problem.indexOf('(Session info:') > -1) {\n                    problem = problem.slice(0, problem.indexOf('(Session info:')).trim();\n                }\n\n                // make assumption based on experience on certain error messages\n                if (problem.indexOf('unknown error: path is not absolute') !== -1) {\n                    problem = 'You are trying to set a value to an input field with type=\"file\", use the `uploadFile` command instead (Selenium error: ' + problem + ')';\n                }\n\n                _this.message = problem;\n                _this.seleniumStack = seleniumStack;\n            }\n        }\n        return _this;\n    }\n\n    /**\n     * make stack loggable\n     * @return {Object} error log\n     */\n\n\n    (0, _createClass3.default)(ErrorHandler, [{\n        key: 'toJSON',\n        value: function toJSON() {\n            return {\n                name: this.type,\n                message: this.message\n            };\n        }\n    }]);\n    return ErrorHandler;\n}(Error);\n\nvar CommandError = function CommandError(msg, details) {\n    return new ErrorHandler('CommandError', msg, details);\n};\nvar ProtocolError = function ProtocolError(msg) {\n    return new ErrorHandler('ProtocolError', msg);\n};\nvar RuntimeError = function RuntimeError(msg) {\n    return new ErrorHandler('RuntimeError', msg);\n};\nvar WaitForTimeoutError = function WaitForTimeoutError(msg) {\n    return new ErrorHandler('WaitForTimeoutError', msg);\n};\nvar WaitUntilTimeoutError = function WaitUntilTimeoutError(msg) {\n    return new ErrorHandler('WaitUntilTimeoutError', msg);\n};\n\n/**\n * Check if current error is caused by timeout\n * @param {Object} err\n * @returns {Boolean}\n */\nvar isTimeoutError = function isTimeoutError(e) {\n    return e.message === 'Promise was rejected with the following reason: timeout';\n};\n\nexports.ErrorHandler = ErrorHandler;\nexports.CommandError = CommandError;\nexports.ProtocolError = ProtocolError;\nexports.RuntimeError = RuntimeError;\nexports.WaitForTimeoutError = WaitForTimeoutError;\nexports.WaitUntilTimeoutError = WaitUntilTimeoutError;\nexports.isTimeoutError = isTimeoutError;\nexports.default = ErrorHandler;\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/utils/Logger.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _mkdirp = require('mkdirp');\n\nvar _mkdirp2 = _interopRequireDefault(_mkdirp);\n\nvar _constants = require('../helpers/constants');\n\nvar _sanitize = require('../helpers/sanitize');\n\nvar _sanitize2 = _interopRequireDefault(_sanitize);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar BANNER = '\\n' + _constants.COLORS.yellow + '=======================================================================================' + _constants.COLORS.reset + '\\nSelenium 2.0 / webdriver protocol bindings implementation with helper commands in nodejs.\\nFor a complete list of commands, visit ' + _constants.COLORS.lime + 'http://webdriver.io/api.html' + _constants.COLORS.reset + '.\\n' + _constants.COLORS.yellow + '=======================================================================================' + _constants.COLORS.reset + '\\n';\n\n/**\n * Logger module\n *\n * A Logger helper with fancy colors\n */\n\nvar Logger = function () {\n    function Logger(options, eventHandler) {\n        var _this = this;\n\n        (0, _classCallCheck3.default)(this, Logger);\n\n        /**\n         * log level\n         * silent : no logs\n         * command : command only\n         * result : result only\n         * error : error only\n         * verbose : command + data + result\n         */\n        this.logLevel = options.logLevel;\n\n        this.setupWriteStream(options);\n\n        /**\n         * disable colors if coloredLogs is set to false or if we pipe output into files\n         */\n        if (!JSON.parse(process.env.WEBDRIVERIO_COLORED_LOGS) || this.writeStream) {\n            (0, _keys2.default)(_constants.COLORS).forEach(function (colorName) {\n                _constants.COLORS[colorName] = '';\n            });\n        }\n\n        /**\n         * print welcome message\n         */\n        if (this.logLevel !== 'silent' && this.logLevel !== 'error' && !this.infoHasBeenShown) {\n            this.write(BANNER);\n            this.infoHasBeenShown = true;\n        }\n\n        // register event handler to log command events\n        eventHandler.on('command', function (data) {\n            if (_this.logLevel === 'command' || _this.logLevel === 'verbose') {\n                _this.command(data.method, data.uri.path);\n            }\n            if (_this.logLevel === 'data' || _this.logLevel === 'verbose') {\n                _this.data(data.data);\n            }\n        });\n\n        eventHandler.on('info', function (msg) {\n            if (_this.logLevel === 'verbose') {\n                _this.info(msg);\n            }\n        });\n\n        // register event handler to log result events\n        eventHandler.on('result', function (data) {\n            // only log result events if they got executed successfully\n            if (data.body && data.body.status === 0 && (_this.logLevel === 'result' || _this.logLevel === 'verbose')) {\n                _this.result((0, _typeof3.default)(data.body.value) ? data.body.value : data.body.orgStatusMessage);\n            }\n        });\n\n        // register event handler to log error events\n        eventHandler.on('error', function (data) {\n            if (data.err && data.err.code === 'ECONNREFUSED') {\n                _this.error('Couldn\\'t find a running selenium server instance on ' + data.requestOptions.uri);\n            } else if (data.err && data.err.code === 'ENOTFOUND') {\n                _this.error('Couldn\\'t resolve hostname ' + data.requestOptions.uri);\n            } else if (data.err && data.err.code === 'NOSESSIONID') {\n                _this.error('Couldn\\'t get a session ID - ' + data.err.message);\n            } else if (_this.logLevel === 'error' || _this.logLevel === 'verbose') {\n                if (data.body && _constants.ERROR_CODES[data.body.status]) {\n                    _this.error(_constants.ERROR_CODES[data.body.status].id + '\\t' + _constants.ERROR_CODES[data.body.status].message + '\\n\\t\\t\\t' + data.body.value.message);\n                } else if (typeof data.message === 'string') {\n                    _this.error('ServerError\\t' + data.message);\n                } else {\n                    _this.error(_constants.ERROR_CODES['-1'].id + '\\t' + _constants.ERROR_CODES['-1'].message);\n                }\n            }\n        });\n    }\n\n    /**\n     * creates log file name and directories if not existing\n     * @param  {Object} caps          capabilities (required to create filename)\n     * @param  {String} logOutputPath specified log directory\n     * @return {Buffer}               log file buffer stream\n     */\n\n\n    (0, _createClass3.default)(Logger, [{\n        key: 'getLogfile',\n        value: function getLogfile(caps, logOutputPath) {\n            logOutputPath = _path2.default.isAbsolute(logOutputPath) ? logOutputPath : _path2.default.join(process.cwd(), logOutputPath);\n\n            /**\n             * create directory if not existing\n             */\n            try {\n                _fs2.default.statSync(logOutputPath);\n            } catch (e) {\n                _mkdirp2.default.sync(logOutputPath);\n            }\n\n            var newDate = new Date();\n            var dateString = newDate.toISOString().split(/\\./)[0].replace(/:/g, '-');\n            var filename = _sanitize2.default.caps(caps) + '.' + dateString + '.' + process.pid + '.log';\n\n            return _fs2.default.createWriteStream(_path2.default.join(logOutputPath, filename));\n        }\n\n        /**\n         * create write stream if logOutput is a string\n         */\n\n    }, {\n        key: 'setupWriteStream',\n        value: function setupWriteStream(options) {\n            if (typeof options.logOutput === 'string') {\n                this.writeStream = this.getLogfile(options.desiredCapabilities, options.logOutput);\n                this.logLevel = this.logLevel === 'silent' ? 'verbose' : this.logLevel;\n            } else if ((0, _typeof3.default)(options.logOutput) === 'object' && options.logOutput.writable) {\n                this.writeStream = options.logOutput;\n                this.logLevel = this.logLevel === 'silent' ? 'verbose' : this.logLevel;\n            }\n        }\n    }, {\n        key: 'write',\n        value: function write() {\n            for (var _len = arguments.length, messages = Array(_len), _key = 0; _key < _len; _key++) {\n                messages[_key] = arguments[_key];\n            }\n\n            var msgString = messages.join(' ');\n\n            if (this.writeStream) {\n                this.writeStream.write(msgString + '\\n');\n            } else {\n                console.log(msgString);\n            }\n        }\n\n        /**\n         * main log function\n         */\n\n    }, {\n        key: 'log',\n        value: function log(message, content) {\n            if (!this.logLevel || this.logLevel === 'silent') {\n                return;\n            }\n\n            var currentDate = new Date();\n            var dateString = currentDate.toString().match(/\\d\\d:\\d\\d:\\d\\d/)[0];\n            var preamble = _constants.COLORS.dkgray + '[' + dateString + '] ' + _constants.COLORS.reset;\n\n            if (!content) {\n                this.write(preamble, message);\n            } else {\n                this.write(preamble, message, '\\t', (0, _stringify2.default)(_sanitize2.default.limit(content)));\n            }\n        }\n\n        /**\n         * logs command messages\n         * @param  {String} method  method of command request\n         * @param  {String} path    path of command request\n         */\n\n    }, {\n        key: 'command',\n        value: function command(method, path) {\n            if (method && path) {\n                this.log(_constants.COLORS.violet + 'COMMAND\\t' + _constants.COLORS.reset + method, path);\n            }\n        }\n\n        /**\n         * debugger info message\n         */\n\n    }, {\n        key: 'debug',\n        value: function debug() {\n            this.write('');\n            this.log(_constants.COLORS.yellow + 'DEBUG\\t' + _constants.COLORS.reset + 'Queue has stopped!');\n            this.log(_constants.COLORS.yellow + 'DEBUG\\t' + _constants.COLORS.reset + 'You can now go into the browser or use the command line as REPL');\n            this.log(_constants.COLORS.yellow + 'DEBUG\\t' + _constants.COLORS.dkgray + '(To exit, press ^C again or type .exit)' + _constants.COLORS.reset + '\\n');\n        }\n\n        /**\n         * logs data messages\n         * @param  {Object} data  data object\n         */\n\n    }, {\n        key: 'data',\n        value: function data(_data) {\n            _data = (0, _stringify2.default)(_sanitize2.default.limit(_data));\n            if (_data && (this.logLevel === 'data' || this.logLevel === 'verbose')) {\n                this.log(_constants.COLORS.brown + 'DATA\\t\\t' + _constants.COLORS.reset + _data);\n            }\n        }\n\n        /**\n         * logs info messages\n         * @param  {String} msg  message\n         */\n\n    }, {\n        key: 'info',\n        value: function info(msg) {\n            this.log(_constants.COLORS.blue + 'INFO\\t' + _constants.COLORS.reset + msg);\n        }\n\n        /**\n         * logs result messages\n         * @param  {Object} result  result object\n         */\n\n    }, {\n        key: 'result',\n        value: function result(_result) {\n            _result = _sanitize2.default.limit((0, _stringify2.default)(_result));\n            this.log(_constants.COLORS.teal + 'RESULT\\t\\t' + _constants.COLORS.reset + _result);\n        }\n\n        /**\n         * logs error messages\n         * @param  {String} msg  error message\n         */\n\n    }, {\n        key: 'error',\n        value: function error(msg) {\n            if (msg && typeof msg === 'string' && msg.indexOf('caused by Request') !== -1) {\n                msg = msg.substr(0, msg.indexOf('caused by Request') - 2);\n            }\n\n            if (msg && typeof msg === 'string' && msg.indexOf('Command duration or timeout') !== -1) {\n                msg = msg.substr(0, msg.indexOf('Command duration or timeout'));\n            }\n\n            if (msg && typeof msg === 'string' && msg.indexOf('ID does not correspond to an open view') !== -1) {\n                msg = msg.substr(0, msg.indexOf('ID does not correspond to an open view'));\n                msg += 'NOTE: you probably try to continue your tests after closing a tab/window. Please set the focus on a current opened tab/window to continue. Use the window protocol command to do so.';\n            }\n\n            if (msg) {\n                this.log(_constants.COLORS.red + 'ERROR\\t' + _constants.COLORS.reset + msg, null);\n            }\n        }\n\n        /**\n         * print exception if command fails\n         * @param {String}   type        error type\n         * @param {String}   message     error message\n         * @param {String[]} stacktrace  error stacktrace\n         */\n\n    }], [{\n        key: 'printException',\n        value: function printException(type, message, stacktrace) {\n            stacktrace = stacktrace.map(function (trace) {\n                return '    at ' + trace;\n            });\n            this.write(_constants.COLORS.dkred + (type || 'Error') + ': ' + message + _constants.COLORS.reset, null);\n            this.write(_constants.COLORS.dkgray + stacktrace.reverse().join('\\n') + _constants.COLORS.reset, null);\n        }\n    }]);\n    return Logger;\n}();\n\nexports.default = Logger;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/helpers/sanitize.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _jsonStringifySafe = require('json-stringify-safe');\n\nvar _jsonStringifySafe2 = _interopRequireDefault(_jsonStringifySafe);\n\nvar _validator = require('validator');\n\nvar _validator2 = _interopRequireDefault(_validator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar OBJLENGTH = 10;\nvar ARRLENGTH = 10;\nvar STRINGLIMIT = 1000;\nvar STRINGTRUNCATE = 200;\n\nvar sanitizeString = function sanitizeString(str) {\n    if (!str) {\n        return '';\n    }\n\n    return String(str).replace(/^.*\\/([^/]+)\\/?$/, '$1').replace(/\\./g, '_').replace(/\\s/g, '').toLowerCase();\n};\n\n/**\n * formats capability object into sanitized string for e.g.filenames\n * @param {Object} caps  Selenium capabilities\n */\nvar caps = function caps(_caps) {\n    var result = void 0;\n\n    /**\n     * mobile caps\n     */\n    if (_caps.deviceName) {\n        result = [sanitizeString(_caps.deviceName), sanitizeString(_caps.platformName), sanitizeString(_caps.platformVersion), sanitizeString(_caps.app)];\n    } else {\n        result = [sanitizeString(_caps.browserName), sanitizeString(_caps.version), sanitizeString(_caps.platform), sanitizeString(_caps.app)];\n    }\n\n    result = result.filter(function (n) {\n        return n !== undefined && n !== '';\n    });\n    return result.join('.');\n};\n\n/**\n * formats arguments into string\n * @param  {Array} args arguments object\n */\nvar args = function args(_args) {\n    return _args.map(function (arg) {\n        if (typeof arg === 'function' || typeof arg === 'string' && arg.indexOf('return (function') === 0) {\n            return '<Function>';\n        } else if (typeof arg === 'string') {\n            return '\"' + arg + '\"';\n        } else if (Array.isArray(arg)) {\n            return arg.join(', ');\n        }\n\n        return arg;\n    }).join(', ');\n};\n\nvar css = function css(value) {\n    if (!value) {\n        return value;\n    }\n\n    return value.trim().replace(/'/g, '').replace(/\"/g, '').toLowerCase();\n};\n\n/**\n * Limit the length of an arbitrary variable of any type, suitable for being logged or displayed\n * @param  {Any} val Any variable\n * @return {Any}     Limited var of same type\n */\nvar limit = function limit(val) {\n    if (!val) return val;\n\n    // Ensure we're working with a copy\n    val = JSON.parse((0, _jsonStringifySafe2.default)(val));\n\n    switch (Object.prototype.toString.call(val)) {\n        case '[object String]':\n            if (val.length > 100 && _validator2.default.isBase64(val)) {\n                return '[base64] ' + val.length + ' bytes';\n            }\n\n            if (val.length > STRINGLIMIT) {\n                return val.substr(0, STRINGTRUNCATE) + ' ... (' + (val.length - STRINGTRUNCATE) + ' more bytes)';\n            }\n\n            return val;\n        case '[object Array]':\n            var length = val.length;\n            if (length > ARRLENGTH) {\n                val = val.slice(0, ARRLENGTH);\n                val.push('(' + (length - ARRLENGTH) + ' more items)');\n            }\n            return val.map(limit);\n        case '[object Object]':\n            var keys = (0, _keys2.default)(val);\n            var removed = [];\n            for (var i = 0, l = keys.length; i < l; i++) {\n                if (i < OBJLENGTH) {\n                    val[keys[i]] = limit(val[keys[i]]);\n                } else {\n                    delete val[keys[i]];\n                    removed.push(keys[i]);\n                }\n            }\n            if (removed.length) {\n                val._ = keys.length - OBJLENGTH + ' more keys: ' + (0, _stringify2.default)(removed);\n            }\n            return val;\n    }\n    return val;\n};\n\nexports.default = {\n    css: css,\n    args: args,\n    caps: caps,\n    limit: limit\n};\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/helpers/safeExecute.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * executes methods in try/catch block\n */\nvar safeExecute = function safeExecute(f, param) {\n    return function exec() {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var result = void 0;\n        args = param || args;\n\n        if (typeof f !== 'function') {\n            return args[0];\n        }\n\n        /**\n         * we need to catch errors here as we would stop the\n         * execution and the promise (and the test) will never\n         * finish\n         */\n        try {\n            result = f.apply(this, args);\n        } catch (e) {\n            var error = e;\n\n            if (e instanceof Error === false) {\n                error = new Error(e);\n            }\n\n            return error;\n        }\n\n        return result;\n    };\n};\n\nexports.default = safeExecute;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/helpers/mobileDetector.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * check if current platform is mobile device\n *\n * @param  {Object}  caps  capabilities\n * @return {Boolean}       true if platform is mobile device\n */\nvar mobileDetector = function mobileDetector(caps) {\n    var isMobile = !!(typeof caps['appium-version'] !== 'undefined' || typeof caps['device-type'] !== 'undefined' || typeof caps['deviceType'] !== 'undefined' || typeof caps['device-orientation'] !== 'undefined' || typeof caps['deviceOrientation'] !== 'undefined' || typeof caps.deviceName !== 'undefined' ||\n    // Check browserName for specific values\n    caps.browserName === '' || caps.browserName !== undefined && (caps.browserName.toLowerCase() === 'ipad' || caps.browserName.toLowerCase() === 'iphone' || caps.browserName.toLowerCase() === 'android'));\n\n    var isIOS = !!(caps.platformName && caps.platformName.match(/iOS/i) || caps.deviceName && caps.deviceName.match(/(iPad|iPhone)/i));\n\n    var isAndroid = !!(caps.platformName && caps.platformName.match(/Android/i) || caps.browserName && caps.browserName.match(/Android/i));\n\n    return { isMobile: isMobile, isIOS: isIOS, isAndroid: isAndroid };\n};\n\nexports.default = mobileDetector;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/helpers/detectSeleniumBackend.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * helper to detect the Selenium backend according to given capabilities\n */\nvar detectSeleniumBackend = function detectSeleniumBackend(capabilities) {\n    /**\n     * local Selenium server\n     */\n    if (!capabilities.user || !capabilities.key) {\n        return {\n            host: '127.0.0.1',\n            port: 4444\n        };\n    }\n\n    /**\n     * browserstack\n     * e.g. zHcv9sZ39ip8ZPsxBVJ2\n     */\n    if (capabilities.key.length === 20) {\n        return {\n            host: 'hub.browserstack.com',\n            port: 80\n        };\n    }\n\n    /**\n     * testingbot\n     * e.g. ec337d7b677720a4dde7bd72be0bfc67\n     */\n    if (capabilities.key.length === 32) {\n        return {\n            host: 'hub.testingbot.com',\n            port: 80\n        };\n    }\n\n    /**\n     * Sauce Labs\n     * e.g. 50aa152c-1932-B2f0-9707-18z46q2n1mb0\n     */\n    return {\n        protocol: 'https',\n        host: 'ondemand.saucelabs.com',\n        port: 443\n    };\n};\n\nexports.default = detectSeleniumBackend;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/helpers/errorHandler.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _q = require('q');\n\nvar _q2 = _interopRequireDefault(_q);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = [\n/**\n * stale reference error handler\n */\nfunction (e) {\n    if (!e.seleniumStack || e.seleniumStack.type !== 'StaleElementReference') {\n        return;\n    }\n\n    /**\n     * get through command list and find most recent command where an element(s)\n     * command contained the failing json web element\n     */\n    var failingCommand = this.commandList.slice(-1)[0];\n\n    var commandToRepeat = void 0;\n    for (var i = this.commandList.length - 1; i >= 0; --i) {\n        var command = this.commandList[i];\n\n        if (!command.result || !command.result.value) {\n            continue;\n        }\n\n        if (command.name !== 'element' && command.name !== 'elements') {\n            continue;\n        }\n\n        if (command.name === 'element' && command.result.value.ELEMENT !== failingCommand.args[0]) {\n            continue;\n        }\n\n        // Ensure an array when evaluating the result, so the logic is the same for 'element' and 'elements' commands\n        var results = Array.isArray(command.result.value) ? command.result.value : command.result.value !== null ? [command.result.value] : [];\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(results), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var result = _step.value;\n\n                if (result.ELEMENT === failingCommand.args[0]) {\n                    commandToRepeat = this.commandList[i - 1];\n\n                    /**\n                     * when using elements as first citizen , e.g. div.getTagName() and rerun\n                     * the command due to StaleElementReference exception we store the unshifted\n                     * `null` as selector. In order to have a valid selector when rerunning it we\n                     * have to put in the actual selector\n                     */\n                    var preSelector = this.commandList[i].result.selector;\n                    if (commandToRepeat.args[0] === null && typeof preSelector === 'string') {\n                        commandToRepeat.args[0] = preSelector;\n\n                        /**\n                         * clear lastResult as we inject the actual selector to parameter list\n                         */\n                        if (this.lastResult) {\n                            delete this.lastResult.value;\n                        }\n                    }\n\n                    break;\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        if (commandToRepeat) {\n            break;\n        }\n    }\n\n    if (!commandToRepeat) {\n        return;\n    }\n\n    /**\n     * reset lastPromise so we can resolve it after rerun\n     */\n    this.lastPromise = (0, _q2.default)();\n\n    return this[commandToRepeat.name].apply(this, commandToRepeat.args);\n}];\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/helpers/hasElementResultHelper.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * check if selenium response contains an element result\n * @param  {object}  result response object from the driver\n * @return {Boolean}        returns\n *         \t\t\t\t\t\t0 if response was not an element result\n *         \t\t\t\t\t\t1 if response was a element result\n *         \t\t\t\t\t\t2 if response was an elements result\n */\nfunction hasElementResult(result) {\n  /**\n   * check for element call\n   */\n  if (result && (result.value && result.value.ELEMENT || typeof result.selector === 'string' && result.value === null)) {\n    return 1;\n  }\n  /**\n   * check for elements call\n   */\n  if (result && Array.isArray(result.value) && result.value.filter(function (r) {\n    return !r.ELEMENT;\n  }).length === 0) {\n    return 2;\n  }\n\n  return 0;\n}\n\nexports.default = hasElementResult;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/multibrowser.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _q = require('q');\n\nvar _q2 = _interopRequireDefault(_q);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Multibrowser\n */\nvar Multibrowser = function () {\n    function Multibrowser() {\n        (0, _classCallCheck3.default)(this, Multibrowser);\n\n        this.instances = {};\n        this.promiseBucket = [];\n\n        var defer = _q2.default.defer();\n        this.qResolve = defer.resolve.toString();\n    }\n\n    /**\n     * add instance to multibrowser instance\n     */\n\n\n    (0, _createClass3.default)(Multibrowser, [{\n        key: 'addInstance',\n        value: function addInstance(browserName, client) {\n            if (this.instances[browserName]) {\n                throw new Error('webdriver instance \"' + browserName + '\" is already defined');\n            }\n            this.instances[browserName] = client;\n        }\n\n        /**\n         * modifier for multibrowser instance\n         */\n\n    }, {\n        key: 'getModifier',\n        value: function getModifier() {\n            return multiremoteModifier.bind(this);\n        }\n\n        /**\n         * flush bucket and return current pending promises\n         */\n\n    }, {\n        key: 'flushPromiseBucket',\n        value: function flushPromiseBucket() {\n            var bucket = this.promiseBucket.filter(function (promise) {\n                return promise.inspect().state === 'pending';\n            });\n            this.promiseBucket = [];\n            return bucket;\n        }\n\n        /**\n         * modifier for single webdriverio instances\n         */\n\n    }, {\n        key: 'getInstanceModifier',\n        value: function getInstanceModifier() {\n            return instanceModifier.bind(this);\n        }\n    }]);\n    return Multibrowser;\n}();\n\nfunction instanceModifier(client) {\n    var _next = client.next;\n    var multibrowser = this;\n\n    /**\n     * Overwrite next (bind) method to put each command into a bucket.\n     * This provides us useful information about all current running\n     * commands.\n     */\n    client.next = function () {\n        multibrowser.promiseBucket.push(this.promise);\n        return _next.apply(this, arguments);\n    };\n\n    return client;\n}\n\nfunction multiremoteModifier(client) {\n    var multibrowser = this;\n    var browserNames = (0, _keys2.default)(multibrowser.instances);\n\n    client.getInstances = function () {\n        return browserNames;\n    };\n\n    client.next = function () {\n        var _this = this;\n\n        var promises = [];\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var fnName = args.pop();\n\n        /**\n         * no need for actual function here\n         */\n        args.shift();\n\n        /**\n         * flush promise bucket\n         */\n        multibrowser.promiseBucket = [];\n        var commandArgs = args.pop();\n        return this.lastPromise.done(function () {\n            browserNames.forEach(function (browserName) {\n                var instance = multibrowser.instances[browserName];\n                promises.push(instance[fnName].apply(instance, commandArgs).promise);\n            });\n\n            return _promise2.default.all(promises).then(function (result) {\n                /**\n                 * custom event handling since multibrowser instance\n                 * actually never executes any command\n                 */\n                var payload = {\n                    fnName: fnName\n                };\n\n                for (var i = 0; i < browserNames.length; ++i) {\n                    payload[browserNames[i]] = result[i];\n                }\n\n                if (fnName.match(/(init|end)/)) {\n                    _this.emit(fnName, payload);\n                }\n\n                _this.emit('result', payload);\n                _this.defer.resolve(result);\n            }, function (err) {\n                _this.emit('error', err);\n                _this.defer.reject(err);\n            });\n        });\n    };\n\n    var _then = client.then;\n    client.then = function (onFulfilled, onRejected) {\n        /**\n         * curry arguments\n         * as multibrowser commands return with an array of results for each instance\n         * respectively (see q.all) we need to curry them (expand arguments) to help\n         * users to better work with the results\n         *\n         * uncurried original version:\n         * ```js\n         * matrix.getTitle().then(function (result) {\n         *     expect(result[0]).to.be.equal('title of browser A')\n         *     expect(result[1]).to.be.equal('title of browser B')\n         * })\n         * ```\n         *\n         * curried version:\n         * ```js\n         * matrix.getTitle().then(function (result) {\n         *     expect(result.browserA).to.be.equal('title of browser A')\n         *     expect(result.browserB).to.be.equal('title of browser B')\n         * })\n         * ```\n         */\n        var curryArguments = function curryArguments(args) {\n            /**\n             * when returning with a promise within a multibrowser promise like\n             *\n             * ```js\n             * matrix.url(...).getTitle().then(function () {\n             *     return matrix.getSource()\n             * })\n             * ```\n             *\n             * we will have problems as we are running through curryArguments twice.\n             * Therefor check if the onFulFilled handler is from the Q library and\n             * handle that promise as usual here.\n             * It's an ugly hack but the only way to get around with this and having\n             * nice curried arguments.\n             *\n             */\n            if (onFulfilled.toString() === multibrowser.qResolve) {\n                return onFulfilled.apply(this, arguments);\n            }\n            if (arguments.length === 1 && !Array.isArray(args)) {\n                return onFulfilled.call(this, args);\n            }\n\n            if (arguments.length > 1) {\n                args = Array.prototype.slice.call(arguments);\n            }\n\n            var result = {};\n            for (var i = 0; i < browserNames.length; ++i) {\n                result[browserNames[i]] = args[i];\n            }\n            return onFulfilled.call(this, result);\n        };\n\n        if (!onFulfilled && !onRejected) {\n            return this;\n        }\n\n        if (onFulfilled && !onRejected) {\n            return _then.call(this, curryArguments);\n        }\n\n        if (onFulfilled && onRejected) {\n            return _then.call(this, curryArguments, onRejected);\n        }\n\n        return _then.call(this, undefined, onRejected);\n    };\n\n    client.select = function (browserName) {\n        var instance = multibrowser.instances[browserName];\n\n        if (!instance) {\n            throw new Error('browser name \"' + browserName + '\" was not defined');\n        }\n\n        instance.isMultibrowser = false;\n        return instance;\n    };\n\n    client.sync = function () {\n        var bucket = multibrowser.flushPromiseBucket();\n        return this.call(function () {\n            return _promise2.default.all(bucket);\n        });\n    };\n\n    var _addCommand = client.addCommand;\n    client.addCommand = function (fnName, fn, forceOverwrite) {\n        var _this2 = this;\n\n        var args = arguments;\n        _addCommand.apply(this, args);\n        (0, _keys2.default)(multibrowser.instances).forEach(function (browserName) {\n            var instance = multibrowser.instances[browserName];\n            instance.addCommand.apply(_this2, args);\n        });\n        return this;\n    };\n\n    return client;\n}\n\nexports.default = Multibrowser;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/helpers/getImplementedCommands.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar COMMAND_TYPES = ['protocol', 'commands'];\n\n/**\n * helper to find all implemented commands\n *\n * @returns {String[]} list of implemented command names\n */\nvar getImplementedCommands = function getImplementedCommands() {\n    var commands = {};\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = (0, _getIterator3.default)(COMMAND_TYPES), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var commandType = _step.value;\n\n            var dir = _path2.default.join(__dirname, '..', commandType);\n            var files = _fs2.default.readdirSync(dir);\n\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = (0, _getIterator3.default)(files), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var filename = _step2.value;\n\n                    var commandName = filename.slice(0, -3);\n\n                    /**\n                     * addCommand only there for documentation purposes\n                     */\n                    if (commandName === 'addCommand') {\n                        continue;\n                    }\n\n                    commands[commandName] = require(_path2.default.join(dir, commandName));\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    return commands;\n};\n\nexports.default = getImplementedCommands;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/launcher.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _child_process = require('child_process');\n\nvar _child_process2 = _interopRequireDefault(_child_process);\n\nvar _ConfigParser = require('./utils/ConfigParser');\n\nvar _ConfigParser2 = _interopRequireDefault(_ConfigParser);\n\nvar _BaseReporter = require('./utils/BaseReporter');\n\nvar _BaseReporter2 = _interopRequireDefault(_BaseReporter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Launcher = function () {\n    function Launcher(configFile, argv) {\n        (0, _classCallCheck3.default)(this, Launcher);\n\n        this.configParser = new _ConfigParser2.default();\n        this.configParser.addConfigFile(configFile);\n        this.configParser.merge(argv);\n\n        this.reporters = this.initReporters();\n\n        this.argv = argv;\n        this.configFile = configFile;\n\n        this.exitCode = 0;\n        this.hasTriggeredExitRoutine = false;\n        this.hasStartedAnyProcess = false;\n        this.processes = [];\n        this.schedule = [];\n        this.rid = [];\n        this.processesStarted = 0;\n        this.runnerFailed = 0;\n    }\n\n    /**\n     * check if multiremote or wdio test\n     */\n\n\n    (0, _createClass3.default)(Launcher, [{\n        key: 'isMultiremote',\n        value: function isMultiremote() {\n            var caps = this.configParser.getCapabilities();\n            return !Array.isArray(caps);\n        }\n\n        /**\n         * initialise reporters\n         */\n\n    }, {\n        key: 'initReporters',\n        value: function initReporters() {\n            var reporter = new _BaseReporter2.default();\n            var config = this.configParser.getConfig();\n\n            /**\n             * if no reporter is set or config property is in a wrong format\n             * just use the dot reporter\n             */\n            if (!config.reporters || !Array.isArray(config.reporters) || !config.reporters.length) {\n                config.reporters = ['dot'];\n            }\n\n            var reporters = {};\n\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(config.reporters), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var _reporterName = _step.value;\n\n                    var _Reporter = void 0;\n                    if (typeof _reporterName === 'function') {\n                        _Reporter = _reporterName;\n                        if (!_Reporter.reporterName) {\n                            throw new Error('Custom reporters must export a unique \\'reporterName\\' property');\n                        }\n                        reporters[_Reporter.reporterName] = _Reporter;\n                    } else if (typeof _reporterName === 'string') {\n                        try {\n                            _Reporter = require('wdio-' + _reporterName + '-reporter');\n                        } catch (e) {\n                            throw new Error('reporter \"wdio-' + _reporterName + '-reporter\" is not installed. Error: ' + e.stack);\n                        }\n                        reporters[_reporterName] = _Reporter;\n                    }\n                    if (!_Reporter) {\n                        throw new Error('config.reporters must be an array of strings or functions, but got \\'' + (typeof _reporterName === 'undefined' ? 'undefined' : (0, _typeof3.default)(_reporterName)) + '\\': ' + _reporterName);\n                    }\n                }\n\n                /**\n                 * if no reporter options are set or property is in a wrong format default to\n                 * empty object\n                 */\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            if (!config.reporterOptions || (0, _typeof3.default)(config.reporterOptions) !== 'object') {\n                config.reporterOptions = {};\n            }\n\n            for (var reporterName in reporters) {\n                var Reporter = reporters[reporterName];\n                var reporterOptions = {};\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = (0, _getIterator3.default)((0, _keys2.default)(config.reporterOptions)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var option = _step2.value;\n\n                        if (option === reporterName && (0, _typeof3.default)(config.reporterOptions[reporterName]) === 'object') {\n                            // Copy over options specifically for this reporter type\n                            reporterOptions = (0, _assign2.default)(reporterOptions, config.reporterOptions[reporterName]);\n                        } else if (reporters[option]) {\n                            // Don't copy options for other reporters\n                            continue;\n                        } else {\n                            // Copy over generic options\n                            reporterOptions[option] = config.reporterOptions[option];\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n\n                reporter.add(new Reporter(reporter, config, reporterOptions));\n            }\n\n            return reporter;\n        }\n\n        /**\n         * run sequence\n         * @return  {Promise} that only gets resolves with either an exitCode or an error\n         */\n\n    }, {\n        key: 'run',\n        value: function () {\n            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n                var _this = this;\n\n                var config, caps, launcher, _exitCode, cid, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, capabilities, exitCode;\n\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                config = this.configParser.getConfig();\n                                caps = this.configParser.getCapabilities();\n                                launcher = this.getLauncher(config);\n\n\n                                this.reporters.handleEvent('start', {\n                                    isMultiremote: this.isMultiremote(),\n                                    capabilities: caps,\n                                    config: config\n                                });\n\n                                /**\n                                 * run onPrepare hook\n                                 */\n                                _context.next = 6;\n                                return config.onPrepare(config, caps);\n\n                            case 6:\n                                _context.next = 8;\n                                return this.runServiceHook(launcher, 'onPrepare', config, caps);\n\n                            case 8:\n                                if (!this.isMultiremote()) {\n                                    _context.next = 17;\n                                    break;\n                                }\n\n                                _context.next = 11;\n                                return new _promise2.default(function (resolve) {\n                                    _this.resolve = resolve;\n                                    _this.startInstance(_this.configParser.getSpecs(), caps, 0);\n                                });\n\n                            case 11:\n                                _exitCode = _context.sent;\n                                _context.next = 14;\n                                return this.runServiceHook(launcher, 'onComplete', _exitCode);\n\n                            case 14:\n                                _context.next = 16;\n                                return config.onComplete(_exitCode);\n\n                            case 16:\n                                return _context.abrupt('return', _exitCode);\n\n                            case 17:\n\n                                /**\n                                 * schedule test runs\n                                 */\n                                cid = 0;\n                                _iteratorNormalCompletion3 = true;\n                                _didIteratorError3 = false;\n                                _iteratorError3 = undefined;\n                                _context.prev = 21;\n\n                                for (_iterator3 = (0, _getIterator3.default)(caps); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                                    capabilities = _step3.value;\n\n                                    this.schedule.push({\n                                        cid: cid++,\n                                        caps: capabilities,\n                                        specs: this.configParser.getSpecs(capabilities.specs, capabilities.exclude),\n                                        availableInstances: capabilities.maxInstances || config.maxInstancesPerCapability,\n                                        runningInstances: 0,\n                                        seleniumServer: { host: config.host, port: config.port, protocol: config.protocol }\n                                    });\n                                }\n\n                                /**\n                                 * catches ctrl+c event\n                                 */\n                                _context.next = 29;\n                                break;\n\n                            case 25:\n                                _context.prev = 25;\n                                _context.t0 = _context['catch'](21);\n                                _didIteratorError3 = true;\n                                _iteratorError3 = _context.t0;\n\n                            case 29:\n                                _context.prev = 29;\n                                _context.prev = 30;\n\n                                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                                    _iterator3.return();\n                                }\n\n                            case 32:\n                                _context.prev = 32;\n\n                                if (!_didIteratorError3) {\n                                    _context.next = 35;\n                                    break;\n                                }\n\n                                throw _iteratorError3;\n\n                            case 35:\n                                return _context.finish(32);\n\n                            case 36:\n                                return _context.finish(29);\n\n                            case 37:\n                                process.on('SIGINT', this.exitHandler.bind(this));\n\n                                /**\n                                 * make sure the program will not close instantly\n                                 */\n                                if (process.stdin.isPaused()) {\n                                    process.stdin.resume();\n                                }\n\n                                _context.next = 41;\n                                return new _promise2.default(function (resolve) {\n                                    _this.resolve = resolve;\n                                    _this.runSpecs();\n                                });\n\n                            case 41:\n                                exitCode = _context.sent;\n                                _context.next = 44;\n                                return this.runServiceHook(launcher, 'onComplete', exitCode);\n\n                            case 44:\n                                _context.next = 46;\n                                return config.onComplete(exitCode);\n\n                            case 46:\n                                return _context.abrupt('return', exitCode);\n\n                            case 47:\n                            case 'end':\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this, [[21, 25, 29, 37], [30,, 32, 36]]);\n            }));\n\n            function run() {\n                return _ref.apply(this, arguments);\n            }\n\n            return run;\n        }()\n\n        /**\n         * run service launch sequences\n         */\n\n    }, {\n        key: 'runServiceHook',\n        value: function () {\n            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(launcher, hookName) {\n                for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                    args[_key - 2] = arguments[_key];\n                }\n\n                return _regenerator2.default.wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                _context2.prev = 0;\n                                _context2.next = 3;\n                                return _promise2.default.all(launcher.map(function (service) {\n                                    if (typeof service[hookName] === 'function') {\n                                        return service[hookName].apply(service, args);\n                                    }\n                                }));\n\n                            case 3:\n                                return _context2.abrupt('return', _context2.sent);\n\n                            case 6:\n                                _context2.prev = 6;\n                                _context2.t0 = _context2['catch'](0);\n\n                                console.error('A service failed in the \\'' + hookName + '\\' hook\\n' + _context2.t0.stack + '\\n\\nContinue...');\n\n                            case 9:\n                            case 'end':\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, this, [[0, 6]]);\n            }));\n\n            function runServiceHook(_x, _x2, _x3) {\n                return _ref2.apply(this, arguments);\n            }\n\n            return runServiceHook;\n        }()\n\n        /**\n         * run multiple single remote tests\n         * @return {Boolean} true if all specs have been run and all instances have finished\n         */\n\n    }, {\n        key: 'runSpecs',\n        value: function runSpecs() {\n            var _this2 = this;\n\n            var config = this.configParser.getConfig();\n\n            while (this.getNumberOfRunningInstances() < config.maxInstances) {\n                var schedulableCaps = this.schedule\n                /**\n                 * bail if number of errors exceeds allowed\n                 */\n                .filter(function () {\n                    var filter = typeof config.bail !== 'number' || config.bail < 1 || config.bail > _this2.runnerFailed;\n\n                    /**\n                     * clear number of specs when filter is false\n                     */\n                    if (!filter) {\n                        _this2.schedule.forEach(function (t) {\n                            t.specs = [];\n                        });\n                    }\n\n                    return filter;\n                })\n                /**\n                 * make sure complete number of running instances is not higher than general maxInstances number\n                 */\n                .filter(function (a) {\n                    return _this2.getNumberOfRunningInstances() < config.maxInstances;\n                })\n                /**\n                 * make sure the capabiltiy has available capacities\n                 */\n                .filter(function (a) {\n                    return a.availableInstances > 0;\n                })\n                /**\n                 * make sure capabiltiy has still caps to run\n                 */\n                .filter(function (a) {\n                    return a.specs.length > 0;\n                })\n                /**\n                 * make sure we are running caps with less running instances first\n                 */\n                .sort(function (a, b) {\n                    return a.runningInstances > b.runningInstances;\n                });\n\n                /**\n                 * continue if no capabiltiy were schedulable\n                 */\n                if (schedulableCaps.length === 0) {\n                    break;\n                }\n\n                this.startInstance([schedulableCaps[0].specs.pop()], schedulableCaps[0].caps, schedulableCaps[0].cid, schedulableCaps[0].seleniumServer);\n                schedulableCaps[0].availableInstances--;\n                schedulableCaps[0].runningInstances++;\n            }\n\n            return this.getNumberOfRunningInstances() === 0 && this.getNumberOfSpecsLeft() === 0;\n        }\n\n        /**\n         * gets number of all running instances\n         * @return {number} number of running instances\n         */\n\n    }, {\n        key: 'getNumberOfRunningInstances',\n        value: function getNumberOfRunningInstances() {\n            return this.schedule.map(function (a) {\n                return a.runningInstances;\n            }).reduce(function (a, b) {\n                return a + b;\n            });\n        }\n\n        /**\n         * get number of total specs left to complete whole suites\n         * @return {number} specs left to complete suite\n         */\n\n    }, {\n        key: 'getNumberOfSpecsLeft',\n        value: function getNumberOfSpecsLeft() {\n            return this.schedule.map(function (a) {\n                return a.specs.length;\n            }).reduce(function (a, b) {\n                return a + b;\n            });\n        }\n\n        /**\n         * Start instance in a child process.\n         * @param  {Array} specs  Specs to run\n         * @param  {Number} cid  Capabilities ID\n         */\n\n    }, {\n        key: 'startInstance',\n        value: function startInstance(specs, caps, cid, server) {\n            var config = this.configParser.getConfig();\n            var debug = caps.debug || config.debug;\n            var rid = this.getRunnerId(cid);\n            var processNumber = this.processesStarted + 1;\n\n            // process.debugPort defaults to 5858 and is set even when process\n            // is not being debugged.\n            var debugArgs = debug ? ['--debug=' + (process.debugPort + processNumber)] : [];\n\n            // if you would like to add --debug-brk, use a different port, etc...\n            var capExecArgs = [].concat((0, _toConsumableArray3.default)(config.execArgv || []), (0, _toConsumableArray3.default)(caps.execArgv || []));\n\n            // The default value for child.fork execArgs is process.execArgs,\n            // so continue to use this unless another value is specified in config.\n            var defaultArgs = capExecArgs.length ? process.execArgv : [];\n\n            // If an arg appears multiple times the last occurence is used\n            var execArgv = [].concat((0, _toConsumableArray3.default)(defaultArgs), debugArgs, (0, _toConsumableArray3.default)(capExecArgs));\n\n            var childProcess = _child_process2.default.fork(_path2.default.join(__dirname, '/runner.js'), process.argv.slice(2), {\n                cwd: process.cwd(),\n                execArgv: execArgv\n            });\n\n            this.processes.push(childProcess);\n\n            childProcess.on('message', this.messageHandler.bind(this)).on('exit', this.endHandler.bind(this, rid));\n\n            childProcess.send({\n                cid: rid,\n                command: 'run',\n                configFile: this.configFile,\n                argv: this.argv,\n                caps: caps,\n                processNumber: processNumber,\n                specs: specs,\n                server: server,\n                isMultiremote: this.isMultiremote()\n            });\n\n            this.processesStarted++;\n        }\n\n        /**\n         * generates a runner id\n         * @param  {Number} cid capability id (unique identifier for a capability)\n         * @return {String}     runner id (combination of cid and test id e.g. 0a, 0b, 1a, 1b ...)\n         */\n\n    }, {\n        key: 'getRunnerId',\n        value: function getRunnerId(cid) {\n            if (!this.rid[cid]) {\n                this.rid[cid] = 0;\n            }\n            return cid + '-' + this.rid[cid]++;\n        }\n\n        /**\n         * emit event from child process to reporter\n         * @param  {Object} m  event object\n         */\n\n    }, {\n        key: 'messageHandler',\n        value: function messageHandler(m) {\n            this.hasStartedAnyProcess = true;\n\n            if (m.event === 'runner:error') {\n                this.reporters.handleEvent('error', m);\n            }\n\n            this.reporters.handleEvent(m.event, m);\n        }\n\n        /**\n         * Close test runner process once all child processes have exited\n         * @param  {Number} cid  Capabilities ID\n         * @param  {Number} childProcessExitCode  exit code of child process\n         */\n\n    }, {\n        key: 'endHandler',\n        value: function endHandler(rid, childProcessExitCode) {\n            this.exitCode = this.exitCode || childProcessExitCode;\n            this.runnerFailed += this.exitCode !== 0 ? 1 : 0;\n\n            // Update schedule now this process has ended\n            if (!this.isMultiremote()) {\n                // get cid (capability id) from rid (runner id)\n                var cid = parseInt(rid, 10);\n\n                this.schedule[cid].availableInstances++;\n                this.schedule[cid].runningInstances--;\n            }\n\n            if (!this.isMultiremote() && !this.runSpecs()) {\n                return;\n            }\n\n            this.reporters.handleEvent('end', {\n                sigint: this.hasTriggeredExitRoutine,\n                exitCode: this.exitCode,\n                isMultiremote: this.isMultiremote(),\n                capabilities: this.configParser.getCapabilities(),\n                config: this.configParser.getConfig()\n            });\n\n            if (this.exitCode === 0) {\n                return this.resolve(this.exitCode);\n            }\n\n            /**\n             * finish with exit code 1\n             */\n            return this.resolve(1);\n        }\n\n        /**\n         * Make sure all started selenium sessions get closed properly and prevent\n         * having dead driver processes. To do so let the runner end its Selenium\n         * session first before killing\n         */\n\n    }, {\n        key: 'exitHandler',\n        value: function exitHandler() {\n            if (this.hasTriggeredExitRoutine || !this.hasStartedAnyProcess) {\n                console.log('\\nKilling process, bye!');\n\n                // When spawned as a subprocess,\n                // SIGINT will not be forwarded to childs.\n                // Thus for the child to exit cleanly, we must force send SIGINT\n                if (!process.stdin.isTTY) {\n                    this.processes.forEach(function (p) {\n                        return p.kill('SIGINT');\n                    });\n                }\n\n                /**\n                 * finish with exit code 1\n                 */\n                return this.resolve(1);\n            }\n\n            // When spawned as a subprocess,\n            // SIGINT will not be forwarded to childs.\n            // Thus for the child to exit cleanly, we must force send SIGINT\n            if (!process.stdin.isTTY) {\n                this.processes.forEach(function (p) {\n                    return p.kill('SIGINT');\n                });\n            }\n\n            console.log('\\n\\nEnd selenium sessions properly ...\\n(press crtl+c again to hard kill the runner)\\n');\n\n            this.hasTriggeredExitRoutine = true;\n        }\n\n        /**\n         * loads launch services\n         */\n\n    }, {\n        key: 'getLauncher',\n        value: function getLauncher(config) {\n            var launchServices = [];\n\n            if (!Array.isArray(config.services)) {\n                return launchServices;\n            }\n\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = (0, _getIterator3.default)(config.services), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var serviceName = _step4.value;\n\n                    var service = void 0;\n\n                    /**\n                     * allow custom services\n                     */\n                    if ((typeof serviceName === 'undefined' ? 'undefined' : (0, _typeof3.default)(serviceName)) === 'object') {\n                        launchServices.push(serviceName);\n                        continue;\n                    }\n\n                    try {\n                        service = require('wdio-' + serviceName + '-service/launcher');\n                    } catch (e) {\n                        if (!e.message.match('Cannot find module \\'wdio-' + serviceName + '-service/launcher\\'')) {\n                            throw new Error('Couldn\\'t initialise launcher from service \"' + serviceName + '\".\\n' + e.stack);\n                        }\n                    }\n\n                    if (service && typeof service.onPrepare === 'function') {\n                        launchServices.push(service);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                        _iterator4.return();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n\n            return launchServices;\n        }\n    }]);\n    return Launcher;\n}();\n\nexports.default = Launcher;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/utils/ConfigParser.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _deepmerge = require('deepmerge');\n\nvar _deepmerge2 = _interopRequireDefault(_deepmerge);\n\nvar _detectSeleniumBackend = require('../helpers/detectSeleniumBackend');\n\nvar _detectSeleniumBackend2 = _interopRequireDefault(_detectSeleniumBackend);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar HOOKS = ['before', 'beforeSession', 'beforeSuite', 'beforeHook', 'beforeTest', 'beforeCommand', 'afterCommand', 'afterTest', 'afterHook', 'afterSuite', 'afterSession', 'after', 'beforeFeature', 'beforeScenario', 'beforeStep', 'afterFeature', 'afterScenario', 'afterStep', 'onError', 'onReload'];\n\nvar DEFAULT_TIMEOUT = 10000;\nvar NOOP = function NOOP() {};\nvar DEFAULT_CONFIGS = {\n    sync: true,\n    specs: [],\n    suites: {},\n    exclude: [],\n    logLevel: 'silent',\n    coloredLogs: true,\n    baseUrl: null,\n    bail: 0,\n    waitforInterval: 500,\n    waitforTimeout: 1000,\n    framework: 'mocha',\n    reporters: [],\n    reporterOptions: {},\n    maxInstances: 100,\n    maxInstancesPerCapability: 100,\n    connectionRetryTimeout: 90000,\n    connectionRetryCount: 3,\n    debug: false,\n    execArgv: null,\n\n    /**\n     * framework defaults\n     */\n    mochaOpts: {\n        timeout: DEFAULT_TIMEOUT\n    },\n    jasmineNodeOpts: {\n        defaultTimeoutInterval: DEFAULT_TIMEOUT\n    },\n\n    /**\n     * hooks\n     */\n    onPrepare: NOOP,\n    before: [],\n    beforeSession: [],\n    beforeSuite: [],\n    beforeHook: [],\n    beforeTest: [],\n    beforeCommand: [],\n    afterCommand: [],\n    afterTest: [],\n    afterHook: [],\n    afterSuite: [],\n    afterSession: [],\n    after: [],\n    onComplete: NOOP,\n    onError: [],\n    onReload: [],\n\n    /**\n     * cucumber specific hooks\n     */\n    beforeFeature: [],\n    beforeScenario: [],\n    beforeStep: [],\n    afterFeature: [],\n    afterScenario: [],\n    afterStep: []\n};\n\nvar ConfigParser = function () {\n    function ConfigParser() {\n        (0, _classCallCheck3.default)(this, ConfigParser);\n\n        this._config = DEFAULT_CONFIGS;\n        this._capabilities = [];\n    }\n\n    /**\n     * merges config file with default values\n     * @param {String} filename path of file relative to current directory\n     */\n\n\n    (0, _createClass3.default)(ConfigParser, [{\n        key: 'addConfigFile',\n        value: function addConfigFile(filename) {\n            if (typeof filename !== 'string') {\n                throw new Error('addConfigFile requires filepath');\n            }\n\n            var filePath = _path2.default.resolve(process.cwd(), filename);\n\n            try {\n                /**\n                 * clone the orginal config\n                 */\n                var fileConfig = (0, _deepmerge2.default)(require(filePath).config, {});\n\n                if ((typeof fileConfig === 'undefined' ? 'undefined' : (0, _typeof3.default)(fileConfig)) !== 'object') {\n                    throw new Error('configuration file exports no config object');\n                }\n\n                /**\n                 * merge capabilities\n                 */\n                this._capabilities = (0, _deepmerge2.default)(this._capabilities, fileConfig.capabilities || {});\n                delete fileConfig.capabilities;\n\n                /**\n                 * add service hooks and remove them from config\n                 */\n                this.addService(fileConfig);\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = (0, _getIterator3.default)(HOOKS), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var hookName = _step.value;\n\n                        delete fileConfig[hookName];\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                this._config = (0, _deepmerge2.default)(this._config, fileConfig);\n\n                /**\n                 * detect Selenium backend\n                 */\n                this._config = (0, _deepmerge2.default)((0, _detectSeleniumBackend2.default)(this._config), this._config);\n            } catch (e) {\n                console.error('Failed loading configuration file: ' + filePath);\n                throw e;\n            }\n        }\n\n        /**\n         * merge external object with config object\n         * @param  {Object} object  desired object to merge into the config object\n         */\n\n    }, {\n        key: 'merge',\n        value: function merge() {\n            var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            this._config = (0, _deepmerge2.default)(this._config, object);\n\n            /**\n             * run single spec file only\n             */\n            if (typeof object.spec === 'string') {\n                var specs = [];\n                var specList = object.spec.split(/,/g);\n\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = (0, _getIterator3.default)(specList), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var spec = _step2.value;\n\n                        if (_fs2.default.existsSync(spec)) {\n                            specs.push(_path2.default.resolve(process.cwd(), spec));\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n\n                if (specs.length === 0) {\n                    throw new Error('spec file ' + object.spec + ' not found');\n                }\n\n                this._config.specs = specs;\n            }\n\n            /**\n             * user and key could get added via cli arguments so we need to detect again\n             * Note: cli arguments are on the right and overwrite config\n             * if host and port are default, remove them to get new values\n             */\n            var defaultBackend = (0, _detectSeleniumBackend2.default)({});\n            if (this._config.host === defaultBackend.host && this._config.port === defaultBackend.port) {\n                delete this._config.host;\n                delete this._config.port;\n            }\n\n            this._config = (0, _deepmerge2.default)((0, _detectSeleniumBackend2.default)(this._config), this._config);\n        }\n\n        /**\n         * add hooks from services to runner config\n         * @param {Object} service  a service is basically an object that contains hook methods\n         */\n\n    }, {\n        key: 'addService',\n        value: function addService(service) {\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = (0, _getIterator3.default)(HOOKS), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var hookName = _step3.value;\n\n                    if (!service[hookName]) {\n                        continue;\n                    } else if (typeof service[hookName] === 'function') {\n                        this._config[hookName].push(service[hookName].bind(service));\n                    } else if (Array.isArray(service[hookName])) {\n                        var _iteratorNormalCompletion4 = true;\n                        var _didIteratorError4 = false;\n                        var _iteratorError4 = undefined;\n\n                        try {\n                            for (var _iterator4 = (0, _getIterator3.default)(service[hookName]), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                                var hook = _step4.value;\n\n                                if (typeof hook === 'function') {\n                                    this._config[hookName].push(hook.bind(service));\n                                }\n                            }\n                        } catch (err) {\n                            _didIteratorError4 = true;\n                            _iteratorError4 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                                    _iterator4.return();\n                                }\n                            } finally {\n                                if (_didIteratorError4) {\n                                    throw _iteratorError4;\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n        }\n\n        /**\n         * get excluded files from config pattern\n         */\n\n    }, {\n        key: 'getSpecs',\n        value: function getSpecs(capSpecs, capExclude) {\n            var specs = ConfigParser.getFilePaths(this._config.specs);\n            var exclude = ConfigParser.getFilePaths(this._config.exclude);\n\n            /**\n             * check if user has specified a specific suites to run\n             */\n            var suites = typeof this._config.suite === 'string' ? this._config.suite.split(',') : [];\n            if (Array.isArray(suites) && suites.length > 0) {\n                var suiteSpecs = [];\n                var _iteratorNormalCompletion5 = true;\n                var _didIteratorError5 = false;\n                var _iteratorError5 = undefined;\n\n                try {\n                    for (var _iterator5 = (0, _getIterator3.default)(suites), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                        var suiteName = _step5.value;\n\n                        // ToDo: log warning if suite was not found\n                        var suite = this._config.suites[suiteName];\n                        if (suite && Array.isArray(suite)) {\n                            suiteSpecs = suiteSpecs.concat(ConfigParser.getFilePaths(suite));\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError5 = true;\n                    _iteratorError5 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                            _iterator5.return();\n                        }\n                    } finally {\n                        if (_didIteratorError5) {\n                            throw _iteratorError5;\n                        }\n                    }\n                }\n\n                if (suiteSpecs.length === 0) {\n                    throw new Error('The suite(s) \"' + suites.join('\", \"') + '\" you specified don\\'t exist ' + 'in your config file or doesn\\'t contain any files!');\n                }\n\n                specs = suiteSpecs;\n            }\n\n            if (Array.isArray(capSpecs)) {\n                specs = specs.concat(ConfigParser.getFilePaths(capSpecs));\n            }\n            if (Array.isArray(capExclude)) {\n                exclude = exclude.concat(ConfigParser.getFilePaths(capExclude));\n            }\n\n            return specs.filter(function (spec) {\n                return exclude.indexOf(spec) < 0;\n            });\n        }\n\n        /**\n         * return configs\n         */\n\n    }, {\n        key: 'getConfig',\n        value: function getConfig() {\n            return this._config;\n        }\n\n        /**\n         * return capabilities\n         */\n\n    }, {\n        key: 'getCapabilities',\n        value: function getCapabilities(i) {\n            if (typeof i === 'number' && this._capabilities[i]) {\n                return this._capabilities[i];\n            }\n\n            return this._capabilities;\n        }\n\n        /**\n         * returns a flatten list of globed files\n         *\n         * @param  {String[]} filenames  list of files to glob\n         * @return {String[]} list of files\n         */\n\n    }], [{\n        key: 'getFilePaths',\n        value: function getFilePaths(patterns, omitWarnings) {\n            var files = [];\n\n            if (typeof patterns === 'string') {\n                patterns = [patterns];\n            }\n\n            if (!Array.isArray(patterns)) {\n                throw new Error('specs or exclude property should be an array of strings');\n            }\n\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n                for (var _iterator6 = (0, _getIterator3.default)(patterns), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                    var pattern = _step6.value;\n\n                    var filenames = _glob2.default.sync(pattern);\n\n                    filenames = filenames.filter(function (filename) {\n                        return filename.slice(-3) === '.js' || filename.slice(-3) === '.ts' || filename.slice(-8) === '.feature' || filename.slice(-7) === '.coffee';\n                    });\n\n                    filenames = filenames.map(function (filename) {\n                        return _path2.default.isAbsolute(filename) ? _path2.default.normalize(filename) : _path2.default.resolve(process.cwd(), filename);\n                    });\n\n                    if (filenames.length === 0 && !omitWarnings) {\n                        console.warn('pattern', pattern, 'did not match any file');\n                    }\n\n                    files = (0, _deepmerge2.default)(files, filenames);\n                }\n            } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                        _iterator6.return();\n                    }\n                } finally {\n                    if (_didIteratorError6) {\n                        throw _iteratorError6;\n                    }\n                }\n            }\n\n            return files;\n        }\n    }]);\n    return ConfigParser;\n}();\n\nexports.default = ConfigParser;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/utils/BaseReporter.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Cursor = undefined;\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _tty = require('tty');\n\nvar _tty2 = _interopRequireDefault(_tty);\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _supportsColor = require('supports-color');\n\nvar _supportsColor2 = _interopRequireDefault(_supportsColor);\n\nvar _sanitize = require('../helpers/sanitize');\n\nvar _sanitize2 = _interopRequireDefault(_sanitize);\n\nvar _ReporterStats = require('./ReporterStats');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ISATTY = _tty2.default.isatty(1) && _tty2.default.isatty(2);\n\nvar COLORS = {\n    'pass': 90,\n    'fail': 31,\n    'bright pass': 92,\n    'bright fail': 91,\n    'bright yellow': 93,\n    'pending': 36,\n    'suite': 0,\n    'error title': 0,\n    'error message': 31,\n    'error stack': 90,\n    'checkmark': 32,\n    'fast': 90,\n    'medium': 33,\n    'slow': 31,\n    'green': 32,\n    'light': 90,\n    'diff gutter': 90,\n    'diff added': 32,\n    'diff removed': 31\n};\n\nvar SYMBOLS_WIN = {\n    ok: '\\u221A',\n    err: '\\xD7',\n    dot: '.',\n    error: 'F'\n};\n\nvar SYMBOLS = {\n    ok: '✓',\n    err: '✖',\n    dot: '․',\n    error: 'F'\n};\n\nvar BaseReporter = function (_events$EventEmitter) {\n    (0, _inherits3.default)(BaseReporter, _events$EventEmitter);\n\n    function BaseReporter() {\n        (0, _classCallCheck3.default)(this, BaseReporter);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (BaseReporter.__proto__ || (0, _getPrototypeOf2.default)(BaseReporter)).call(this));\n\n        _this.reporters = [];\n        _this.printEpilogue = true;\n        _this.cursor = new Cursor();\n        _this.stats = new _ReporterStats.ReporterStats();\n\n        _this.on('start', function () {});\n\n        _this.on('runner:start', function (runner) {\n            _this.stats.runnerStart(runner);\n            _this.stats.specStart(runner);\n        });\n\n        _this.on('runner:init', function (runner) {\n            _this.stats.setSessionId(runner);\n        });\n\n        _this.on('runner:beforecommand', function (command) {\n            _this.stats.output('beforecommand', command);\n        });\n\n        _this.on('runner:command', function (command) {\n            _this.stats.output('command', command);\n        });\n\n        _this.on('runner:aftercommand', function (command) {\n            _this.stats.output('aftercommand', command);\n        });\n\n        _this.on('runner:result', function (result) {\n            _this.stats.output('result', result);\n        });\n\n        _this.on('runner:screenshot', function (screenshot) {\n            _this.stats.output('screenshot', screenshot);\n        });\n\n        _this.on('runner:log', function (log) {\n            _this.stats.output('log', log);\n        });\n\n        _this.on('suite:start', function (suite) {\n            _this.stats.suiteStart(suite);\n        });\n\n        _this.on('hook:start', function (hook) {\n            _this.stats.hookStart(hook);\n        });\n\n        _this.on('hook:end', function (hook) {\n            _this.stats.hookEnd(hook);\n        });\n\n        _this.on('test:start', function (test) {\n            _this.stats.testStart(test);\n        });\n\n        _this.on('test:pass', function (test) {\n            _this.stats.testPass(test);\n        });\n\n        _this.on('test:fail', function (test) {\n            _this.stats.testFail(test);\n        });\n\n        _this.on('test:pending', function (test) {\n            _this.stats.testPending(test);\n        });\n\n        _this.on('test:end', function (test) {\n            _this.stats.testEnd(test);\n        });\n\n        _this.on('suite:end', function (runner) {\n            _this.stats.suiteEnd(runner);\n        });\n\n        _this.on('error', function (runner) {\n            _this.printEpilogue = false;\n\n            var fmt = _this.color('error message', 'ERROR: %s');\n            console.log(fmt, runner.error.message);\n\n            fmt = _this.color('bright yellow', _sanitize2.default.caps(runner.capabilities));\n            console.log(fmt);\n\n            if (runner.error.stack) {\n                fmt = _this.color('error stack', runner.error.stack.replace('Error: ' + runner.error.message + '\\n', ''));\n            } else {\n                fmt = _this.color('error stack', '    no stack available');\n            }\n            console.log(fmt);\n        });\n\n        _this.on('runner:end', function (runner) {\n            _this.stats.runnerEnd(runner);\n        });\n\n        _this.on('end', function (args) {\n            _this.stats.complete();\n            _this.printEpilogue = _this.printEpilogue && !args.sigint;\n        });\n        return _this;\n    }\n\n    /**\n     * Color `str` with the given `type`,\n     * allowing colors to be disabled,\n     * as well as user-defined color\n     * schemes.\n     *\n     * @param {String} type\n     * @param {String} str\n     * @return {String}\n     * @api private\n     */\n\n\n    (0, _createClass3.default)(BaseReporter, [{\n        key: 'color',\n        value: function color(type, str) {\n            if (!_supportsColor2.default) return String(str);\n            return '\\x1B[' + COLORS[type] + 'm' + str + '\\x1B[0m';\n        }\n    }, {\n        key: 'limit',\n        value: function limit(val) {\n            return _sanitize2.default.limit(val);\n        }\n\n        /**\n         * Output common epilogue used by many of\n         * the bundled reporters.\n         *\n         * @api public\n         */\n\n    }, {\n        key: 'epilogue',\n        value: function epilogue() {\n            if (!this.printEpilogue) {\n                return;\n            }\n\n            var counts = this.stats.getCounts();\n\n            console.log('\\n');\n\n            // passes\n            var fmt = this.color('green', '%d passing') + this.color('light', ' (%ss)');\n            console.log(fmt, counts.passes || 0, (Math.round(this.stats.duration / 100) / 10).toFixed(2));\n\n            // pending\n            if (counts.pending) {\n                fmt = this.color('pending', '%d pending');\n                console.log(fmt, counts.pending);\n            }\n\n            // failures\n            if (counts.failures) {\n                fmt = this.color('fail', '%d failing');\n                console.log(fmt, counts.failures);\n                this.listFailures();\n            }\n\n            console.log();\n\n            this.printEpilogue = false;\n        }\n\n        /**\n         * Outut the given failures as a list\n         */\n\n    }, {\n        key: 'listFailures',\n        value: function listFailures() {\n            var _this2 = this;\n\n            console.log();\n            this.stats.getFailures().forEach(function (test, i) {\n                var fmt = _this2.color('error title', '%s) %s:\\n') + _this2.color('error message', '%s') + _this2.color('bright yellow', '%s') + _this2.color('error stack', '\\n%s\\n');\n                var title = typeof test.parent !== 'undefined' ? test.parent + ' ' + test.title : test.title;\n                console.log(fmt, i + 1, title, test.err.message, test.runningBrowser, test.err.stack);\n            });\n        }\n    }, {\n        key: 'add',\n        value: function add(reporter) {\n            this.reporters.push(reporter);\n        }\n\n        // Although BaseReporter is an eventemitter, handleEvent() is called instead of emit()\n        // so that every event can be propagated to attached reporters\n\n    }, {\n        key: 'handleEvent',\n        value: function handleEvent() {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            if (this.listeners(args[0]).length) {\n                this.emit.apply(this, args);\n            }\n\n            if (this.reporters.length === 0) {\n                return;\n            }\n\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(this.reporters), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var reporter = _step.value;\n\n                    /**\n                     * skip reporter if\n                     *  - he isn't an eventemitter\n                     *  - event is not registered\n                     */\n                    if (typeof reporter.emit !== 'function' || !reporter.listeners(args[0]).length) {\n                        continue;\n                    }\n\n                    reporter.emit.apply(reporter, args);\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Default color map.\n         */\n\n    }, {\n        key: 'colors',\n        get: function get() {\n            return COLORS;\n        }\n\n        /**\n         * Default symbol map.\n         */\n\n    }, {\n        key: 'symbols',\n        get: function get() {\n            /**\n             * With node.js on Windows: use symbols available in terminal default fonts\n             */\n            if (process.platform === 'win32') {\n                return SYMBOLS_WIN;\n            }\n\n            return SYMBOLS;\n        }\n    }]);\n    return BaseReporter;\n}(_events2.default.EventEmitter);\n\n/**\n * Expose some basic cursor interactions\n * that are common among reporters.\n */\n\n\nvar Cursor = function () {\n    function Cursor() {\n        (0, _classCallCheck3.default)(this, Cursor);\n    }\n\n    (0, _createClass3.default)(Cursor, [{\n        key: 'hide',\n        value: function hide() {\n            ISATTY && process.stdout.write('\\x1B[?25l');\n        }\n    }, {\n        key: 'show',\n        value: function show() {\n            ISATTY && process.stdout.write('\\x1B[?25h');\n        }\n    }, {\n        key: 'deleteLine',\n        value: function deleteLine() {\n            ISATTY && process.stdout.write('\\x1B[2K');\n        }\n    }, {\n        key: 'beginningOfLine',\n        value: function beginningOfLine() {\n            ISATTY && process.stdout.write('\\x1B[0G');\n        }\n    }, {\n        key: 'CR',\n        value: function CR() {\n            if (ISATTY) {\n                this.deleteLine();\n                this.beginningOfLine();\n            } else {\n                process.stdout.write('\\r');\n            }\n        }\n    }, {\n        key: 'isatty',\n        get: function get() {\n            return ISATTY;\n        }\n    }]);\n    return Cursor;\n}();\n\nexports.default = BaseReporter;\nexports.Cursor = Cursor;\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/utils/ReporterStats.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ReporterStats = exports.TestStats = exports.SuiteStats = exports.SpecStats = exports.RunnerStats = exports.RunnableStats = undefined;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _deepmerge = require('deepmerge');\n\nvar _deepmerge2 = _interopRequireDefault(_deepmerge);\n\nvar _crypto = require('crypto');\n\nvar _crypto2 = _interopRequireDefault(_crypto);\n\nvar _sanitize = require('../helpers/sanitize');\n\nvar _sanitize2 = _interopRequireDefault(_sanitize);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar RunnableStats = function () {\n    function RunnableStats(type) {\n        (0, _classCallCheck3.default)(this, RunnableStats);\n\n        this.type = type;\n        this.start = new Date();\n        this._duration = 0;\n    }\n\n    (0, _createClass3.default)(RunnableStats, [{\n        key: 'complete',\n        value: function complete() {\n            this.end = new Date();\n            this._duration = this.end - this.start;\n        }\n    }, {\n        key: 'duration',\n        get: function get() {\n            if (this.end) {\n                return this._duration;\n            }\n            return new Date() - this.start;\n        }\n    }]);\n    return RunnableStats;\n}();\n\nvar RunnerStats = function (_RunnableStats) {\n    (0, _inherits3.default)(RunnerStats, _RunnableStats);\n\n    function RunnerStats(runner) {\n        (0, _classCallCheck3.default)(this, RunnerStats);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (RunnerStats.__proto__ || (0, _getPrototypeOf2.default)(RunnerStats)).call(this, 'runner'));\n\n        _this.uid = ReporterStats.getIdentifier(runner);\n        _this.cid = runner.cid;\n        _this.capabilities = runner.capabilities;\n        _this.sanitizedCapabilities = runner.capabilities && _sanitize2.default.caps(runner.capabilities);\n        _this.config = runner.config;\n        _this.specs = {};\n        return _this;\n    }\n\n    return RunnerStats;\n}(RunnableStats);\n\nvar SpecStats = function (_RunnableStats2) {\n    (0, _inherits3.default)(SpecStats, _RunnableStats2);\n\n    function SpecStats(runner) {\n        (0, _classCallCheck3.default)(this, SpecStats);\n\n        var _this2 = (0, _possibleConstructorReturn3.default)(this, (SpecStats.__proto__ || (0, _getPrototypeOf2.default)(SpecStats)).call(this, 'spec'));\n\n        _this2.uid = ReporterStats.getIdentifier(runner);\n        _this2.files = runner.specs;\n        _this2.specHash = runner.specHash;\n        _this2.suites = {};\n        _this2.output = [];\n        return _this2;\n    }\n\n    return SpecStats;\n}(RunnableStats);\n\nvar SuiteStats = function (_RunnableStats3) {\n    (0, _inherits3.default)(SuiteStats, _RunnableStats3);\n\n    function SuiteStats(runner) {\n        (0, _classCallCheck3.default)(this, SuiteStats);\n\n        var _this3 = (0, _possibleConstructorReturn3.default)(this, (SuiteStats.__proto__ || (0, _getPrototypeOf2.default)(SuiteStats)).call(this, 'suite'));\n\n        _this3.uid = ReporterStats.getIdentifier(runner);\n        _this3.title = runner.title;\n        _this3.tests = {};\n        _this3.hooks = {};\n        return _this3;\n    }\n\n    return SuiteStats;\n}(RunnableStats);\n\nvar TestStats = function (_RunnableStats4) {\n    (0, _inherits3.default)(TestStats, _RunnableStats4);\n\n    function TestStats(runner) {\n        (0, _classCallCheck3.default)(this, TestStats);\n\n        var _this4 = (0, _possibleConstructorReturn3.default)(this, (TestStats.__proto__ || (0, _getPrototypeOf2.default)(TestStats)).call(this, 'test'));\n\n        _this4.uid = ReporterStats.getIdentifier(runner);\n        _this4.title = runner.title;\n        _this4.state = '';\n        _this4.screenshots = [];\n        _this4.output = [];\n        return _this4;\n    }\n\n    return TestStats;\n}(RunnableStats);\n\nvar HookStats = function (_RunnableStats5) {\n    (0, _inherits3.default)(HookStats, _RunnableStats5);\n\n    function HookStats(runner) {\n        (0, _classCallCheck3.default)(this, HookStats);\n\n        var _this5 = (0, _possibleConstructorReturn3.default)(this, (HookStats.__proto__ || (0, _getPrototypeOf2.default)(HookStats)).call(this, 'hook'));\n\n        _this5.uid = ReporterStats.getIdentifier(runner);\n        _this5.title = runner.title;\n        _this5.parent = runner.parent;\n        _this5.parenUid = runner.parentUid || runner.parent;\n        _this5.currentTest = runner.currentTest;\n        return _this5;\n    }\n\n    return HookStats;\n}(RunnableStats);\n\nvar ReporterStats = function (_RunnableStats6) {\n    (0, _inherits3.default)(ReporterStats, _RunnableStats6);\n\n    function ReporterStats() {\n        (0, _classCallCheck3.default)(this, ReporterStats);\n\n        var _this6 = (0, _possibleConstructorReturn3.default)(this, (ReporterStats.__proto__ || (0, _getPrototypeOf2.default)(ReporterStats)).call(this, 'base'));\n\n        _this6.runners = {};\n\n        _this6.reset();\n        return _this6;\n    }\n\n    (0, _createClass3.default)(ReporterStats, [{\n        key: 'reset',\n        value: function reset() {\n            this.counts = {\n                suites: 0,\n                tests: 0,\n                hooks: 0,\n                passes: 0,\n                pending: 0,\n                failures: 0\n            };\n            this.failures = [];\n        }\n    }, {\n        key: 'getCounts',\n        value: function getCounts() {\n            return this.counts;\n        }\n    }, {\n        key: 'getFailures',\n        value: function getFailures() {\n            var _this7 = this;\n\n            return this.failures.map(function (test) {\n                test.runningBrowser = '';\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(test.runner)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var pid = _step.value;\n\n                        var caps = test.runner[pid];\n                        test.runningBrowser += '\\nrunning';\n\n                        if (caps.browserName) {\n                            test.runningBrowser += ' ' + caps.browserName;\n                        }\n                        if (caps.version) {\n                            test.runningBrowser += ' (v' + caps.version + ')';\n                        }\n                        if (caps.platform) {\n                            test.runningBrowser += ' on ' + caps.platform;\n                        }\n\n                        var host = _this7.runners[pid].config.host;\n                        if (host && host.indexOf('saucelabs') > -1) {\n                            test.runningBrowser += '\\nCheck out job at https://saucelabs.com/tests/' + _this7.runners[pid].sessionID;\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                return test;\n            });\n        }\n    }, {\n        key: 'runnerStart',\n        value: function runnerStart(runner) {\n            if (!this.runners[runner.cid]) {\n                this.runners[runner.cid] = new RunnerStats(runner);\n            }\n        }\n    }, {\n        key: 'getRunnerStats',\n        value: function getRunnerStats(runner) {\n            if (!this.runners[runner.cid]) throw Error('Unrecognised runner [' + runner.cid + ']');\n            return this.runners[runner.cid];\n        }\n    }, {\n        key: 'getSpecHash',\n        value: function getSpecHash(runner) {\n            if (!runner.specHash) {\n                if (!runner.specs) throw Error('Cannot generate spec hash for runner with no \\'specs\\' key');\n                runner.specHash = _crypto2.default.createHash('md5').update(runner.specs.join('')).digest('hex');\n            }\n            return runner.specHash;\n        }\n    }, {\n        key: 'specStart',\n        value: function specStart(runner) {\n            var specHash = this.getSpecHash(runner);\n            this.getRunnerStats(runner).specs[specHash] = new SpecStats(runner);\n        }\n    }, {\n        key: 'getSpecStats',\n        value: function getSpecStats(runner) {\n            var runnerStats = this.getRunnerStats(runner);\n            var specHash = this.getSpecHash(runner);\n            if (!runnerStats.specs[specHash]) throw Error('Unrecognised spec [' + specHash + '] for runner [' + runner.cid + ']');\n            return runnerStats.specs[specHash];\n        }\n    }, {\n        key: 'setSessionId',\n        value: function setSessionId(runner) {\n            this.getRunnerStats(runner).sessionID = runner.sessionID;\n        }\n    }, {\n        key: 'suiteStart',\n        value: function suiteStart(runner) {\n            this.getSpecStats(runner).suites[ReporterStats.getIdentifier(runner)] = new SuiteStats(runner);\n            this.counts.suites++;\n        }\n    }, {\n        key: 'getSuiteStats',\n        value: function getSuiteStats(runner, suiteTitle) {\n            var specStats = this.getSpecStats(runner);\n\n            /**\n             * if error occurs in root level hooks we haven't created any suites yet, so\n             * create one here if so\n             */\n            if (!specStats.suites[suiteTitle]) {\n                this.suiteStart((0, _deepmerge2.default)(runner, { title: runner.parent }));\n                specStats = this.getSpecStats(runner);\n            }\n\n            return specStats.suites[suiteTitle];\n        }\n    }, {\n        key: 'hookStart',\n        value: function hookStart(runner) {\n            var suiteStat = this.getSuiteStats(runner, runner.parentUid || runner.parent);\n\n            if (!suiteStat) {\n                return;\n            }\n\n            suiteStat.hooks[ReporterStats.getIdentifier(runner)] = new HookStats(runner);\n        }\n    }, {\n        key: 'hookEnd',\n        value: function hookEnd(runner) {\n            var hookStats = this.getHookStats(runner);\n\n            if (!hookStats) {\n                return;\n            }\n\n            hookStats.complete();\n            this.counts.hooks++;\n        }\n    }, {\n        key: 'testStart',\n        value: function testStart(runner) {\n            this.getSuiteStats(runner, runner.parentUid || runner.parent).tests[ReporterStats.getIdentifier(runner)] = new TestStats(runner);\n        }\n    }, {\n        key: 'getHookStats',\n        value: function getHookStats(runner) {\n            var suiteStats = this.getSuiteStats(runner, runner.parentUid || runner.parent);\n\n            if (!suiteStats) {\n                return;\n            }\n\n            // Errors encountered inside hooks (e.g. beforeEach) can be identified by looking\n            // at the currentTest param (currently only applicable to the Mocha adapter).\n            var uid = runner.currentTest || ReporterStats.getIdentifier(runner);\n            if (!suiteStats.hooks[uid]) {\n                uid = ReporterStats.getIdentifier(runner);\n            }\n\n            if (!suiteStats.hooks[uid]) throw Error('Unrecognised hook [' + runner.title + '] for suite [' + runner.parent + ']');\n            return suiteStats.hooks[uid];\n        }\n    }, {\n        key: 'getTestStats',\n        value: function getTestStats(runner) {\n            var suiteStats = this.getSuiteStats(runner, runner.parentUid || runner.parent);\n\n            if (!suiteStats) {\n                return;\n            }\n\n            // Errors encountered inside hooks (e.g. beforeEach) can be identified by looking\n            // at the currentTest param (currently only applicable to the Mocha adapter).\n            var uid = runner.currentTest || ReporterStats.getIdentifier(runner);\n            if (!suiteStats.tests[uid]) {\n                uid = ReporterStats.getIdentifier(runner);\n            }\n\n            if (!suiteStats.tests[uid]) throw Error('Unrecognised test [' + runner.title + '] for suite [' + runner.parent + ']');\n            return suiteStats.tests[uid];\n        }\n    }, {\n        key: 'output',\n        value: function output(type, runner) {\n            runner.time = new Date();\n            if (ReporterStats.getIdentifier(runner) && runner.parent) {\n                this.getTestStats(runner).output.push({\n                    type: type,\n                    payload: runner\n                });\n            } else {\n                // Log commands, results and screenshots executed outside of a test\n                this.getSpecStats(runner).output.push({\n                    type: type,\n                    payload: runner\n                });\n            }\n        }\n    }, {\n        key: 'testPass',\n        value: function testPass(runner) {\n            this.getTestStats(runner).state = 'pass';\n            this.counts.passes++;\n        }\n    }, {\n        key: 'testPending',\n        value: function testPending(runner) {\n            // Pending tests don't actually start, so won't yet be registered\n            this.testStart(runner);\n            this.testEnd(runner);\n            this.getTestStats(runner).state = 'pending';\n            this.counts.pending++;\n        }\n    }, {\n        key: 'testFail',\n        value: function testFail(runner) {\n            var testStats = void 0;\n\n            /**\n             * replace \"Ensure the done() callback is being called in this test.\" with more meaningful\n             * message\n             */\n            var message = 'Ensure the done() callback is being called in this test.';\n            if (runner.err && runner.err.message && runner.err.message.indexOf(message) > -1) {\n                var replacement = 'The execution in the test \"' + runner.parent + ' ' + runner.title + '\" took ' + 'too long. Try to reduce the run time or increase your timeout for ' + 'test specs (http://webdriver.io/guide/testrunner/timeouts.html).';\n                runner.err.message = runner.err.message.replace(message, replacement);\n                runner.err.stack = runner.err.stack.replace(message, replacement);\n            }\n\n            message = 'For async tests and hooks, ensure \"done()\" is called;';\n            if (runner.err && runner.err.message && runner.err.message.indexOf(message) > -1) {\n                var _replacement = 'Try to reduce the run time or increase your timeout for ' + 'test specs (http://webdriver.io/guide/testrunner/timeouts.html);';\n                runner.err.message = runner.err.message.replace(message, _replacement);\n                runner.err.stack = runner.err.stack.replace(message, _replacement);\n            }\n\n            try {\n                testStats = this.getTestStats(runner);\n            } catch (e) {\n                // If a test fails during the before() or beforeEach() hook, it will not yet\n                // have been 'started', so start now\n                this.testStart(runner);\n                testStats = this.getTestStats(runner);\n            }\n\n            testStats.state = 'fail';\n            testStats.error = runner.err;\n            this.counts.failures++;\n\n            /**\n             * check if error also happened in other runners\n             */\n            var duplicateError = false;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = (0, _getIterator3.default)(this.failures), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var failure = _step2.value;\n\n                    if (runner.err.message !== failure.err.message || ReporterStats.getIdentifier(failure) !== ReporterStats.getIdentifier(runner)) {\n                        continue;\n                    }\n                    duplicateError = true;\n                    failure.runner[runner.cid] = runner.runner[runner.cid];\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            if (!duplicateError) {\n                this.failures.push(runner);\n            }\n        }\n    }, {\n        key: 'testEnd',\n        value: function testEnd(runner) {\n            this.getTestStats(runner).complete();\n            this.counts.tests++;\n        }\n    }, {\n        key: 'suiteEnd',\n        value: function suiteEnd(runner) {\n            this.getSuiteStats(runner, ReporterStats.getIdentifier(runner)).complete();\n        }\n    }, {\n        key: 'runnerEnd',\n        value: function runnerEnd(runner) {\n            this.getSpecStats(runner).complete();\n        }\n    }], [{\n        key: 'getIdentifier',\n        value: function getIdentifier(runner) {\n            return runner.uid || runner.title;\n        }\n    }]);\n    return ReporterStats;\n}(RunnableStats);\n\nexports.RunnableStats = RunnableStats;\nexports.RunnerStats = RunnerStats;\nexports.SpecStats = SpecStats;\nexports.SuiteStats = SuiteStats;\nexports.TestStats = TestStats;\nexports.ReporterStats = ReporterStats;\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/alertAccept.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Accepts the currently displayed alert dialog. Usually, this is equivalent to\n * clicking on the 'OK' button in the dialog.\n *\n * <example>\n    :alertAccept.js\n    it('demonstrate the alertAccept command', function () {\n        if (browser.alertText()) {\n            browser.alertAccept();\n        }\n        // ...\n    });\n * </example>\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#accept-alert\n * @type protocol\n *\n */\n\nvar alertAccept = function alertAccept() {\n    // ToDo change path to new route\n    // according to Webdriver specification: /session/{session id}/alert/accept\n    var requestOptions = {\n        path: '/session/:sessionId/accept_alert',\n        method: 'POST'\n    };\n\n    return this.requestHandler.create(requestOptions);\n};\n\nexports.default = alertAccept;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/alertDismiss.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Dismisses the currently displayed alert dialog. For confirm() and prompt()\n * dialogs, this is equivalent to clicking the 'Cancel' button. For alert()\n * dialogs, this is equivalent to clicking the 'OK' button.\n *\n * <example>\n    :alertAccept.js\n    it('demonstrate the alertDismiss command', function () {\n        if (browser.alertText()) {\n            browser.alertDismiss();\n        }\n        // ...\n    });\n * </example>\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dismiss-alert\n * @type protocol\n *\n */\n\nvar alertDismiss = function alertDismiss() {\n    // ToDo change path to new route\n    // according to Webdriver specification: /session/{session id}/alert/dismiss\n    var requestOptions = {\n        path: '/session/:sessionId/dismiss_alert',\n        method: 'POST'\n    };\n\n    return this.requestHandler.create(requestOptions);\n};\n\nexports.default = alertDismiss;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/alertText.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Gets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n *\n * <example>\n    :alertText.js\n    it('demonstrate the alertDismiss command', function () {\n        if (browser.alertText()) {\n            browser.alertDismiss();\n        }\n        // ...\n    });\n * </example>\n *\n * @param {String=} text  Keystrokes to send to the prompt() dialog.\n * @returns {String}      The text of the currently displayed alert.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#get-alert-text\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#send-alert-text\n * @type protocol\n *\n */\n\nvar alertText = function alertText(text) {\n    // ToDo change path to new route\n    // according to Webdriver specification: /session/{session id}/alert/text\n    var requestOptions = '/session/:sessionId/alert_text';\n    var data = {};\n\n    if (typeof text === 'string') {\n        requestOptions = {\n            path: requestOptions,\n            method: 'POST'\n        };\n\n        data = { text: text };\n    }\n\n    return this.unify(this.requestHandler.create(requestOptions, data), {\n        extractValue: true\n    });\n};\n\nexports.default = alertText;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/applicationCacheStatus.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * Get the status of the html5 application cache.\n *\n * @returns {Number} Status code for application cache: **{UNCACHED = 0, IDLE = 1, CHECKING = 2, DOWNLOADING = 3, UPDATE_READY = 4, OBSOLETE = 5}**\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidapplication_cachestatus\n * @type protocol\n *\n */\n\nvar applicationCacheStatus = function applicationCacheStatus() {\n  return this.requestHandler.create('/session/:sessionId/application_cache/status');\n};\n\nexports.default = applicationCacheStatus;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/back.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Navigate backwards in the browser history, if possible.\n *\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#back\n * @type protocol\n *\n */\n\nvar back = function back() {\n    if (this.desiredCapabilities.browserName === 'safari') {\n        /*!\n         * helper for safaridriver which doesn not support forward\n         * Reason: \"Yikes! Safari history navigation does not work. We can go forward or back,\n         * but once we do, we can no longer communicate with the page\"\n         */\n        return this.execute('history.go(-1)');\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/back',\n        method: 'POST'\n    });\n};\n\nexports.default = back;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/background.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Send the currently active app to the background.\n *\n * <example>\n    :backgroundApp.js\n    browser.background(1);\n * </example>\n *\n * @param {Number} seconds  number of seconds after the app gets send to background\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#background-app\n * @type mobile\n * @for android\n *\n */\n\nvar background = function background() {\n    var seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/app/background',\n        method: 'POST'\n    }, { seconds: seconds });\n};\n\nexports.default = background;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/buttonDown.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _handleMouseButtonProtocol = require('../helpers/handleMouseButtonProtocol');\n\nvar _handleMouseButtonProtocol2 = _interopRequireDefault(_handleMouseButtonProtocol);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar buttonDown = function buttonDown(button) {\n    return _handleMouseButtonProtocol2.default.call(this, '/session/:sessionId/buttondown', button);\n}; /**\n    *\n    * Click and hold the left mouse button (at the coordinates set by the last moveto\n    * command). Note that the next mouse-related command that should follow is buttonup.\n    * Any other mouse command (such as click or another call to buttondown) will yield\n    * undefined behaviour.\n    *\n    * @param {Number} button  Which button, enum: *{LEFT = 0, MIDDLE = 1 , RIGHT = 2}*. Defaults to the left mouse button if not specified.\n    *\n    * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidbuttondown\n    * @type protocol\n    *\n    */\n\nexports.default = buttonDown;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/helpers/handleMouseButtonProtocol.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar BUTTON_ENUM = {\n    left: 0,\n    middle: 1,\n    right: 2\n};\n\n/**\n * call must be scoped to the webdriverio client\n */\nvar handleMouseButtonProtocol = function handleMouseButtonProtocol(requestPath, button) {\n    if (typeof button !== 'number') {\n        button = BUTTON_ENUM[button || 'left'];\n    }\n\n    return this.requestHandler.create(requestPath, { button: button });\n};\n\nexports.default = handleMouseButtonProtocol;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/buttonPress.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _handleMouseButtonProtocol = require('../helpers/handleMouseButtonProtocol');\n\nvar _handleMouseButtonProtocol2 = _interopRequireDefault(_handleMouseButtonProtocol);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar buttonPress = function buttonPress(button) {\n    return _handleMouseButtonProtocol2.default.call(this, '/session/:sessionId/click', button);\n}; /**\n    *\n    * Click any mouse button (at the coordinates set by the last moveto command). Note\n    * that calling this command after calling buttondown and before calling button up\n    * (or any out-of-order interactions sequence) will yield undefined behaviour.\n    *\n    * @param {Number} button  Which button, enum: *{LEFT = 0, MIDDLE = 1 , RIGHT = 2}*. Defaults to the left mouse button if not specified.\n    * @type protocol\n    *\n    */\n\nexports.default = buttonPress;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/buttonUp.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _handleMouseButtonProtocol = require('../helpers/handleMouseButtonProtocol');\n\nvar _handleMouseButtonProtocol2 = _interopRequireDefault(_handleMouseButtonProtocol);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar buttonUp = function buttonUp(button) {\n    return _handleMouseButtonProtocol2.default.call(this, '/session/:sessionId/buttonup', button);\n}; /**\n    *\n    * Releases the mouse button previously held (where the mouse is currently at). Must\n    * be called once for every buttondown command issued. See the note in click and\n    * buttondown about implications of out-of-order commands.\n    *\n    * @param {Number} button  Which button, enum: *{LEFT = 0, MIDDLE = 1 , RIGHT = 2}*. Defaults to the left mouse button if not specified.\n    *\n    * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidbuttonup\n    * @type protocol\n    *\n    */\n\nexports.default = buttonUp;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/closeApp.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Close the given application.\n *\n * <example>\n    :closeApp.js\n    browser.closeApp()\n * </example>\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#close-app\n * @type mobile\n * @for ios\n *\n */\n\nvar closeApp = function closeApp() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/app/close',\n        method: 'POST'\n    });\n};\n\nexports.default = closeApp;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/context.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Retrieve current context or switch to the specified context\n *\n * @param {String=} id the context to switch to\n *\n * @see http://appium.io/slate/en/v1.1.0/?javascript#automating-hybrid-ios-apps\n * @see https://github.com/admc/wd/blob/master/lib/commands.js#L279\n * @type mobile\n * @for android, ios\n *\n */\n\nvar context = function context(id) {\n    var requestOptions = {\n        path: '/session/:sessionId/context',\n        method: 'GET'\n    };\n\n    var data = {};\n\n    if (typeof id === 'string') {\n        requestOptions.method = 'POST';\n        data.name = id;\n    }\n\n    return this.requestHandler.create(requestOptions, data);\n};\n\nexports.default = context;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/contexts.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * Returns an object with a value field containing the list of all available contexts\n *\n * @see http://appium.io/slate/en/v1.1.0/?javascript#automating-hybrid-ios-apps\n * @see https://github.com/admc/wd/blob/master/lib/commands.js#L279\n * @type mobile\n * @for android, ios\n *\n */\n\nvar contexts = function contexts() {\n  return this.requestHandler.create('/session/:sessionId/contexts');\n};\n\nexports.default = contexts;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/cookie.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Protocol binding to operate with cookies on the current page.\n *\n * <example>\n    :cookie.js\n    it('should get/set cookies using protocol command', function () {\n        // get all cookies\n        var cookies = browser.cookie();\n        console.log(cookies); // outputs: [{ name: 'test', value: '123' }]\n\n        // set cookie\n        browser.cookie('post', {\n            name: 'myCookie',\n            value: 'some content'\n        });\n\n        // delete cookie (sync)\n        browser.cookie('delete','myCookie');\n    })\n * </example>\n *\n * @param {String=}         method  request method\n * @param {Object=|String=} args    contains cookie information if you want to set a cookie or contains name of cookie if you want to delete it\n *\n * @returns {Object}  cookie data\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#cookies\n * @type protocol\n *\n */\n\nvar cookie = function cookie() {\n    var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'GET';\n    var args = arguments[1];\n\n    var data = {};\n    var requestOptions = {\n        path: '/session/:sessionId/cookie',\n        method: method\n    };\n\n    /**\n     * set cookie param for POST method\n     */\n    if (method.toUpperCase() === 'POST' && (typeof args === 'undefined' ? 'undefined' : (0, _typeof3.default)(args)) === 'object') {\n        data.cookie = args;\n    }\n\n    /**\n     * add cookie name tp path URL to delete a specific cookie object\n     */\n    if (method.toUpperCase() === 'DELETE' && typeof args === 'string') {\n        requestOptions.path += '/' + args;\n    }\n\n    return this.requestHandler.create(requestOptions, data);\n};\n\nexports.default = cookie;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/currentActivity.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Receive the current activity on an Android device.\n *\n * <example>\n    :rotateAsync.js\n    it('should get the activity of the android device', function () {\n        var activity = browser.currentActivity()\n        console.log(activity); // returns android activity information\n    });\n * </example>\n *\n * @see https://github.com/appium/appium-android-driver/blob/master/lib/commands/general.js#L59-L61\n * @type mobile\n * @for android\n *\n */\n\nvar currentActivity = function currentActivity() {\n    return this.requestHandler.create('/session/:sessionId/appium/device/current_activity');\n};\n\nexports.default = currentActivity;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/deviceKeyEvent.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * send a key event to the device\n *\n * @param {Number} keyValue  device specifc key value\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/appium-bindings.md#key-event\n * @type mobile\n * @for android\n *\n */\n\nvar deviceKeyEvent = function deviceKeyEvent(keycode, metastate) {\n    var data = {\n        keycode: keycode\n    };\n\n    if (metastate) {\n        data.metastate = metastate;\n    }\n\n    var requestOptions = {\n        path: '/session/:sessionId/appium/device/keyevent',\n        method: 'POST'\n    };\n\n    return this.requestHandler.create(requestOptions, data);\n};\n\nexports.default = deviceKeyEvent;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/doDoubleClick.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Double-clicks at the current mouse coordinates (set by moveto. (Not part of the official Webdriver specification).\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessioniddoubleclick\n * @type protocol\n *\n */\n\nvar doDoubleClick = function doDoubleClick() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/doubleclick',\n        method: 'POST'\n    });\n};\n\nexports.default = doDoubleClick;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/element.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _findElementStrategy = require('../helpers/findElementStrategy');\n\nvar _findElementStrategy2 = _interopRequireDefault(_findElementStrategy);\n\nvar _hasElementResultHelper = require('../helpers/hasElementResultHelper');\n\nvar _hasElementResultHelper2 = _interopRequireDefault(_hasElementResultHelper);\n\nvar _q = require('q');\n\nvar _q2 = _interopRequireDefault(_q);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar element = function element(selector) {\n    var _this = this;\n\n    var requestPath = '/session/:sessionId/element';\n    var lastPromise = this.lastResult ? (0, _q2.default)(this.lastResult).inspect() : this.lastPromise.inspect();\n    var relative = false;\n\n    if (lastPromise.state === 'fulfilled' && (0, _hasElementResultHelper2.default)(lastPromise.value) === 1) {\n        if (!selector) {\n            return lastPromise.value;\n        }\n\n        /**\n         * format xpath selector (global -> relative)\n         */\n        if (selector.slice(0, 2) === '//') {\n            selector = '.' + selector.slice(1);\n        }\n\n        var elem = lastPromise.value.value.ELEMENT;\n        relative = true;\n        requestPath = '/session/:sessionId/element/' + elem + '/element';\n    }\n\n    var found = (0, _findElementStrategy2.default)(selector, relative);\n    return this.requestHandler.create(requestPath, { using: found.using, value: found.value }).then(function (result) {\n        result.selector = selector;\n        return result;\n    }, function (e) {\n        var result = e.seleniumStack;\n\n        /**\n         * if error is not NoSuchElement throw it\n         */\n        if (!result || result.type !== 'NoSuchElement') {\n            throw e;\n        }\n\n        result.state = 'failure';\n        result.sessionId = _this.requestHandler.sessionID;\n        result.value = null;\n        result.selector = selector;\n        delete result.orgStatusMessage;\n        return result;\n    });\n}; /**\n    * Search for an element on the page, starting from the document root.\n    * The located element will be returned as a WebElement JSON object.\n    * The table below lists the locator strategies that each server should support.\n    * Each locator must return the first matching element located in the DOM.\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#find-element\n    *\n    * @param {String} selector selector to query the element\n    * @returns {String} A WebElement JSON object for the located element.\n    *\n    * @type protocol\n    *\n    */\n\nexports.default = element;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/helpers/findElementStrategy.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar DEFAULT_SELECTOR = 'css selector';\nvar DIRECT_SELECTOR_REGEXP = /^(id|css selector|xpath|link text|partial link text|name|tag name|class name|-android uiautomator|-ios uiautomation|accessibility id):(.+)/;\n\nvar findStrategy = function findStrategy() {\n    var value = arguments.length <= 0 ? undefined : arguments[0];\n    var relative = arguments.length > 1 ? arguments.length <= 1 ? undefined : arguments[1] : false;\n    var xpathPrefix = relative ? './/' : '//';\n\n    /**\n     * set default selector\n     */\n    var using = DEFAULT_SELECTOR;\n\n    if (typeof value !== 'string') {\n        throw new _ErrorHandler.ProtocolError('selector needs to be typeof `string`');\n    }\n\n    if (arguments.length === 3) {\n        return {\n            using: arguments.length <= 0 ? undefined : arguments[0],\n            value: arguments.length <= 1 ? undefined : arguments[1]\n        };\n    }\n\n    /**\n     * check if user has specified locator strategy directly\n     */\n    var match = value.match(DIRECT_SELECTOR_REGEXP);\n    if (match) {\n        return {\n            using: match[1],\n            value: match[2]\n        };\n    }\n\n    // check value type\n    // use id strategy if value starts with # and doesnt contain any other CSS selector-relevant character\n    // regex to match ids from http://stackoverflow.com/questions/18938390/regex-to-match-ids-in-a-css-file\n    if (value.search(/^#-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/) > -1) {\n        using = 'id';\n        value = value.slice(1);\n\n        // use xPath strategy if value starts with //\n    } else if (value.indexOf('/') === 0 || value.indexOf('(') === 0 || value.indexOf('../') === 0 || value.indexOf('./') === 0 || value.indexOf('*/') === 0) {\n        using = 'xpath';\n\n        // use link text startegy if value startes with =\n    } else if (value.indexOf('=') === 0) {\n        using = 'link text';\n        value = value.slice(1);\n\n        // use partial link text startegy if value startes with *=\n    } else if (value.indexOf('*=') === 0) {\n        using = 'partial link text';\n        value = value.slice(2);\n\n        // recursive element search using the UiAutomator library (Android only)\n    } else if (value.indexOf('android=') === 0) {\n        using = '-android uiautomator';\n        value = value.slice(8);\n\n        // recursive element search using the UIAutomation library (iOS-only)\n    } else if (value.indexOf('ios=') === 0) {\n        using = '-ios uiautomation';\n        value = value.slice(4);\n\n        // recursive element search using accessibility id\n    } else if (value.indexOf('~') === 0) {\n        using = 'accessibility id';\n        value = value.slice(1);\n\n        // class name mobile selector\n        // for iOS = UIA...\n        // for Android = android.widget\n    } else if (value.slice(0, 3) === 'UIA' || value.slice(0, 14).toLowerCase() === 'android.widget') {\n        using = 'class name';\n\n        // use tag name strategy if value contains a tag\n        // e.g. \"<div>\" or \"<div />\"\n    } else if (value.search(/<[a-zA-Z-]+( \\/)*>/g) >= 0) {\n        using = 'tag name';\n        value = value.replace(/<|>|\\/|\\s/g, '');\n\n        // use name strategy if value queries elements with name attributes\n        // e.g. \"[name='myName']\" or '[name=\"myName\"]'\n    } else if (value.search(/^\\[name=(\"|')([a-zA-z0-9\\-_. ]+)(\"|')]$/) >= 0) {\n        using = 'name';\n        value = value.match(/^\\[name=(\"|')([a-zA-z0-9\\-_. ]+)(\"|')]$/)[2];\n\n        // any element with given text e.g. h1=Welcome\n    } else if (value.search(/^[a-z0-9]*=(.)+$/) >= 0) {\n        var query = value.split(/=/);\n        var tag = query.shift();\n\n        using = 'xpath';\n        value = '' + xpathPrefix + (tag.length ? tag : '*') + '[normalize-space() = \"' + query.join('=') + '\"]';\n\n        // any element containing given text\n    } else if (value.search(/^[a-z0-9]*\\*=(.)+$/) >= 0) {\n        var _query = value.split(/\\*=/);\n        var _tag = _query.shift();\n\n        using = 'xpath';\n        value = '' + xpathPrefix + (_tag.length ? _tag : '*') + '[contains(., \"' + _query.join('*=') + '\")]';\n\n        // any element with certian class or id + given content\n    } else if (value.search(/^[a-z0-9]*(\\.|#)-?[_a-zA-Z]+[_a-zA-Z0-9-]*=(.)+$/) >= 0) {\n        var _query2 = value.split(/=/);\n        var _tag2 = _query2.shift();\n\n        var classOrId = _tag2.substr(_tag2.search(/(\\.|#)/), 1) === '#' ? 'id' : 'class';\n        var classOrIdName = _tag2.slice(_tag2.search(/(\\.|#)/) + 1);\n\n        _tag2 = _tag2.substr(0, _tag2.search(/(\\.|#)/));\n        using = 'xpath';\n        value = '' + xpathPrefix + (_tag2.length ? _tag2 : '*') + '[contains(@' + classOrId + ', \"' + classOrIdName + '\") and normalize-space() = \"' + _query2.join('=') + '\"]';\n\n        // any element with certian class or id + has certain content\n    } else if (value.search(/^[a-z0-9]*(\\.|#)-?[_a-zA-Z]+[_a-zA-Z0-9-]*\\*=(.)+$/) >= 0) {\n        var _query3 = value.split(/\\*=/);\n        var _tag3 = _query3.shift();\n\n        var _classOrId = _tag3.substr(_tag3.search(/(\\.|#)/), 1) === '#' ? 'id' : 'class';\n        var _classOrIdName = _tag3.slice(_tag3.search(/(\\.|#)/) + 1);\n\n        _tag3 = _tag3.substr(0, _tag3.search(/(\\.|#)/));\n        using = 'xpath';\n        value = xpathPrefix + (_tag3.length ? _tag3 : '*') + '[contains(@' + _classOrId + ', \"' + _classOrIdName + '\") and contains(., \"' + _query3.join('*=') + '\")]';\n        value = '' + xpathPrefix + (_tag3.length ? _tag3 : '*') + '[contains(@' + _classOrId + ', \"' + _classOrIdName + '\") and contains(., \"' + _query3.join('*=') + '\")]';\n\n        // allow to move up to the parent or select current element\n    } else if (value === '..' || value === '.') {\n        using = 'xpath';\n    }\n\n    return {\n        using: using,\n        value: value\n    };\n};\n\nexports.default = findStrategy;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementActive.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Get the element on the page that currently has focus. The element will be returned as a WebElement JSON object.\n *\n * @returns {String} A WebElement JSON object for the active element.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-active-element\n * @type protocol\n *\n */\n\nvar elementActive = function elementActive() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/element/active',\n        method: 'POST'\n    });\n};\n\nexports.default = elementActive;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdAttribute.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar elementIdAttribute = function elementIdAttribute(id, attributeName) {\n    if (typeof id !== 'string' && typeof id !== 'number' || typeof attributeName !== 'string') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdAttribute protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/element/' + id + '/attribute/' + attributeName);\n}; /**\n    *\n    * Get the value of an element's attribute.\n    *\n    * @param {String} ID             ID of a WebElement JSON object to route the command to\n    * @param {String} attributeName  attribute name of element you want to receive\n    *\n    * @returns {String|null} The value of the attribute, or null if it is not set on the element.\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-element-attribute\n    * @type protocol\n    *\n    */\n\nexports.default = elementIdAttribute;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdClear.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar elementIdClear = function elementIdClear(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdClear protocol command');\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/element/' + id + '/clear',\n        method: 'POST'\n    });\n}; /**\n    *\n    * Clear a `TEXTAREA` or text `INPUT element's value.\n    *\n    * @param {String} ID ID of a WebElement JSON object to route the command to\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-element-clear\n    * @type protocol\n    *\n    */\n\nexports.default = elementIdClear;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdClick.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar elementIdClick = function elementIdClick(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdClick protocol command');\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/element/' + id + '/click',\n        method: 'POST'\n    });\n}; /**\n    *\n    * Click on an element.\n    *\n    * @param {String} ID ID of a WebElement JSON object to route the command to\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-element-click\n    * @type protocol\n    *\n    */\n\nexports.default = elementIdClick;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdCssProperty.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar elementIdCssProperty = function elementIdCssProperty(id, cssPropertyName) {\n    if (typeof id !== 'string' && typeof id !== 'number' || typeof cssPropertyName !== 'string') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdCssProperty protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/element/' + id + '/css/' + cssPropertyName);\n}; /**\n    *\n    * Query the value of an element's computed CSS property. The CSS property to query\n    * should be specified using the CSS property name, not the JavaScript property name\n    * (e.g. background-color instead of backgroundColor).\n    *\n    * @param {String} ID                ID of a WebElement JSON object to route the command to\n    * @param  {String} cssPropertyName  CSS property\n    *\n    * @returns {String} The value of the specified CSS property.\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-element-property\n    * @type protocol\n    *\n    */\n\nexports.default = elementIdCssProperty;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdDisplayed.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar elementIdDisplayed = function elementIdDisplayed(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdDisplayed protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/element/' + id + '/displayed');\n}; /**\n    *\n    * Determine if an element is currently displayed.\n    *\n    * @param {String} ID ID of a WebElement JSON object to route the command to\n    * @returns {Boolean} true if the element is displayed\n    *\n    * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementiddisplayed\n    * @type protocol\n    *\n    */\n\nexports.default = elementIdDisplayed;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdElement.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar _findElementStrategy = require('../helpers/findElementStrategy');\n\nvar _findElementStrategy2 = _interopRequireDefault(_findElementStrategy);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Search for an element on the page, starting from an element.\n * The located element will be returned as a WebElement JSON object.\n * The table below lists the locator strategies that each server should support.\n * Each locator must return the first matching element located in the DOM.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n * @param {String} selector selector to query the element\n * @returns {String} A WebElement JSON object for the located element.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidelement\n * @type protocol\n *\n */\n\nvar elementIdElement = function elementIdElement(id, selector) {\n    var _this = this;\n\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdElement protocol command');\n    }\n\n    var found = (0, _findElementStrategy2.default)(selector, true);\n    return this.requestHandler.create('/session/:sessionId/element/' + id + '/element', {\n        using: found.using,\n        value: found.value\n    }).then(function (result) {\n        result.selector = selector;\n        return result;\n    }, function (e) {\n        var result = e.seleniumStack;\n\n        /**\n         * if error is not NoSuchElement throw it\n         */\n        if (!result || result.type !== 'NoSuchElement') {\n            throw e;\n        }\n\n        result.state = 'failure';\n        result.sessionId = _this.requestHandler.sessionID;\n        result.value = null;\n        result.selector = selector;\n        delete result.orgStatusMessage;\n        return result;\n    });\n};\n\nexports.default = elementIdElement;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdElements.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar _findElementStrategy = require('../helpers/findElementStrategy');\n\nvar _findElementStrategy2 = _interopRequireDefault(_findElementStrategy);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Search for multiple elements on the page, starting from an element. The located\n * elements will be returned as a WebElement JSON objects. The table below lists the\n * locator strategies that each server should support. Elements should be returned in\n * the order located in the DOM.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n * @param {String} selector selector to query the elements\n * @returns {Object[]} A list of WebElement JSON objects for the located elements.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidelements\n * @type protocol\n *\n */\n\nvar elementIdElements = function elementIdElements(id, selector) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdElements protocol command');\n    }\n\n    var found = (0, _findElementStrategy2.default)(selector, true);\n    return this.requestHandler.create('/session/:sessionId/element/' + id + '/elements', {\n        using: found.using,\n        value: found.value\n    });\n};\n\nexports.default = elementIdElements;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdEnabled.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar elementIdEnabled = function elementIdEnabled(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdEnabled protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/element/' + id + '/enabled');\n}; /**\n    *\n    * Determine if an element is currently enabled.\n    *\n    * @param {String} ID ID of a WebElement JSON object to route the command to\n    * @returns {Boolean} true if the element is enabled\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-is-element-enabled\n    * @type protocol\n    *\n    */\n\nexports.default = elementIdEnabled;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdLocation.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar elementIdLocation = function elementIdLocation(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdLocation protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/element/' + id + '/location');\n}; /**\n    *\n    * Determine an element's location on the page. The point (0, 0) refers to the\n    * upper-left corner of the page. The element's coordinates are returned as a\n    * JSON object with x and y properties.\n    *\n    * Depcrecated command, please use `elementIdRect`.\n    *\n    * @param {String} ID ID of a WebElement JSON object to route the command to\n    * @returns {Object} The X and Y coordinates for the element on the page (`{x:number, y:number}`)\n    *\n    * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidlocation\n    * @type protocol\n    * @deprecated\n    *\n    */\n\nexports.default = elementIdLocation;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdLocationInView.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar elementIdLocationInView = function elementIdLocationInView(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdLocationInView protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/element/' + id + '/location_in_view');\n}; /**\n    *\n    * Determine an element's location on the screen once it has been scrolled into view.\n    *\n    * *Note:* This is considered an internal command and should only be used to determine\n    * an element's location for correctly generating native events.\n    *\n    * Depcrecated command, please use `elementIdRect`.\n    *\n    * @param {String} ID ID of a WebElement JSON object to route the command to\n    * @returns {Object} The X and Y coordinates for the element (`{x:number, y:number}`)\n    *\n    * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidlocation_in_view\n    * @type protocol\n    * @deprecated\n    *\n    */\n\nexports.default = elementIdLocationInView;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdName.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar elementIdName = function elementIdName(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdName protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/element/' + id + '/name');\n}; /**\n    *\n    * Query for an element's tag name.\n    *\n    * @param {String} ID ID of a WebElement JSON object to route the command to\n    * @returns {String}  the element's tag name, as a lowercase string\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-element-tag-name\n    * @type protocol\n    *\n    */\n\nexports.default = elementIdName;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdRect.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * The Get Element Rect command returns the dimensions and coordinates of the given web element.\n * The returned value is a dictionary with `x`. `y`, `width` and `height` properties.\n *\n * Note: this command was recently added to the official Webdriver protocol and might not be\n * working with current Selenium driver.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-element-rect\n * @type protocol\n *\n */\n\nvar elementIdRect = function elementIdRect(id) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/element/' + id + '/rect',\n        method: 'GET'\n    });\n};\n\nexports.default = elementIdRect;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdSelected.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar elementIdSelected = function elementIdSelected(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdSelected protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/element/' + id + '/selected');\n}; /**\n    *\n    * Determine if an OPTION element, or an INPUT element of type checkbox or\n    * radiobutton is currently selected.\n    *\n    * @param {String} ID ID of a WebElement JSON object to route the command to\n    * @returns {Boolean} true if the element is selected.\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-is-element-selected\n    * @type protocol\n    *\n    */\n\nexports.default = elementIdSelected;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdSize.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar elementIdSize = function elementIdSize(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdSize protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/element/' + id + '/size');\n}; /**\n    *\n    * Determine an element's size in pixels. The size will be returned as a JSON object\n    * with width and height properties.\n    *\n    * Depcrecated command, please use `elementIdRect`.\n    *\n    * @param {String} ID ID of a WebElement JSON object to route the command to\n    * @returns {Object} The width and height of the element, in pixels (`{width:number, height:number}`)\n    *\n    * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidsize\n    * @type protocol\n    * @deprecated\n    *\n    */\n\nexports.default = elementIdSize;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdText.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar elementIdText = function elementIdText(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdText protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/element/' + id + '/text');\n}; /**\n    *\n    * Returns the visible text for the element.\n    *\n    * @param {String} ID ID of a WebElement JSON object to route the command to\n    * @returns {String} visible text for the element\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#getelementtext\n    * @type protocol\n    *\n    */\n\nexports.default = elementIdText;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elementIdValue.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _from = require('babel-runtime/core-js/array/from');\n\nvar _from2 = _interopRequireDefault(_from);\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _constants = require('../helpers/constants');\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Send a sequence of key strokes to an element.\n *\n * @param {String} ID              ID of a WebElement JSON object to route the command to\n * @param {String|String[]} value  The sequence of keys to type. An array must be provided. The server should flatten the array items to a single string to be typed.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#element-send-keys\n * @type protocol\n *\n */\n\nvar elementIdValue = function elementIdValue(id, value) {\n    var key = [];\n\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdValue protocol command');\n    }\n\n    /**\n     * replace key with corresponding unicode character\n     */\n    if (typeof value === 'string') {\n        key = checkUnicode(value);\n    } else if (value instanceof Array) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var charSet = _step.value;\n\n                key = key.concat(checkUnicode(charSet));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    } else {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdValue protocol command');\n    }\n\n    // ToDo change this according to Webdriver spec\n    // /session/{session id}/element/{element id}/sendKeys\n    return this.requestHandler.create('/session/:sessionId/element/' + id + '/value', {\n        'value': key\n    });\n};\n\n/*!\n * check for unicode character or split string into literals\n * @param  {String} value  text\n * @return {Array}         set of characters or unicode symbols\n */\nfunction checkUnicode(value) {\n    return _constants.UNICODE_CHARACTERS.hasOwnProperty(value) ? [_constants.UNICODE_CHARACTERS[value]] : (0, _from2.default)(value);\n}\n\nexports.default = elementIdValue;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/elements.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _findElementStrategy = require('../helpers/findElementStrategy');\n\nvar _findElementStrategy2 = _interopRequireDefault(_findElementStrategy);\n\nvar _hasElementResultHelper = require('../helpers/hasElementResultHelper');\n\nvar _hasElementResultHelper2 = _interopRequireDefault(_hasElementResultHelper);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar _q = require('q');\n\nvar _q2 = _interopRequireDefault(_q);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Search for multiple elements on the page, starting from the document root. The located\n * elements will be returned as a WebElement JSON objects. The table below lists the\n * locator strategies that each server should support. Elements should be returned in\n * the order located in the DOM.\n *\n * The array of elements can be retrieved  using the 'response.value' which is a\n * collection of element ID's and can be accessed in the subsequent commands\n * using the '.ELEMENT' method.\n *\n * @param {String} selector selector to query the elements\n * @returns {Object[]} A list of WebElement JSON objects for the located elements.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#find-elements\n * @type protocol\n *\n */\n\nvar elements = function elements(selector) {\n    var requestPath = '/session/:sessionId/elements';\n    var lastPromise = this.lastResult ? (0, _q2.default)(this.lastResult).inspect() : this.lastPromise.inspect();\n    var relative = false;\n    var elementResult = (0, _hasElementResultHelper2.default)(lastPromise.value);\n\n    if (lastPromise.state === 'fulfilled' && elementResult) {\n        if (!selector) {\n            var newSelector = (0, _assign2.default)({}, lastPromise.value);\n            /**\n             * if last result was an element result transform result into an array\n             */\n            newSelector.value = Array.isArray(newSelector.value) ? newSelector.value : newSelector.value !== null ? [newSelector.value] : [];\n\n            /**\n             * Only return new selector if existing otherwise fetch again for selector.\n             * This is important in cases you do a waitForExist and use the same element\n             * variable again after the element has appeared.\n             */\n            if (newSelector.value.length === 0) {\n                this.lastResult = null;\n                return elements.call(this, newSelector.selector);\n            }\n\n            return newSelector;\n        }\n\n        /**\n         * only run elementIdElement if lastPromise was an element command\n         */\n        if (elementResult === 1) {\n            if (lastPromise.value.value === null) {\n                throw new _ErrorHandler.CommandError(7, lastPromise.value.selector);\n            }\n\n            /**\n             * format xpath selector (global -> relative)\n             */\n            if (selector.slice(0, 2) === '//') {\n                selector = '.' + selector.slice(1);\n            }\n\n            var elem = lastPromise.value.value.ELEMENT;\n            relative = true;\n            requestPath = '/session/:sessionId/element/' + elem + '/elements';\n        }\n    }\n\n    var found = (0, _findElementStrategy2.default)(selector, relative);\n    return this.requestHandler.create(requestPath, {\n        using: found.using,\n        value: found.value\n    }).then(function (result) {\n        result.selector = selector;\n        return result;\n    }, function (err) {\n        if (err.message === 'no such element') {\n            return [];\n        }\n\n        throw err;\n    });\n};\n\nexports.default = elements;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/execute.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar execute = function execute() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n\n    var script = args.shift();\n\n    /*!\n     * parameter check\n     */\n    if (typeof script !== 'string' && typeof script !== 'function') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with execute protocol command');\n    }\n\n    /*!\n     * instances started as multibrowserinstance can't getting called with\n     * a function paramter, therefor we need to check if it starts with \"function () {\"\n     */\n    if (typeof script === 'function' || this.inMultibrowserMode && script.indexOf('function (') === 0) {\n        script = 'return (' + script + ').apply(null, arguments)';\n    }\n\n    // ToDo change this according to new Webdriver specs to:\n    // /session/{session id}/execute/sync\n    return this.requestHandler.create('/session/:sessionId/execute', { script: script, args: args });\n}; /**\n    *\n    * Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n    * The executed script is assumed to be synchronous and the result of evaluating the script is returned to\n    * the client.\n    *\n    * The script argument defines the script to execute in the form of a function body. The value returned by\n    * that function will be returned to the client. The function will be invoked with the provided args array\n    * and the values may be accessed via the arguments object in the order specified.\n    *\n    * Arguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement\n    * reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script\n    * result will be returned to the client as WebElement JSON objects.\n    *\n    * <example>\n       :execute.js\n       it('should inject javascript on the page', function () {\n           var result = browser.execute(function(a, b, c, d) {\n               // browser context - you may not access client or console\n               return a + b + c + d;\n           }, 1, 2, 3, 4)\n   \n           // node.js context - client and console are available\n           console.log(result.value); // outputs: 10\n       });\n    * </example>\n    *\n    * @param {String|Function} script                     The script to execute.\n    * @param {*}               [argument1,...,argumentN]  script arguments\n    *\n    * @returns {*}             The script result.\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-execute-script\n    * @type protocol\n    *\n    */\n\nexports.default = execute;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/executeAsync.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar executeAsync = function executeAsync() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n\n    var script = args.shift();\n\n    /*!\n     * parameter check\n     */\n    if (typeof script !== 'string' && typeof script !== 'function') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with execute protocol command');\n    }\n\n    /*!\n     * instances started as multibrowserinstance can't getting called with\n     * a function parameter, therefor we need to check if it starts with \"function () {\"\n     */\n    if (typeof script === 'function' || this.inMultibrowserMode && script.indexOf('function (') === 0) {\n        script = 'return (' + script + ').apply(null, arguments)';\n    }\n\n    // ToDo change this according to new Webdriver specs to:\n    // /session/{session id}/execute/async\n    return this.requestHandler.create('/session/:sessionId/execute_async', {\n        script: script,\n        args: args\n    });\n}; /**\n    *\n    * Inject a snippet of JavaScript into the page for execution in the context of the currently selected\n    * frame. The executed script is assumed to be asynchronous and must signal that is done by invoking\n    * the provided callback, which is always provided as the final argument to the function. The value\n    * to this callback will be returned to the client.\n    *\n    * Asynchronous script commands may not span page loads. If an unload event is fired while waiting\n    * for a script result, an error should be returned to the client.\n    *\n    * The script argument defines the script to execute in the form of a function body. The function will\n    * be invoked with the provided args array and the values may be accessed via the arguments object\n    * in the order specified. The final argument will always be a callback function that must be invoked\n    * to signal that the script has finished.\n    *\n    * Arguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement\n    * reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script\n    * result will be returned to the client as WebElement JSON objects.\n    *\n    * <example>\n       :executeAsync.js\n       it('should execute async JavaScript on the page', function () {\n           browser.timeoutsAsyncScript(5000);\n   \n           var result = browser.executeAsync(function(a, b, c, d, done) {\n               // browser context - you may access neither client nor console\n               setTimeout(function() {\n                   done(a + b + c + d);\n               }, 3000);\n           }, 1, 2, 3, 4)\n   \n           // node.js context - client and console are available\n           console.log(result.value); // outputs: 10\n       });\n    * </example>\n    *\n    * @param {String|Function} script     The script to execute.\n    * @param {*}               arguments  script arguments\n    *\n    * @returns {*}             The script result.\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-execute-async-script\n    * @type protocol\n    *\n    */\n\nexports.default = executeAsync;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/file.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Uploads a base64 data object. (not documented, not part of Webdriver specs)\n *\n * @param {Object} data base64 data object\n *\n * @type protocol\n *\n */\n\nvar file = function file(base64data) {\n    return this.requestHandler.create('/session/:sessionId/file', {\n        file: base64data\n    });\n};\n\nexports.default = file;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/forward.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * Navigate forwards in the browser history, if possible.\n *\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#forward\n * @type protocol\n *\n */\n\nvar forward = function forward() {\n    /*!\n     * helper for safaridriver which doesn not support forward\n     * Reason: \"Yikes! Safari history navigation does not work. We can go forward or back,\n     * but once we do, we can no longer communicate with the page\"\n     */\n    if (this.desiredCapabilities.browserName === 'safari') {\n        return this.execute('history.go(+1)').waitForExist('body', 5000);\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/forward',\n        method: 'POST'\n    });\n};\n\nexports.default = forward;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/frame.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * Change focus to another frame on the page. If the frame id is null,\n * the server should switch to the page's default content.\n *\n * <example>\n    :frame.js\n    it('should switch focus to iFrame', function () {\n        // Using `element` to find an iframe and providing it to `frame` method\n        browser.waitForExist('iframe[name=\"my_iframe\"]');\n        var my_frame = $('iframe[name=\"my_iframe\"]').value;\n        browser.frame(my_frame);\n    });\n * </example>\n *\n * @param {String|Number|null|WebElementJSONObject} id   Identifier for the frame to change focus to.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#switch-to-frame\n * @type protocol\n *\n */\n\nvar frame = function frame() {\n    var frameId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    return this.requestHandler.create('/session/:sessionId/frame', {\n        id: frameId\n    });\n};\n\nexports.default = frame;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/frameParent.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * Change focus to the parent context. If the current context is the top level browsing context,\n * the context remains unchanged.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#switch-to-parent-frame\n * @type protocol\n *\n */\n\nvar frameParent = function frameParent() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/frame/parent',\n        method: 'POST'\n    });\n};\n\nexports.default = frameParent;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/getAppStrings.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Get all defined Strings from an app for the default language.\n *\n * @param {String} language  strings language code\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/appium-bindings.md#app-strings\n * @type mobile\n * @for android\n *\n */\n\nvar getAppStrings = function getAppStrings(language) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/app/strings',\n        method: 'POST'\n    }, {\n        language: language\n    });\n};\n\nexports.default = getAppStrings;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/getCurrentDeviceActivity.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Get current device activity.\n *\n * <example>\n    :getCurrentDeviceActivity.js\n    it('should get current Android activity', function () {\n        var activity = browser.getCurrentDeviceActivity();\n        console.log(activity); // returns \".MainActivity\"\n    });\n * </example>\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/appium-bindings.md#current-activity\n * @type mobile\n * @for android\n *\n */\n\nvar getCurrentDeviceActivity = function getCurrentDeviceActivity() {\n    return this.unify(this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/current_activity',\n        method: 'GET'\n    }), {\n        extractValue: true\n    });\n};\n\nexports.default = getCurrentDeviceActivity;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/getDeviceTime.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * Captures iOS device date and time (command works only for real devices).\n *\n * @see https://github.com/appium/appium-ios-driver/blob/master/lib/commands/general.js#L19-L35\n * @type mobile\n * @for ios\n *\n */\n\nvar getDeviceTime = function getDeviceTime() {\n  return this.requestHandler.create('/session/:sessionId/appium/device/system_time');\n};\n\nexports.default = getDeviceTime;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/getNetworkConnection.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _deepmerge = require('deepmerge');\n\nvar _deepmerge2 = _interopRequireDefault(_deepmerge);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getNetworkConnection = function getNetworkConnection() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/network_connection',\n        method: 'GET'\n    }).then(function (result) {\n        result = (0, _deepmerge2.default)(result, {\n            value: result.value,\n            inAirplaneMode: result.value === 1,\n            hasWifi: result.value === 2 || result.value === 6,\n            hasData: result.value === 4 || result.value === 6\n        });\n\n        return result;\n    });\n}; /**\n    *\n    * Get informations about the current network connection (Data/WIFI/Airplane). The actual\n    * server value will be a number (see `getNetworkConnection.js` example). However WebdriverIO\n    * additional properties to the response object to allow easier assertions (see\n    * `getNetworkConnectionEasier.js` example).\n    *\n    * <example>\n       :getNetworkConnection.js\n       it('should get network connection of Android device', function () {\n           var connection = browser.getNetworkConnection();\n           console.log(connection.value); // returns 6\n           console.log(connection.inAirplaneMode); // returns false\n           console.log(connection.hasWifi); // returns true\n           console.log(connection.hasData); // returns true\n       });\n    * </example>\n    *\n    * @type mobile\n    * @see https://github.com/appium/appium-android-driver/blob/master/lib/commands/network.js#L8-L22\n    * @for android\n    *\n    */\n\nexports.default = getNetworkConnection;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/gridProxyDetails.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar gridProxyDetails = function gridProxyDetails(proxyId) {\n    /*!\n     * parameter check\n     */\n    if (typeof proxyId !== 'string') {\n        throw new _ErrorHandler.ProtocolError('The gridProxyDetails command needs a proxyId to work with.');\n    }\n\n    return this.requestHandler.create({\n        path: '/proxy?id=' + proxyId,\n        method: 'GET',\n        requiresSession: false,\n        gridCommand: true\n    });\n}; /**\n    *\n    * Get the details of the Selenium Grid node running a session\n    *\n    * <example>\n       :grid.js\n       it('should get grid proxy details', function () {\n           var details = browser.gridProxyDetails(proxyId)\n           console.log(details);\n           // {\n           //     success: true,\n           //     msg: \"proxy found !\",\n           //     id: \"MacMiniA10\",\n           //     request: {\n           //         ...\n           //         configuration: {\n           //             ...\n           //         },\n           //         capabilities: [\n           //             {\n           //                 ...\n           //             }\n           //         ]\n           //     }\n           // }\n       });\n    * </example>\n    *\n    * @type grid\n    */\n\nexports.default = gridProxyDetails;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/gridTestSession.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar gridTestSession = function gridTestSession(sessionId) {\n    /*!\n     * parameter check\n     */\n    if (typeof sessionId !== 'string') {\n        if (!this.requestHandler.sessionID) {\n            throw new _ErrorHandler.ProtocolError('The gridTestSession command needs a sessionID to work with.');\n        }\n\n        sessionId = this.requestHandler.sessionID;\n    }\n\n    return this.requestHandler.create({\n        path: '/testsession?session=' + sessionId,\n        method: 'GET',\n        requiresSession: false,\n        gridCommand: true\n    });\n}; /**\n    *\n    * Get the details of the Selenium Grid node running a session\n    *\n    * <example>\n       :grid.js\n       it('should get current session information', function () {\n           var details = browser.gridTestSession();\n           console.log(details);\n           // {\n           //     msg: 'slot found !',\n           //     success: true,\n           //     session: '51797b64-43e1-4018-b7fb-f900d80a37a4',\n           //     internalKey: '413741ea-d48e-4346-844b-b1a90a69b3ed',\n           //     inactivityTime: 219,\n           //     proxyId: 'MacMiniA10’\n           // }\n       });\n    * </example>\n    *\n    * @type grid\n    */\n\nexports.default = gridTestSession;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/hideDeviceKeyboard.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Hide the keyboard.\n *\n * <example>\n    :hideKeyboard.js\n    it('should hide keyboard by tapping outside of it', function () {\n        browser.hideDeviceKeyboard(); // taps outside to hide keyboard per default\n        browser.hideDeviceKeyboard('tapOutside');\n    });\n\n    it('should hide keyboard by pressing done', function () {\n        browser.hideDeviceKeyboard('pressKey', 'Done');\n    });\n * </example>\n *\n * @param {String} strategy  desired strategy to close keyboard ('tapOutside' or 'pressKey')\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/appium-bindings.md#hide-keyboard-ios-only\n * @type mobile\n * @for ios, android\n *\n */\n\nvar hideDeviceKeyboard = function hideDeviceKeyboard() {\n    var strategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'tapOutside';\n    var key = arguments[1];\n\n    var args = { strategy: strategy };\n\n    if (key) {\n        args.key = key;\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/hide_keyboard',\n        method: 'POST'\n    }, args);\n};\n\nexports.default = hideDeviceKeyboard;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/imeActivate.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar imeActivate = function imeActivate(engine) {\n    if (typeof engine !== 'string') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with imeActivate protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/ime/activate', {\n        engine: engine\n    });\n}; /**\n    *\n    * Make an engines that is available (appears on the list returned by getAvailableEngines) active.\n    * After this call, the engine will be added to the list of engines loaded in the IME daemon and the\n    * input sent using sendKeys will be converted by the active engine. Note that this is a\n    * platform-independent method of activating IME (the platform-specific way being using keyboard shortcuts.\n    * (Not part of the official Webdriver specification)\n    *\n    * @param {String} engine   Name of the engine to activate.\n    *\n    * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidimeactive_engine\n    * @type protocol\n    *\n    */\n\nexports.default = imeActivate;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/imeActivated.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Indicates whether IME input is active at the moment (not if it's available.\n * (Not part of the official Webdriver specification)\n *\n * @returns {boolean}  true if IME input is available and currently active, false otherwise\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidimeactivated\n * @type protocol\n *\n */\n\nvar imeActivated = function imeActivated() {\n    return this.requestHandler.create('/session/:sessionId/ime/activated');\n};\n\nexports.default = imeActivated;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/imeActiveEngine.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * Get the name of the active IME engine. The name string is platform specific. (Not part of the\n * official Webdriver specification)\n *\n * @returns {String} engine   The name of the active IME engine.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidimeactive_engine\n * @type protocol\n *\n */\n\nvar imeActiveEngine = function imeActiveEngine() {\n  return this.requestHandler.create('/session/:sessionId/ime/active_engine');\n};\n\nexports.default = imeActiveEngine;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/imeAvailableEngines.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * List all available engines on the machine. To use an engine, it has to be present\n * in this list. (Not part of the official Webdriver specification)\n *\n * @returns {Object[]} engines   A list of available engines\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidimeavailable_engines\n * @type protocol\n *\n */\n\nvar imeAvailableEngines = function imeAvailableEngines() {\n  return this.requestHandler.create('/session/:sessionId/ime/available_engines');\n};\n\nexports.default = imeAvailableEngines;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/imeDeactivated.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * De-activates the currently-active IME engine. (Not part of the official Webdriver specification)\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidimedeactivate\n * @type protocol\n *\n */\n\nvar imeDeactivated = function imeDeactivated() {\n  return this.requestHandler.create('/session/:sessionId/ime/deactivated');\n};\n\nexports.default = imeDeactivated;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/init.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar _package = require('../../package.json');\n\nvar _package2 = _interopRequireDefault(_package);\n\nvar _deepmerge = require('deepmerge');\n\nvar _deepmerge2 = _interopRequireDefault(_deepmerge);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar init = function init() {\n    var desiredCapabilities = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var lastCommand = this.commandList.slice(-4, -3);\n    var isInternalCall = lastCommand.length && lastCommand[0].name === 'reload';\n\n    /**\n     * make sure we don't run this command within wdio test run\n     */\n    if (this.options.isWDIO && !isInternalCall) {\n        throw new _ErrorHandler.CommandError('Don\\'t call the \\'init\\' command when using the wdio test runner. ' + 'Your session will get initialised and closed automatically.');\n    }\n\n    /*!\n     * check if session was already established\n     */\n    if (this.requestHandler.sessionID) {\n        throw new _ErrorHandler.ProtocolError('Cannot init a new session, please end your current session first');\n    }\n\n    this.desiredCapabilities = (0, _deepmerge2.default)(this.desiredCapabilities, desiredCapabilities);\n    if (desiredCapabilities.sessionId) {\n        this.sessionId = desiredCapabilities.sessionId;\n    }\n\n    /**\n     * report library identity to server\n     * @see https://groups.google.com/forum/#!topic/selenium-developers/Zj1ikTz632o\n     */\n    this.desiredCapabilities = (0, _deepmerge2.default)(this.desiredCapabilities, {\n        requestOrigins: {\n            url: _package2.default.homepage,\n            version: _package2.default.version,\n            name: _package2.default.name\n        }\n    });\n\n    return this.requestHandler.create({\n        path: '/session',\n        method: 'POST'\n    }, {\n        desiredCapabilities: this.desiredCapabilities\n    });\n}; /**\n    *\n    * Create a new session. The server should attempt to create a session that most\n    * closely matches the desired and required capabilities. Required capabilities\n    * have higher priority than desired capabilities and must be set for the session\n    * to be created.\n    *\n    * @param {Object} [capabilities] An object describing the session's [desired capabilities](https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities).\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-new-session\n    * @type protocol\n    *\n    */\n\nexports.default = init;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/installApp.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar installApp = function installApp(appPath) {\n    if (typeof appPath !== 'string') {\n        throw new _ErrorHandler.ProtocolError('installApp command requires appPath parameter from type string');\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/install_app',\n        method: 'POST'\n    }, { appPath: appPath });\n}; /**\n    *\n    * Install an app on device.\n    *\n    * <example>\n       :installApp.js\n       it('should install app from file system', function () {\n           browser.installApp('/path/to/my/App.app');\n       });\n    * </example>\n    *\n    * @param {String} path  path to Android application\n    *\n    * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#install-app\n    * @type mobile\n    * @for android\n    *\n    */\n\nexports.default = installApp;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/isAppInstalled.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar isAppInstalled = function isAppInstalled(bundleId) {\n    if (typeof bundleId !== 'string') {\n        throw new _ErrorHandler.ProtocolError('isAppInstalled command requires bundleId parameter from type string');\n    }\n\n    return this.unify(this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/app_installed',\n        method: 'POST'\n    }, { bundleId: bundleId }));\n}; /**\n    *\n    * Check if an app is installed.\n    *\n    * <example>\n       :isAppInstalled.js\n       it('should check if app is installed', function () {\n           var isAppInstalled = browser.isAppInstalled('com.example.android.apis');\n           console.log(isAppInstalled); // outputs: true\n       });\n    * </example>\n    *\n    * @param {String} bundleId  ID of bundled app\n    *\n    * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#is-installed\n    * @type mobile\n    * @for android\n    *\n    */\n\nexports.default = isAppInstalled;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/isLocked.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Check whether the device is locked or not.\n *\n * <example>\n    :lockIt.js\n    it('demonstrate the lock and unlock command', function () {\n        browser.lock();\n        console.log(browser.isLocked()); // true\n\n        browser.unlock();\n        console.log(browser.isLocked()); // false\n    });\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nvar isLocked = function isLocked() {\n    return this.unify(this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/is_locked',\n        method: 'POST'\n    }));\n};\n\nexports.default = isLocked;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/keys.js":"'use strict';\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _constants = require('../helpers/constants');\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Send a sequence of key strokes to the active element. This command is similar to the\n * send keys command in every aspect except the implicit termination: The modifiers are\n * *not* released at the end of the call. Rather, the state of the modifier keys is kept\n * between calls, so mouse interactions can be performed while modifier keys are depressed.\n *\n * You can also use characters like \"Left arrow\" or \"Back space\". WebdriverIO will take\n * care of translating them into unicode characters. You’ll find all supported characters\n * [here](https://w3c.github.io/webdriver/webdriver-spec.html#keyboard-actions).\n * To do that, the value has to correspond to a key from the table.\n *\n * @param {String|String[]} value  The sequence of keys to type. An array must be provided. The server should flatten the array items to a single string to be typed.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidkeys\n * @type protocol\n * @deprecated\n *\n */\n\nmodule.exports = function keys(value) {\n    var key = [];\n\n    /**\n     * replace key with corresponding unicode character\n     */\n    if (typeof value === 'string') {\n        key = checkUnicode(value);\n    } else if (value instanceof Array) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var charSet = _step.value;\n\n                key = key.concat(checkUnicode(charSet));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    } else {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with keys protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/keys', {\n        'value': key\n    });\n};\n\n/*!\n * check for unicode character or split string into literals\n * @param  {String} value  text\n * @return {Array}         set of characters or unicode symbols\n */\nfunction checkUnicode(value) {\n    return _constants.UNICODE_CHARACTERS.hasOwnProperty(value) ? [_constants.UNICODE_CHARACTERS[value]] : value.split('');\n}\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/launch.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Launch the session for the desired capabilities. Note that this is the companion\n * to the `autoLaunch=false` capability. This is not for launching arbitrary\n * apps/activities --- for that use [`startActivity`](/api/mobile/startActivity.html).\n * This is for continuing the initialization (\"launch\") process if you have used\n * `autoLaunch=false`.\n *\n * <example>\n    :launch.js\n    it('should launch capability', function () {\n        browser.launch();\n    });\n * </example>\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#launch\n * @type mobile\n * @for ios, android\n *\n */\n\nvar launch = function launch() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/app/launch',\n        method: 'POST'\n    });\n};\n\nexports.default = launch;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/localStorage.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Protocol bindings for all localStorage operations. This command is not part of the official Webdriver\n * specification and might not be supported for your browser.\n *\n * <example>\n    :localStorage.js\n    it('should set/receive values from local storage', function () {\n        // get the storage item for the given key\n        var values = browser.localStorage('GET', someKey);\n\n        // get all key/value pairs of the storage\n        var storage = browser.localStorage();\n\n        // set the storage item for the given key\n        browser.localStorage('POST', {key: someKey, value: someValue});\n\n        // remove the storage item for the given key\n        browser.localStorage('DELETE', 'someKey');\n\n        // clear the storage\n        browser.localStorage('DELETE');\n    });\n * </example>\n *\n * @param {String}         method  method for storage operation\n * @param {Object|String=} args    operation arguments\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidlocal_storage\n * @type protocol\n *\n */\n\nvar localStorage = function localStorage() {\n    var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'GET';\n    var args = arguments[1];\n\n    /**\n     * set default options\n     */\n    var data = {};\n    var requestOptions = {\n        path: '/session/:sessionId/local_storage',\n        method: method.toUpperCase()\n    };\n\n    if (requestOptions.method === 'POST' && (typeof args === 'undefined' ? 'undefined' : (0, _typeof3.default)(args)) === 'object') {\n        data = {\n            key: args.key,\n            value: args.value\n        };\n    }\n\n    /**\n     * add/delete specific key\n     */\n    if (requestOptions.method === 'DELETE' && typeof args === 'string' || requestOptions.method === 'GET' && typeof args === 'string') {\n        requestOptions.path += '/key/' + args;\n    }\n\n    return this.requestHandler.create(requestOptions, data);\n};\n\nexports.default = localStorage;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/localStorageSize.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * protocol bindings to get local_storage size. (Not part of the official Webdriver specification)\n *\n * @returns {Number} The number of items in the storage.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidlocal_storagesize\n * @type protocol\n *\n */\n\nvar localStorageSize = function localStorageSize() {\n  return this.requestHandler.create('/session/:sessionId/local_storage/size');\n};\n\nexports.default = localStorageSize;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/location.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Protocol bindings for all geolocation operations. (Not part of the official Webdriver specification).\n *\n * <example>\n    :location.js\n    it('should set geo location for device', function () {\n        // set the current geo location\n        client.location({latitude: 121.21, longitude: 11.56, altitude: 94.23})\n\n        // get the current geo location\n        client.location().then(function(res) { ... });\n    });\n * </example>\n *\n * @param {Object} location  the new location\n * @returns {Object}         the current geo location\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidlocation\n * @type protocol\n *\n */\n\nvar location = function location(l) {\n    var location = null;\n\n    if ((typeof l === 'undefined' ? 'undefined' : (0, _typeof3.default)(l)) === 'object' && l.latitude !== undefined && l.longitude !== undefined && l.altitude !== undefined) {\n        location = l;\n    }\n\n    /**\n     * get geo location\n     */\n    if (!location) {\n        return this.requestHandler.create('/session/:sessionId/location');\n    }\n\n    /**\n     * set geo location\n     * @type {[type]}\n     */\n    return this.requestHandler.create('/session/:sessionId/location', { location: location });\n};\n\nexports.default = location;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/lock.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Lock the device.\n *\n * <example>\n    :lockIt.js\n    it('demonstrate the lock and unlock command', function () {\n        browser.lock();\n        console.log(browser.isLocked()); // true\n\n        browser.unlock();\n        console.log(browser.isLocked()); // false\n    });\n * </example>\n *\n * @param {Number} seconds  wait in seconds until lock screen\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#lock\n * @type mobile\n * @for android\n *\n */\n\nvar lock = function lock() {\n    var seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/lock',\n        method: 'POST'\n    }, { seconds: seconds });\n};\n\nexports.default = lock;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/log.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logTypes = void 0; /**\n                        *\n                        * Get the log for a given log type. Log buffer is reset after each request.\n                        * (Not part of the official Webdriver specification).\n                        *\n                        * @param {String} type  The [log type](https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#log-type). This must be provided.\n                        * @returns {Object[]} The list of [log entries](https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#log-entry-json-object)\n                        *\n                        * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidlog\n                        * @type protocol\n                        *\n                        */\n\nfunction getLogTypes() {\n    return logTypes ? _promise2.default.resolve(logTypes) : this.logTypes().then(function (types) {\n        logTypes = types;\n        return logTypes;\n    });\n}\n\nvar log = function log(type) {\n    var _this = this;\n\n    if (typeof type !== 'string' || type === '') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with log command');\n    }\n\n    return getLogTypes.call(this).then(function (types) {\n        if (types.value.indexOf(type) === -1) {\n            throw new _ErrorHandler.ProtocolError('this log type (\"' + type + '\") is not available for this browser/device');\n        }\n\n        return _this.requestHandler.create('/session/:sessionId/log', {\n            type: type\n        });\n    });\n};\n\nexports.default = log;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/logTypes.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Get available log types. This command is not part of the official Webdriver specification. Therefor the\n * result can vary depending on the capability you are runnint the test.\n *\n * <example>\n    :logTypes.js\n    it('demonstrate all available log types', function () {\n        var logTypes = browser.logTypes();\n        console.log(logTypes); // outputs: ['browser', 'driver', 'client', 'server']\n    });\n * </example>\n *\n * @returns {Strings[]}  The list of available [log types](https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#log-type)\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidlogtypes\n * @type protocol\n *\n */\n\nvar logTypes = function logTypes() {\n    return this.requestHandler.create('/session/:sessionId/log/types');\n};\n\nexports.default = logTypes;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/longPressKeycode.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Press a particular key code on the device.\n *\n * <example>\n    :longPressKeycode.js\n    // press the home button long\n    browser.longPressKeycode(3)\n * </example>\n *\n * @param {String} keycode    key code to press\n * @param {String} metastate  meta state to be activated\n *\n * @see http://developer.android.com/reference/android/view/KeyEvent.html\n * @type mobile\n * @for android\n *\n */\n\nvar longPressKeycode = function longPressKeycode(keycode, metastate) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/long_press_keycode',\n        method: 'POST'\n    }, { keycode: keycode, metastate: metastate });\n};\n\nexports.default = longPressKeycode;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/moveTo.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar _eventSimulator = require('../scripts/eventSimulator');\n\nvar _eventSimulator2 = _interopRequireDefault(_eventSimulator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Move the mouse by an offset of the specificed element. If no element is specified,\n * the move is relative to the current mouse cursor. If an element is provided but\n * no offset, the mouse will be moved to the center of the element. If the element\n * is not visible, it will be scrolled into view.\n *\n * (Not part of the official Webdriver specification).\n *\n * @param {String} element  Opaque ID assigned to the element to move to, as described in the WebElement JSON Object. If not specified or is null, the offset is relative to current position of the mouse.\n * @param {Number} xoffset  X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.\n * @param {Number} yoffset  Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidmoveto\n * @type protocol\n *\n */\n\nvar moveTo = function moveTo(element, xoffset, yoffset) {\n    var data = {};\n\n    if (typeof element === 'string') {\n        data.element = element;\n    }\n\n    if (typeof xoffset === 'number') {\n        data.xoffset = xoffset;\n    }\n\n    if (typeof yoffset === 'number') {\n        data.yoffset = yoffset;\n    }\n\n    /**\n     * if no attribute is set, throw error\n     */\n    if ((0, _keys2.default)(data).length === 0) {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with moveTo command');\n    }\n\n    /**\n     * simulate event in safari\n     */\n    if (this.desiredCapabilities.browserName === 'safari') {\n        xoffset = xoffset || 0;\n        yoffset = yoffset || 0;\n\n        var target = { x: xoffset, y: yoffset };\n        return this.elementIdLocation(element).then(function (res) {\n            target = { x: res.value.x + xoffset, y: res.value.y + yoffset };\n        }).execute(_eventSimulator2.default).execute(function (elem, x, y) {\n            return window._wdio_simulate(elem, 'mousemove', x, y);\n        }, { ELEMENT: element }, target.x, target.y);\n    }\n\n    return this.requestHandler.create('/session/:sessionId/moveto', data);\n};\n\nexports.default = moveTo;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/scripts/eventSimulator.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * registers helper method to window scope to simulate html and mouse events\n */\nvar eventSimulator = function eventSimulator() {\n    window._wdio_simulate = function (f, c, xto, yto, button) {\n        var b = null;\n        var a = null;\n        var btnCode = 0;\n\n        for (b in eventMatchers) {\n            if (eventMatchers[b].test(c)) {\n                a = b;\n                break;\n            }\n        }\n\n        if (!a) {\n            return false;\n        }\n\n        switch (button) {\n            case 'middle':\n                btnCode = 1;\n                break;\n            case 'right':\n                btnCode = 2;\n                break;\n        }\n\n        document.createEvent ? (b = document.createEvent(a), a === 'HTMLEvents' ? b.initEvent(c, !0, !0) : b.initMouseEvent(c, !0, !0, document.defaultView, 0, xto, yto, xto, yto, !1, !1, !1, !1, btnCode, null), f.dispatchEvent(b)) : (a = document.createEventObject(), a.detail = 0, a.screenX = xto, a.screenY = yto, a.clientX = xto, a.clientY = yto, a.ctrlKey = !1, a.altKey = !1, a.shiftKey = !1, a.metaKey = !1, a.button = 1, f.fireEvent('on' + c, a));\n        return true;\n    };\n    var eventMatchers = {\n        HTMLEvents: /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,\n        MouseEvents: /^(?:click|dblclick|mouse(?:down|up|over|move|out))$/\n    };\n};\n\nexports.default = eventSimulator;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/openNotifications.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Open the notifications pane on the device.\n *\n * <example>\n    :openNotificationsSync.js\n    browser.openNotifications();\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nvar openNotifications = function openNotifications() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/open_notifications',\n        method: 'POST'\n    });\n};\n\nexports.default = openNotifications;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/orientation.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Protocol bindings for all mobile orientation operations. (Not part of the official Webdriver specification).\n *\n * <example>\n    :orientation.js\n    it('should set/get orientation using protocol command', function () {\n        // set the browser orientation. The orientation should be\n        // specified as defined in ScreenOrientation: {LANDSCAPE|PORTRAIT}\n        browser.orientation('landscape');\n\n        // get the current browser orientation. The server should\n        // return a valid orientation value as defined in\n        // screen orientation: {LANDSCAPE|PORTRAIT}\n        var orientation = browser.orientation();\n        console.log(orientation.value); // outputs: \"landscape\"\n    });\n * </example>\n *\n * @param   {String=} deviceOrientation  The new browser orientation as defined in ScreenOrientation: `{LANDSCAPE|PORTRAIT}`\n * @returns {String}                     device orientation (`LANDSCAPE/PORTRAIT`)\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidorientation\n * @type mobile\n * @for android, ios\n *\n */\n\nvar orientation = function orientation(deviceOrientation) {\n    var data = {};\n\n    if (typeof deviceOrientation === 'string') {\n        data.orientation = deviceOrientation.toUpperCase();\n    }\n\n    return this.requestHandler.create('/session/:sessionId/orientation', data);\n};\n\nexports.default = orientation;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/performMultiAction.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Perform multi touch action\n *\n * @param {Object} touchAttr contains attributes of touch gesture (e.g. `element`, `x` and `y`)\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/appium-bindings.md#touchaction--multitouchaction\n * @type mobile\n * @for android, ios\n *\n */\n\nvar performMultiAction = function performMultiAction() {\n    var multiTouchAction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/touch/multi/perform',\n        method: 'POST'\n    }, multiTouchAction);\n};\n\nexports.default = performMultiAction;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/performTouchAction.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar performTouchAction = function performTouchAction(action) {\n    if ((typeof action === 'undefined' ? 'undefined' : (0, _typeof3.default)(action)) !== 'object') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with performTouchAction protocol command');\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/touch/perform',\n        method: 'POST'\n    }, action);\n}; /**\n    *\n    * Perform touch action\n    *\n    * @param {Object} touchAttr contains attributes of touch gesture (e.g. `element`, `x` and `y`)\n    *\n    * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#touchaction--multitouchaction\n    * @type mobile\n    * @for android, ios\n    *\n    */\n\nexports.default = performTouchAction;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/pressKeycode.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Press a particular key code on the device.\n *\n * <example>\n    :pressKeycode.js\n    // press the home button\n    browser.pressKeycode(3)\n * </example>\n *\n * @param {String} keycode    key code to press\n * @param {String} metastate  meta state to be activated\n *\n * @see http://developer.android.com/reference/android/view/KeyEvent.html\n * @type mobile\n * @for android\n *\n */\n\nvar pressKeycode = function pressKeycode(keycode, metastate) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/press_keycode',\n        method: 'POST'\n    }, { keycode: keycode, metastate: metastate });\n};\n\nexports.default = pressKeycode;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/pullFile.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar pullFile = function pullFile(path) {\n    if (typeof path !== 'string') {\n        throw new _ErrorHandler.ProtocolError('pullFile requires a parameter (path to file) from type string');\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/pull_file',\n        method: 'POST'\n    }, { path: path });\n}; /**\n    *\n    * Pulls a file from the device.\n    *\n    * <example>\n       :pullFile.js\n       browser.pullFile('/data/local/tmp/file.txt')\n    * </example>\n    *\n    * @param {String} path  device path to file\n    *\n    * @see  https://github.com/appium/appium/blob/master/docs/en/appium-bindings.md#pull-file\n    * @type mobile\n    * @for ios, android\n    *\n    */\n\nexports.default = pullFile;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/pullFolder.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar pullFolder = function pullFolder(path) {\n    if (typeof path !== 'string') {\n        throw new _ErrorHandler.ProtocolError('pullFolder requires a parameter (path to folder) from type string');\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/pull_folder',\n        method: 'POST'\n    }, { path: path });\n}; /**\n    *\n    * Pulls a folder from the device's file system.\n    *\n    * <example>\n       :pullFolder.js\n       browser.pullFolder('/data/local/tmp')\n    * </example>\n    *\n    * @param {String} path  device path to folder\n    *\n    * @type mobile\n    * @for ios, android\n    *\n    */\n\nexports.default = pullFolder;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/pushFile.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar pushFile = function pushFile(path, base64Data) {\n    if (typeof path !== 'string' || typeof base64Data !== 'string') {\n        throw new _ErrorHandler.ProtocolError('pushFile requires two parameters (path, base64Data) from type string');\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/push_file',\n        method: 'POST'\n    }, {\n        path: path,\n        data: base64Data\n    });\n}; /**\n    *\n    * Pushes a file to the device.\n    *\n    * <example>\n       :pushFile.js\n       var data = new Buffer(\"Hello World\").toString('base64'))\n       browser.pushFile('/data/local/tmp/file.txt', data)\n    * </example>\n    *\n    * @param {String} path  local path to file\n    *\n    * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#push-file\n    * @type mobile\n    * @for ios, android\n    *\n    */\n\nexports.default = pushFile;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/refresh.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Refresh the current page.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-refresh\n * @type protocol\n *\n */\n\nvar refresh = function refresh() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/refresh',\n        method: 'POST'\n    });\n};\n\nexports.default = refresh;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/removeApp.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar removeApp = function removeApp(bundleId) {\n    if (typeof bundleId !== 'string') {\n        throw new _ErrorHandler.ProtocolError('removeApp command requires bundleId parameter from type string');\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/remove_app',\n        method: 'POST'\n    }, { bundleId: bundleId });\n}; /**\n    *\n    * Remove an app from the device.\n    *\n    * <example>\n       :removeApp.js\n       browser.removeApp('com.example.android.apis');\n    * </example>\n    *\n    * @param {String} bundleId  bundle ID of application\n    *\n    * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#remove-app\n    * @type mobile\n    * @for android\n    *\n    */\n\nexports.default = removeApp;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/reset.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Reset the device by clearing the device un- and reinstalling app package (if existing).\n *\n * <example>\n    :resetApp.js\n    browser.reset()\n * </example>\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#reset\n * @type mobile\n * @for android\n *\n */\n\nvar reset = function reset() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/app/reset',\n        method: 'POST'\n    });\n};\n\nexports.default = reset;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/rotate.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Perform a rotation gesture centered on the specified element.\n *\n * <example>\n    :rotate.js\n    browser.rotate(114, 198);\n * </example>\n *\n * @param {Number} x          x offset to use for the center of the rotate gesture (default 0)\n * @param {Number} y          y offset to use for the center of the rotate gesture (default 0)\n * @param {Number} duration   The length of hold time for the specified gesture, in seconds. (default 1)\n * @param {Number} radius     The distance in points from the center to the edge of the circular path.\n * @param {Number} rotation   The length of rotation in radians. (default pi (π))\n * @param {Number} touchCount The number of touches to use in the specified gesture. (Effectively, the number of fingers a user would use to make the specified gesture.) Valid values are 1 to 5. (default 2)\n *\n * @see https://developer.apple.com/library/ios/documentation/ToolsLanguages/Reference/UIAElementClassReference/#//apple_ref/javascript/instm/UIAElement/rotateWithOptions\n * @type mobile\n * @for ios\n *\n */\n\nvar rotate = function rotate() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var radius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var rotation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.PI;\n    var touchCount = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2;\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/rotate',\n        method: 'POST'\n    }, { x: x, y: y, duration: duration, radius: radius, rotation: rotation, touchCount: touchCount });\n};\n\nexports.default = rotate;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/screenshot.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * Take a screenshot of the current viewport. To get the screenshot of the whole page\n * use the action command `saveScreenshot`\n *\n * @returns {String} screenshot   The screenshot as a base64 encoded PNG.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-take-screenshot\n * @type protocol\n *\n */\n\nvar screenshot = function screenshot() {\n  return this.requestHandler.create('/session/:sessionId/screenshot');\n};\n\nexports.default = screenshot;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/session.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar session = function session() {\n    var _this = this;\n\n    var doWhat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'GET';\n    var sessionId = arguments[1];\n\n    /*!\n     * parameter check\n     */\n    if (typeof sessionId !== 'string') {\n        /*!\n         * if session was already closed return `undefined`\n         * ToDo or maybe throw an error\n         */\n        if (!this.requestHandler.sessionID) {\n            return null;\n        }\n\n        sessionId = this.requestHandler.sessionID;\n    }\n\n    doWhat = doWhat.toUpperCase();\n\n    /*!\n     * get session\n     */\n    if (doWhat === 'GET') {\n        return this.requestHandler.create({\n            path: '/session/' + sessionId,\n            method: 'GET',\n            requiresSession: false\n        });\n    }\n\n    var lastCommand = this.commandList.slice(-3, -2);\n    var isInternalCall = lastCommand.length && lastCommand[0].name === 'reload';\n\n    /*!\n     * delete session\n     */\n    if (doWhat === 'DELETE') {\n        /**\n         * make sure we don't run this command within wdio test run\n         */\n        if (this.options.isWDIO && !isInternalCall) {\n            throw new _ErrorHandler.CommandError('Don\\'t end the session manually. This will be done automatically.');\n        }\n\n        this.emit('end', {\n            sessionId: this.requestHandler.sessionID\n        });\n\n        return this.requestHandler.create({\n            path: '/session/' + sessionId,\n            method: 'DELETE',\n            requiresSession: false\n        }).then(function (res) {\n            /*!\n             * delete sessionID in RequestHandler\n             */\n            _this.requestHandler.sessionID = null;\n            return res;\n        });\n    }\n\n    throw new _ErrorHandler.ProtocolError('The session command need either a \\'delete\\' or \\'get\\'attribute to know what to do. example: client.session(\\'get\\').then(callback) to get the capabilities of the session.');\n}; /**\n    *\n    * Protocol bindings for all session operations. In case you are looking for\n    * `[POST] session` to initialise a session on the server, take a look at `/lib/protocol/init`.\n    *\n    * <example>\n       :session.js\n       it('should get/delete current session using the protocol command', function () {\n           // retrieve the resolved capabilities of the specified session\n           var caps = browser.session();\n           console.log(caps); // outputs: { browserName: \"...\", ... }\n   \n           // you can also just call (see http://webdriver.io/guide/testrunner/browserobject.html)\n           console.log(browser.desiredCapabilities);\n   \n           // delete the session (equivalent to `end` action command)\n           // Note: the wdio testrunner doesn't allow to call this command manually. It will close the session\n           // when the test has ended.\n           browser.session('delete'); // throws an error\n       });\n    * </example>\n    *\n    * @param {String=} doWhat     session operation (`get` (default)|`delete`)\n    * @param {String}  sessionId  session id to operate on\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-delete-session\n    * @type protocol\n    *\n    */\n\nexports.default = session;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/sessionStorage.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Protocol bindings for all sessionStorage operations. This command is not part of the official Webdriver\n * specification. Therefor it might not be supported in your browser.\n *\n * <example>\n    :sessionStorage.js\n    it('should set/receive values from session storage', function () {\n        // get the storage item for the given key\n        var values = browser.sessionStorage('GET', someKey);\n\n        // get all key/value pairs of the storage\n        var storage = browser.sessionStorage();\n\n        // set the storage item for the given key\n        browser.sessionStorage('POST', {key: someKey, value: someValue});\n\n        // remove the storage item for the given key\n        browser.sessionStorage('DELETE', 'someKey');\n\n        // clear the storage\n        browser.sessionStorage('DELETE');\n    });\n * </example>\n *\n * @param {String=}        method  method for storage operation\n * @param {Object|String=} args    operation arguments\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidsession_storage\n * @type protocol\n *\n */\n\nvar sessionStorage = function sessionStorage() {\n    var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'GET';\n    var args = arguments[1];\n\n    /**\n     * set default options\n     */\n    var data = {};\n    var requestOptions = {\n        path: '/session/:sessionId/session_storage',\n        method: method.toUpperCase()\n    };\n\n    if (requestOptions.method === 'POST' && (typeof args === 'undefined' ? 'undefined' : (0, _typeof3.default)(args)) === 'object') {\n        data = {\n            key: args.key,\n            value: args.value\n        };\n    }\n\n    /**\n     * add/delete specific key\n     */\n    if (requestOptions.method === 'DELETE' && typeof args === 'string' || requestOptions.method === 'GET' && typeof args === 'string') {\n        requestOptions.path += '/key/' + args;\n    }\n\n    return this.requestHandler.create(requestOptions, data);\n};\n\nexports.default = sessionStorage;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/sessionStorageSize.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * Protocol bindings to get the session storage size. (Not part of the official Webdriver specification).\n *\n * @returns {Number} The number of items in the storage.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidsession_storagesize\n * @type protocol\n *\n */\n\nvar sessionStorageSize = function sessionStorageSize() {\n  return this.requestHandler.create('/session/:sessionId/session_storage/size');\n};\n\nexports.default = sessionStorageSize;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/sessions.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Returns a list of the currently active sessions. Each session will be returned\n * as a list of JSON objects with the following keys:\n *\n * | Key          | Type   | Description    |\n * |--------------|--------|----------------|\n * | id           | string | The session ID |\n * | capabilities | object | An object describing the [session capabilities](https://w3c.github.io/webdriver/webdriver-spec.html#capabilities) |\n *\n * (Not part of the official Webdriver specification).\n *\n * @returns {Object[]} a list of the currently active sessions\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessions\n * @type protocol\n * @depcrecated\n *\n */\n\nvar sessions = function sessions() {\n    return this.requestHandler.create({\n        path: '/sessions',\n        method: 'GET',\n        requiresSession: false\n    });\n};\n\nexports.default = sessions;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/setImmediateValue.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar setImmediateValue = function setImmediateValue(id, value) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('setImmediateValue requires two parameters (id, value) from type string');\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/element/' + id + '/value',\n        method: 'POST'\n    }, { value: value });\n}; /**\n    *\n    * Set immediate value in app.\n    *\n    * <example>\n       :setImmediateValue.js\n       browser.setImmediateValue(el, 'foo')\n    * </example>\n    *\n    * @param {String} ID              ID of a WebElement JSON object to route the command to\n    * @param {String|String[]} value  The sequence of keys to type. An array must be provided. The server should flatten the array items to a single string to be typed.\n    *\n    * @type mobile\n    * @for ios\n    *\n    */\n\nexports.default = setImmediateValue;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/setNetworkConnection.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar setNetworkConnection = function setNetworkConnection(type) {\n    if (typeof type !== 'number') {\n        throw new _ErrorHandler.ProtocolError('Number or type of arguments don\\'t agree with setNetworkConnection protocol command.');\n    } else if (type > 6 || type < 0) {\n        throw new _ErrorHandler.ProtocolError('Invalid value for network connection.');\n    } else if (type === 3 || type === 5) {\n        throw new _ErrorHandler.ProtocolError('You can\\'t have wifi or data enabled while in airplane mode.');\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/network_connection',\n        method: 'POST'\n    }, {\n        parameters: {\n            type: type\n        }\n    });\n}; /**\n    *\n    * Set network connection.<br>\n    * Types:<br>\n    * \t- airplane mode\n    * \t- wifi on\n    * \t- data on\n    *\n    * These properties behave like a bitmask so if you set the network connection to 0\n    * everything will get turned off. However if you for example set the network connection\n    * to 4 it will disable the airplane mode and turn off the wifi so that only data will\n    * be enabled. WebdriverIO provides a simplified interface to set these values without\n    * calculating bitmasks.\n    *\n    * Note: if you have airplane mode enabled you can't have wifi or data be enabled too\n    * (for obvious reasons)\n    *\n    * <example>\n       :setNetworkConnection.js\n       it('should emulate network connection', function () {\n           browser.setNetworkConnection(0) // airplane mode off, wifi off, data off\n           browser.setNetworkConnection(1) // airplane mode on, wifi off, data off\n           browser.setNetworkConnection(2) // airplane mode off, wifi on, data off\n           browser.setNetworkConnection(4) // airplane mode off, wifi off, data on\n           browser.setNetworkConnection(6) // airplane mode off, wifi on, data on\n       });\n    * </example>\n    *\n    * @type mobile\n    * @for selendroid\n    * @see https://github.com/appium/appium-android-driver/blob/master/lib/commands/network.js#L24-L46\n    *\n    */\n\nexports.default = setNetworkConnection;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/settings.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Either retrieve a JSON hash of all the currently specified settings or update the current setting on the device.\n *\n * <example>\n    :settings.js\n    it('should update/get settinsg on the device', function () {\n        // update setting on the device\n        browser.settings({ cyberdelia: 'open' });\n\n        // get current settings\n        var settings = browser.settings()\n        console.log(settings.cyberdelia); // returns 'open'\n    });\n * </example>\n *\n * @type mobile\n * @param {Object=}  settings  key/value pairs defining settings on the device\n * @returns {Object} current settings (only if method was called without parameters)\n *\n */\n\nvar settings = function settings(_settings) {\n    var settingsRoute = '/session/:sessionId/appium/settings';\n\n    /**\n     * get current settings\n     */\n    if (!_settings) {\n        return this.requestHandler.create(settingsRoute);\n    }\n\n    return this.requestHandler.create({\n        path: settingsRoute,\n        method: 'POST'\n    }, { settings: _settings });\n};\n\nexports.default = settings;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/shake.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Perform a shake action on the device.\n *\n * <example>\n    :shakeIt.js\n    browser.shake()\n * </example>\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#shake\n * @type mobile\n * @for ios\n *\n */\n\nvar shake = function shake() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/shake',\n        method: 'POST'\n    });\n};\n\nexports.default = shake;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/source.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * Get the current page source.\n *\n * @returns {String} The current page source.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-page-source\n * @type protocol\n *\n */\n\nvar source = function source() {\n  return this.requestHandler.create('/session/:sessionId/source');\n};\n\nexports.default = source;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/startActivity.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar startActivity = function startActivity(appPackage, appActivity) {\n    if (typeof appPackage !== 'string' || typeof appActivity !== 'string') {\n        throw new _ErrorHandler.ProtocolError('startActivity command requires two parameter (appPackage, appActivity) from type string');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/appium/device/start_activity', { appPackage: appPackage, appActivity: appActivity });\n}; /**\n    *\n    * Start an arbitrary Android activity during a session.\n    *\n    * <example>\n       :startActivity.js\n       browser.startActivity({\n           appPackage: 'io.appium.android.apis',\n           appActivity: '.view.DragAndDropDemo'\n       });\n    * </example>\n    *\n    * @param {String} appPackage   name of app\n    * @param {String} appActivity  name of activity\n    * @type mobile\n    * @for android\n    *\n    */\n\nexports.default = startActivity;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/status.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Query the server's current status. The server should respond with a general\n * \"HTTP 200 OK\" response if it is alive and accepting commands. The response\n * body should be a JSON object describing the state of the server. All server\n * implementations should return two basic objects describing the server's\n * current platform and when the server was built. All fields are optional;\n * if omitted, the client should assume the value is uknown. Furthermore,\n * server implementations may include additional fields not listed here.\n *\n * | Key            | Type   | Description |\n * | -------------- | ------ | ----------- |\n * | build.version  | string | A generic release label (i.e. \"2.0rc3\") |\n * | build.revision | string | The revision of the local source control client from which the server was built |\n * | build.time     | string | A timestamp from when the server was built |\n * | os.arch        | string | The current system architecture |\n * | os.name        | string | The name of the operating system the server is currently running on: \"windows\", \"linux\", etc. |\n * | os.version     | string | The operating system version |\n *\n * (Not part of the official Webdriver specification).\n *\n * @returns {Object} An object describing the general status of the server\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#status\n * @type protocol\n *\n */\n\nvar status = function status() {\n    return this.requestHandler.create({\n        path: '/status',\n        method: 'GET',\n        requiresSession: false\n    });\n};\n\nexports.default = status;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/strings.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Returns application strings of the application in a specific language.\n *\n * <example>\n    :stringsAsync.js\n    it('should return app strings for Android application', function () {\n        var appStrings = browser.strings();\n        console.log(appStrings); // outputs all app strings\n\n        var russianAppStrings = browser.strings('ru')\n        console.log(russianAppStrings); // outputs all russian app strings (if available)\n    });\n * </example>\n *\n * @param {String} language  if set it returns app strings only for that specific language\n *\n * @see https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#app-strings\n * @type mobile\n * @for android\n *\n */\n\nvar strings = function strings(language) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/app/strings',\n        method: 'POST'\n    }, { language: language });\n};\n\nexports.default = strings;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/submit.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar submit = function submit(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with submit protocol command');\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/element/' + id + '/submit',\n        method: 'POST'\n    });\n}; /**\n    *\n    * Submit a FORM element. The submit command may also be applied to any element\n    * that is a descendant of a FORM element. (Not part of the official Webdriver specification).\n    *\n    * @param {String} ID ID of a `<form />` WebElement JSON object to route the command to\n    *\n    * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidsubmit\n    * @type protocol\n    *\n    */\n\nexports.default = submit;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/timeouts.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar timeouts = function timeouts(type, ms) {\n    /*!\n     * parameter check\n     */\n    if (typeof type !== 'string' || typeof ms !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with timeouts protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/timeouts', {\n        type: type,\n        ms: ms\n    });\n}; /**\n    * Configure the amount of time that a particular type of operation can execute\n    * for before they are aborted and a |Timeout| error is returned to the client.\n    *\n    * @param {String} type The type of operation to set the timeout for. Valid values are:<br>- **script** for script timeouts<br>- **implicit** for modifying the implicit wait timeout<br>- **page load** for setting a page load timeout.\n    * @param {Number} ms   The amount of time, in milliseconds, that time-limited commands are permitted to run.\n    *\n    * @see https://w3c.github.io/webdriver/webdriver-spec.html#dfn-set-timeout\n    * @type protocol\n    *\n    */\n\nexports.default = timeouts;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/timeoutsAsyncScript.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar timeoutsAsyncScript = function timeoutsAsyncScript(ms) {\n    /*!\n     * parameter check\n     */\n    if (typeof ms !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with timeoutsAsyncScript protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/timeouts/async_script', {\n        ms: ms\n    });\n}; /**\n    *\n    * Set the amount of time, in milliseconds, that asynchronous scripts executed\n    * by /session/:sessionId/execute_async are permitted to run before they are\n    * aborted and a |Timeout| error is returned to the client.\n    *\n    * Depcrecated! Please use the `timeouts` command instead.\n    *\n    * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtimeoutsasync_script\n    *\n    * @param {Number} ms   The amount of time, in milliseconds, that time-limited commands are permitted to run.\n    * @type protocol\n    * @deprecated\n    *\n    */\n\nexports.default = timeoutsAsyncScript;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/timeoutsImplicitWait.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar timeoutsImplicitWait = function timeoutsImplicitWait(ms) {\n    /*!\n     * parameter check\n     */\n    if (typeof ms !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with timeoutsImplicitWait protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/timeouts/implicit_wait', {\n        ms: ms\n    });\n}; /**\n    *\n    * Set the amount of time the driver should wait when searching for elements. When searching for a single element,\n    * the driver should poll the page until an element is found or the timeout expires, whichever occurs first. When\n    * searching for multiple elements, the driver should poll the page until at least one element is found or the\n    * timeout expires, at which point it should return an empty list.\n    *\n    * If this command is never sent, the driver should default to an implicit wait of 0ms.\n    *\n    * Depcrecated! Please use the `timeouts` command instead.\n    *\n    * @param {Number} ms   The amount of time to wait, in milliseconds. This value has a lower bound of 0.\n    *\n    * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtimeoutsimplicit_wait\n    * @type protocol\n    *\n    */\n\nexports.default = timeoutsImplicitWait;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/title.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Gets an object containing the current page title.\n *\n * <example>\n    :title.js\n    it('should return title using protocol command', function () {\n        browser.url('http://webdriver.io');\n\n        var title = browser.title();\n        console.log(title);\n        // outputs the following:\n        //  {\n        //      state: 'success',\n        //      sessionId: '0c49951c-eb15-4053-96af-c1ebc79fb8b7',\n        //      hCode: 388233301,\n        //      value: 'WebdriverIO - Selenium 2.0 javascript bindings for nodejs',\n        //      class: 'org.openqa.selenium.remote.Response',\n        //      status: 0\n        //  }\n    });\n * </example>\n *\n * @returns {String} The current page title.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-title\n * @type protocol\n *\n */\n\nvar title = function title() {\n    return this.requestHandler.create('/session/:sessionId/title');\n};\n\nexports.default = title;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/toggleAirplaneMode.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Switch the state (enabled/disabled) of airplane mode.\n *\n * <example>\n    :toggleAirplaneMode.js\n    browser.toggleAirplaneMode()\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nvar toggleAirplaneMode = function toggleAirplaneMode() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/toggle_airplane_mode',\n        method: 'POST'\n    });\n};\n\nexports.default = toggleAirplaneMode;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/toggleData.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Switch the state (enabled/disabled) of data service.\n *\n * <example>\n    :toggleData.js\n    browser.toggleData()\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nvar toggleData = function toggleData() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/toggle_data',\n        method: 'POST'\n    });\n};\n\nexports.default = toggleData;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/toggleLocationServices.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Switch the state (enabled/disabled) of the location service.\n *\n * <example>\n    :toggleLocationServices.js\n    browser.toggleLocationServices();\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nvar toggleLocationServices = function toggleLocationServices() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/toggle_location_services',\n        method: 'POST'\n    });\n};\n\nexports.default = toggleLocationServices;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/toggleWiFi.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Switch the state (enabled/disabled) of the wifi service.\n *\n * <example>\n    :toggleWiFi.js\n    client.toggleWiFi()\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nvar toggleWiFi = function toggleWiFi() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/toggle_wifi',\n        method: 'POST'\n    });\n};\n\nexports.default = toggleWiFi;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/touchClick.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar touchClick = function touchClick(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with elementIdCssProperty protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/click', {\n        element: id.toString()\n    });\n}; /**\n    *\n    * Single tap on the touch enabled device. Depcrecated! Please use `touchPerform` instead.\n    *\n    * @param {String} ID ID of a WebElement JSON object to route the command to\n    *\n    * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchclick\n    * @type protocol\n    * @for android\n    * @depcrecated\n    *\n    */\n\nexports.default = touchClick;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/touchDown.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar touchDown = function touchDown(x, y) {\n    if (typeof x !== 'number' || typeof y !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with touchDown command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/down', {\n        x: x,\n        y: y\n    });\n}; /**\n    *\n    * Finger down on the screen. Depcrecated! Please use `touchPerform` instead.\n    *\n    * @param {Number} x  X coordinate on the screen\n    * @param {Number} y  Y coordinate on the screen\n    *\n    * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchdown\n    * @type protocol\n    *\n    */\n\nexports.default = touchDown;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/touchFlick.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar touchFlick = function touchFlick(id, xoffset, yoffset, speed) {\n    var data = {};\n\n    if (typeof id === 'number' && typeof xoffset === 'number') {\n        data = {\n            xoffset: id,\n            yoffset: xoffset\n        };\n    } else if (!id && typeof xoffset === 'number' && typeof yoffset === 'number') {\n        data = { xoffset: xoffset, yoffset: yoffset };\n    } else if (typeof id === 'string' && typeof xoffset === 'number' && typeof yoffset === 'number' && typeof speed === 'number') {\n        data = { element: id, xoffset: xoffset, yoffset: yoffset, speed: speed };\n    } else {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with touchFlick command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/flick', data);\n}; /**\n    * Flick on the touch screen using finger motion events. This flick command starts\n    * at a particular screen location. Depcrecated! Please use `touchPerform` instead.\n    *\n    * @param {String} ID      ID of the element where the flick starts\n    * @param {Number} xoffset the x offset in pixels to flick by\n    * @param {Number} yoffset the y offset in pixels to flick by\n    * @param {Number} speed   the speed in pixels per seconds\n    *\n    * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchflick\n    * @type protocol\n    *\n    */\n\nexports.default = touchFlick;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/touchId.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = touchId;\n/**\n *\n * Simulate Touch ID with either valid (match == true) or invalid (match == false) fingerprint.\n *\n * <example>\n    :touchId.js\n    it('should simulate fingerprint', function () {\n        browser.touchId(); // simulates valid fingerprint\n        browser.touchId(true); // simulates valid fingerprint\n        browser.touchId(false); // simulates invalid fingerprint\n    });\n * </example>\n *\n * @param {Boolean} match if true the command simulates a valid fingerprint\n *\n * @type mobile\n * @for  ios\n * @see https://developer.apple.com/videos/play/wwdc2015/406/\n *\n */\n\nfunction touchId() {\n    var match = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    return this.requestHandler.create('session/:session_id/appium/simulator/touch_id', { match: match });\n}\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/touchLongClick.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar touchLongClick = function touchLongClick(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with touchLongClick protocol command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/longclick', {\n        element: id.toString()\n    });\n}; /**\n    *\n    * Long press on the touch screen using finger motion events. Depcrecated! Please use `touchPerform` instead.\n    *\n    * @param {String} id ID of the element to long press on\n    *\n    * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchlongclick\n    * @type protocol\n    * @for android\n    *\n    */\n\nexports.default = touchLongClick;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/touchMove.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar touchMove = function touchMove(x, y) {\n    if (typeof x !== 'number' || typeof y !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with touchMove command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/move', { x: x, y: y });\n}; /**\n    *\n    * Finger move on the screen. Depcrecated! Please use `touchPerform` instead.\n    * Depcrecated! Please use `touchPerform` instead.\n    *\n    * @param {Number} x  coordinate on the screen\n    * @param {Number} y  coordinate on the screen\n    *\n    * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchmove\n    * @type protocol\n    * @depcrecated\n    *\n    */\n\nexports.default = touchMove;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/touchMultiPerform.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * Performs multiple touch actions. The action object is an array and its\n * objects have to contain the action name (longPress, press, tap, wait,\n * moveTo, release) and additional information about either the element, x/y\n * coordinates or touch counts.\n *\n * <example>\n    :simpleDragAndDrop.js\n    browser.touchMultiPerform([\n        { action: 'press', options: { x: 100, y: 250 }},\n        { action: 'moveTo', options: { x: 300, y: 100 }},\n        { action: 'release' }\n    ]);\n * </example>\n *\n * @param {Object} actions  touch action as object or object[] with attributes like touchCount, x, y, duration\n *\n * @see  https://github.com/appium/node-mobile-json-wire-protocol/blob/master/docs/protocol-methods.md#mobile-json-wire-protocol-endpoints\n * @type mobile\n * @for android, ios\n *\n */\n\nvar touchMultiPerform = function touchMultiPerform(actions) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/touch/multi/perform',\n        method: 'POST'\n    }, { actions: actions });\n};\n\nexports.default = touchMultiPerform;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/touchPerform.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Performs a specific touch action. The action object need to contain the action\n * name (longPress, press, tap, wait, moveTo, release) and additional information\n * about either the element, x/y coordinates or touch counts.\n *\n * <example>\n    :touchPerformPress.js\n    browser.touchPerform([{\n        action: 'press',\n        options: {\n            x: 100,\n            y: 250\n        }\n    }]);\n\n    :touchPerformTap.js\n    browser.touchPerform([{\n        action: 'tap',\n        options: {\n            element: '1', // json web element was queried before\n            x: 10,   // x offset\n            y: 20,   // y offset\n            count: 1 // number of touches\n        }\n    }]);\n * </example>\n *\n * @param {Object} actions  touch action as object or object[] with attributes like touchCount, x, y, duration\n *\n * @see  https://github.com/appium/node-mobile-json-wire-protocol/blob/master/docs/protocol-methods.md#mobile-json-wire-protocol-endpoints\n * @type mobile\n * @for android, ios\n *\n */\n\nvar touchPerform = function touchPerform(actions) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/touch/perform',\n        method: 'POST'\n    }, { actions: actions });\n};\n\nexports.default = touchPerform;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/touchScroll.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar touchScroll = function touchScroll(id, xoffset, yoffset) {\n    var data = {};\n\n    /*!\n     * start scrolling at a particular screen location\n     */\n    if (arguments.length === 3 && id && typeof xoffset === 'number' && typeof yoffset === 'number') {\n        data = { element: id, xoffset: xoffset, yoffset: yoffset };\n\n        /*!\n         * if you don't care where the scroll starts on the screen\n         */\n    } else if (arguments.length === 3 && !id && typeof xoffset === 'number' && typeof yoffset === 'number') {\n        data = { xoffset: xoffset, yoffset: yoffset };\n\n        /*!\n         * if you don't care where the scroll starts on the screen\n         */\n    } else if (arguments.length === 2 && typeof id === 'number' && typeof xoffset === 'number') {\n        data = {\n            xoffset: id,\n            yoffset: xoffset\n        };\n    } else {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with touchScroll command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/scroll', data);\n}; /**\n    * Scroll on the touch screen using finger based motion events. If\n    * element ID is given start scrolling at a particular screen location.\n    *\n    * Depcrecated! Please use `touchPerform` instead.\n    *\n    * @param {String} id       the element where the scroll starts.\n    * @param {Number} xoffset  in pixels to scroll by\n    * @param {Number} yoffset  in pixels to scroll by\n    *\n    * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchscroll\n    * @type protocol\n    * @depcrecated\n    *\n    */\n\nexports.default = touchScroll;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/touchUp.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar touchUp = function touchUp(x, y) {\n    if (typeof x !== 'number' || typeof y !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with touchUp command');\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/up', { x: x, y: y });\n}; /**\n    *\n    * Finger up on the screen. Depcrecated! Please use `touchPerform` instead.\n    *\n    * @param {Number} x  coordinate on the screen\n    * @param {Number} y  coordinate on the screen\n    *\n    * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchup\n    * @type protocol\n    * @depcrecated\n    *\n    */\n\nexports.default = touchUp;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/unlock.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Unlock the device.\n *\n * <example>\n    :unlockIt.js\n    it('demonstrate the lock and unlock command', function () {\n        browser.lock();\n        console.log(browser.isLocked()); // true\n\n        browser.unlock();\n        console.log(browser.isLocked()); // false\n    });\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nvar unlock = function unlock() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/unlock',\n        method: 'POST'\n    });\n};\n\nexports.default = unlock;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/url.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Protocol binding to load or get the URL of the browser.\n *\n * <example>\n    :url.js\n    // navigate to a new URL\n    browser.url('http://webdriver.io');\n    // receive url\n    console.log(browser.getUrl()); // outputs: \"http://webdriver.io\"\n * </example>\n *\n * @param {String=} url  the URL to navigate to\n * @returns {String}     the current URL\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get\n * @type protocol\n *\n */\n\nvar url = function url(uri) {\n    var data = {};\n\n    if (typeof uri === 'string') {\n        data.url = uri;\n        if (typeof this.options.baseUrl === 'string' && /^(\\/|\\?)/.test(data.url)) {\n            data.url = this.options.baseUrl + data.url;\n        }\n    }\n\n    return this.requestHandler.create('/session/:sessionId/url', data);\n};\n\nexports.default = url;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/window.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Protocol binding to handle with tabs in the browser.\n *\n * <example>\n    :window.js\n    // change focus to another window\n    // using window handle\n    browser.window('{dc30381e-e2f3-9444-8bf3-12cc44e8372a}');\n\n    // using tab name attribute\n    browser.window('my tab');\n\n    // close the current window\n    browser.window();\n * </example>\n *\n * @param {String=} windowHandle the window to change focus to\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-switch-to-window\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-close-window\n * @type protocol\n *\n */\n\nvar window = function window(windowHandle) {\n    var data = {};\n    var requestOptions = {\n        path: '/session/:sessionId/window',\n        method: 'DELETE'\n    };\n\n    if (typeof windowHandle === 'string') {\n        data = { name: windowHandle };\n        requestOptions.method = 'POST';\n    }\n\n    return this.requestHandler.create(requestOptions, data);\n};\n\nexports.default = window;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/windowHandle.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * Retrieve the current window handle.\n *\n * <example>\n    :windowHandle.js\n    it('should return window handle', function () {\n        browser.url('http://webdriver.io');\n\n        var handle = browser.windowHandle()\n        console.log(handle);\n        // outputs something like the following:\n        //  {\n        //      state: 'success',\n        //      sessionId: 'e6782264-9eb1-427b-9250-d8302ac35161',\n        //      hCode: 988127308,\n        //      value: 'CDwindow-849D79B1-5CCB-4A1D-A217-5BA809D935F3',\n        //      class: 'org.openqa.selenium.remote.Response',\n        //      status: 0\n        //  }\n    });\n * </example>\n *\n * @returns {String} the current window handle\n *\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-window-handle\n * @type protocol\n *\n */\n\nvar windowHandle = function windowHandle() {\n    // ToDo fix path according to new Webdriver standard\n    return this.requestHandler.create('/session/:sessionId/window_handle');\n};\n\nexports.default = windowHandle;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/windowHandleFullscreen.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * The Fullscreen Window command invokes the window manager-specific “full screen” operation,\n * if any, on the window containing the current top-level browsing context. This typically\n * increases the window to the size of the physical display and can hide browser UI elements\n * such as toolbars.\n *\n * Note: this command was recently added to the official Webdriver protocol and might not be\n * working with current Selenium driver.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-fullscreen-window\n * @type protocol\n *\n */\n\nvar windowHandleMaximize = function windowHandleMaximize() {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/window/fullscreen',\n        method: 'POST'\n    });\n};\n\nexports.default = windowHandleMaximize;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/windowHandleMaximize.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Maximize the specified window if not already maximized. If the :windowHandle URL parameter is \"current\",\n * the currently active window will be maximized.\n *\n * @param {String=} windowHandle window to maximize (if parameter is falsy the currently active window will be maximized)\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-maximize-window\n * @type protocol\n *\n */\n\nvar windowHandleMaximize = function windowHandleMaximize() {\n    var windowHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'current';\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/window/' + windowHandle + '/maximize',\n        method: 'POST'\n    });\n};\n\nexports.default = windowHandleMaximize;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/windowHandlePosition.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Protocol bindings to receive or change the position of the browser window.\n * If the `windowHandle` URL parameter is falsy, the currently active window will be considered.\n * (Not part of the official Webdriver specification).\n *\n * <example>\n    :windowHandlePosition.js\n    it('should get or set window position', function () {\n        // change the position of a specified window\n        client.windowHandlePosition('{dc30381e-e2f3-9444-8bf3-12cc44e8372a}', {x: 100, y: 200});\n        // or set the current window position\n        browser.windowHandlePosition({x: 100, y: 200});\n\n        // get the position of a specified window\n        var position = browser.windowHandlePosition('{dc30381e-e2f3-9444-8bf3-12cc44e8372a}');\n        // or of the current window\n        position = browser.windowHandlePosition();\n\n        console.log(position); // outputs: {x: 100, y: 200}\n    });\n * </example>\n *\n * @param {String=} windowHandle the window to receive/change the position\n * @param {Object=} position     the X and Y coordinates to position the window at, relative to the upper left corner of the screen\n *\n * @returns {Object} the X and Y coordinates for the window, relative to the upper left corner of the screen (`{x: number, y: number}`)\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidwindowwindowhandleposition\n * @type protocol\n *\n */\n\nvar windowHandlePosition = function windowHandlePosition(windowHandle, position) {\n    var data = {};\n    var requestOptions = {\n        method: 'POST'\n    };\n\n    if (typeof windowHandle !== 'string') {\n        position = windowHandle;\n        windowHandle = 'current';\n    }\n\n    requestOptions.path = '/session/:sessionId/window/' + windowHandle + '/position';\n\n    /**\n     * check if arguments provide proper position parameter\n     */\n    if ((typeof position === 'undefined' ? 'undefined' : (0, _typeof3.default)(position)) === 'object' && typeof position.x === 'number' && typeof position.y === 'number') {\n        data = position;\n\n        /**\n         * otherwise fall back to get operation\n         */\n    } else {\n        requestOptions.method = 'GET';\n    }\n\n    return this.requestHandler.create(requestOptions, data);\n};\n\nexports.default = windowHandlePosition;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/windowHandleSize.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar windowHandleSize = function windowHandleSize() {\n    var windowHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'current';\n    var size = arguments[1];\n\n    var data = {};\n\n    if ((typeof windowHandle === 'undefined' ? 'undefined' : (0, _typeof3.default)(windowHandle)) === 'object') {\n        var _ref = ['current', windowHandle];\n        windowHandle = _ref[0];\n        size = _ref[1];\n    }\n\n    /*!\n     * protocol options\n     */\n    var requestOptions = {\n        path: '/session/:sessionId/window/' + windowHandle + '/size',\n        method: 'GET'\n    };\n\n    /*!\n     * change window size if the new size is given\n     */\n    if ((typeof size === 'undefined' ? 'undefined' : (0, _typeof3.default)(size)) === 'object' && size.width && size.height) {\n        requestOptions.method = 'POST';\n        // The width and height value might return as a negative value, so\n        // we make sure to use its absolute value.\n        data = {\n            width: Math.abs(size.width),\n            height: Math.abs(size.height)\n        };\n    }\n\n    /*!\n     * type check\n     */\n    if (requestOptions.method === 'POST' && typeof data.width !== 'number' && typeof data.height !== 'number') {\n        throw new _ErrorHandler.ProtocolError('number or type of arguments don\\'t agree with windowHandleSize protocol command');\n    }\n\n    return this.requestHandler.create(requestOptions, data);\n}; /**\n    *\n    * Protocol binding to get or change the size of the browser.\n    *\n    * <example>\n       :windowHandleSize.js\n       it('should get or set window position', function () {\n           // change the size of a specified window\n           client.windowHandleSize('{dc30381e-e2f3-9444-8bf3-12cc44e8372a}', {width: 800, height: 600});\n           // or set the current window size\n           browser.windowHandleSize({width: 800, height: 600});\n   \n           // get the size of a specified window\n           var size = browser.windowHandleSize('{dc30381e-e2f3-9444-8bf3-12cc44e8372a}');\n           // or of the current window\n           size = browser.windowHandleSize();\n   \n           console.log(size); // outputs: {width: 800, height: 600}\n       });\n    * </example>\n    *\n    * @param {String=} windowHandle the window to receive/change the size\n    * @param {Object=} dimension    the new size of the window\n    *\n    * @returns {Object} the size of the window (`{width: number, height: number}`)\n    *\n    * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-set-window-size\n    * @type protocol\n    *\n    */\n\nexports.default = windowHandleSize;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/protocol/windowHandles.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Retrieve the list of all window handles available to the session.\n *\n * <example>\n    :windowHandles.js\n    it('should return all window handles', function () {\n        browser.url('http://localhost/one.html');\n        browser.newWindow('http://localhost/two.html');\n\n        var windowHandles = browser.windowHandles()\n        console.log(windowHandles);\n        // Outputs something like\n        // {\n        //    state: 'success',\n        //    sessionId: '31dc8253-a27e-4bae-8d20-338d6b0541c9',\n        //    hCode: 273402755,\n        //    value:\n        //    [ 'CDwindow-CBFE1412-8D46-495C-96B4-42E04F9153C0',\n        //        'CDwindow-BD7BE568-52F2-4552-B834-FE2D041DCE5B' ],\n        //    class: 'org.openqa.selenium.remote.Response',\n        //    status: 0\n        // }\n    });\n * </example>\n *\n * @returns {String[]} a list of window handles\n *\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-window-handles\n * @type protocol\n *\n */\n\nvar windowHandles = function windowHandles() {\n    // ToDo fix path according to new Webdriver standard\n    return this.requestHandler.create('/session/:sessionId/window_handles');\n};\n\nexports.default = windowHandles;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/$$.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * The `$$` command is a short way to call the [`elements`](/api/protocol/elements.html) command in order\n * to fetch multiple elements on the page. It returns an array with element results that will have an\n * extended prototype to call action commands without passing in a selector. However if you still pass\n * in a selector it will look for that element first and call the action on that element.\n *\n * You can chain `$` or `$$` together in order to walk down the DOM tree.\n *\n * <example>\n    :index.html\n    <ul id=\"menu\">\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/\">Developer Guide</a></li>\n        <li><a href=\"/\">API</a></li>\n        <li><a href=\"/\">Contribute</a></li>\n    </ul>\n\n    :$.js\n    it('should get text a menu link', function () {\n        var text = $('#menu');\n\n        console.log(text.$$('li')[2].$('a').getText()); // outputs: \"API\"\n        // same as\n        console.log(text.$$('li')[2].getText('a'));\n    });\n * </example>\n *\n * @alias $$\n * @param {String} selector  selector to fetch multiple elements\n * @type utility\n *\n */\n\nvar $$ = function $$(selector) {\n    return this.elements(selector).then(function (res) {\n        return res.value.map(function (el, i) {\n            el.value = { ELEMENT: el.ELEMENT };\n            el.selector = selector;\n            el.index = i;\n            return el;\n        });\n    });\n};\n\nexports.default = $$;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/$.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * The `$` command is a short way to call the [`element`](/api/protocol/element.html) command in order\n * to fetch a single element on the page. It returns an object that with an extended prototype to call\n * action commands without passing in a selector. However if you still pass in a selector it will look\n * for that element first an call the action on that element.\n *\n * You can chain `$` or `$$` together in order to walk down the DOM tree.\n *\n * <example>\n    :index.html\n    <ul id=\"menu\">\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/\">Developer Guide</a></li>\n        <li><a href=\"/\">API</a></li>\n        <li><a href=\"/\">Contribute</a></li>\n    </ul>\n\n    :$.js\n    it('should get text a menu link', function () {\n        var text = $('#menu');\n\n        console.log(text.$$('li')[2].$('a').getText()); // outputs: \"API\"\n        // same as\n        console.log(text.$$('li')[2].getText('a'));\n    });\n * </example>\n *\n * @alias $\n * @param {String} selector  selector to fetch a certain element\n * @type utility\n *\n */\n\nvar $ = function $(selector) {\n    return this.element(selector);\n};\n\nexports.default = $;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/addValue.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar addValue = function addValue(selector, value) {\n    var _this = this;\n\n    /*!\n     * parameter check\n     */\n    if (typeof value === 'number') {\n        value = '' + value;\n    }\n\n    if (typeof value !== 'string' && !Array.isArray(value)) {\n        throw new _ErrorHandler.CommandError('number or type of arguments don\\'t agree with addValue command');\n    }\n\n    return this.elements(selector).then(function (res) {\n        if (!res.value || res.value.length === 0) {\n            /*!\n             * throw NoSuchElement error if no element was found\n             */\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        var self = _this;\n        var elementIdValueCommands = [];\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var elem = _step.value;\n\n                elementIdValueCommands.push(self.elementIdValue(elem.ELEMENT, value));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _this.unify(elementIdValueCommands);\n    });\n}; /**\n    *\n    * Add a value to an object found by given selector. You can also use unicode\n    * characters like Left arrow or Back space. WebdriverIO will take care of\n    * translating them into unicode characters. You’ll find all supported characters\n    * [here](https://w3c.github.io/webdriver/webdriver-spec.html#dfn-character-types).\n    * To do that, the value has to correspond to a key from the table.\n    *\n    * <example>\n       :addValue.js\n       it('should demonstrate the addValue command', function () {\n           var input = $('.input')\n           input.setValue('test')\n           input.setValue(123)\n   \n           // same as\n           browser.setValue('.input', 'test')\n           browser.addValue('.input', '123')\n   \n           var value = elem.getValue()\n           assert(value === 'test123') // true\n       })\n    * </example>\n    *\n    * @alias browser.addValue\n    * @param {String}        selector   Input element\n    * @param {String|Number} values     value to be added\n    * @uses protocol/elements, protocol/elementIdValue\n    * @type action\n    *\n    */\n\nexports.default = addValue;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/call.js":"/**\n * You can use `call` to execute any async action within your test spec. The command itself\n * it treated like a synchronous function. It accepts promises and stops the execution until\n * the promise has resolved.\n *\n * <example>\n    :call.js\n    it('some testing here', function() {\n        browser.url('http://google.com')\n\n        // make an asynchronous call using any 3rd party library supporting promises\n        // e.g. call to backend or db to inject fixture data\n        browser.call(function () {\n            return somePromiseLibrary.someMethod().then(function () {\n                // ...\n            })\n        })\n\n        // example for async call to 3rd party library that doesn't support promises\n        browser.call(function () {\n            return new Promise(function(resolve, reject) {\n                someOtherNodeLibrary.someMethod(param1, function(err, res) {\n                    if (err) {\n                        return reject(err)\n                    }\n\n                    resolve(res)\n                })\n            })\n        })\n\n        // continue synchronously\n        browser.click('#elemA')\n        browser.setValue('.firstname','webdriverbot')\n    });\n * </example>\n *\n * @alias browser.call\n * @param {Function} callback  function to be called\n * @type utility\n *\n */\n\"use strict\";\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/chooseFile.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Given a selector corresponding to an `<input type=file>` chooseFile will upload\n * the local file to the browser machine and fill the form accordingly. It does not\n * submit the form for you. This command only works for desktop browser.\n *\n * <example>\n    :call.js\n    it('uploads a file and fills the form with it', async function () {\n        var toUpload = path.join(__dirname, '..', '..', 'fixtures', 'cat-to-upload.gif')\n\n        browser.chooseFile('#upload-test', toUpload)\n\n        browser.getValue('#upload-test')\n        expect(/cat\\-to\\-upload\\.gif$/.test(val)).to.be.equal(true)\n    })\n * </example>\n *\n * @alias browser.chooseFile\n * @param {String} selector   input element\n * @param {String} localPath  local path to file to be uploaded\n * @uses utility/uploadFile, action/addValue\n * @type utility\n *\n */\n\nvar chooseFile = function chooseFile(selector, localPath) {\n    var _this = this;\n\n    /*!\n     * parameter check\n     */\n    if (typeof localPath !== 'string') {\n        return new _ErrorHandler.CommandError('number or type of arguments don\\'t agree with chooseFile command');\n    }\n\n    /*!\n     * mobile check\n     */\n    if (this.isMobile) {\n        return new _ErrorHandler.CommandError('chooseFile command is not supported on mobile platforms');\n    }\n\n    return new _promise2.default(function (resolve, reject) {\n        _fs2.default.exists(localPath, function (exists) {\n            /* istanbul ignore next */\n            if (!exists) {\n                return reject(new _ErrorHandler.CommandError('File to upload does not exists on your system'));\n            }\n\n            _this.uploadFile(localPath).then(function (res) {\n                return this.addValue(selector, res.value);\n            }).then(resolve, reject);\n        });\n    });\n};\n\nexports.default = chooseFile;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/clearElement.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar clearElement = function clearElement(selector) {\n    var _this = this;\n\n    return this.elements(selector).then(function (res) {\n        if (!res.value || res.value.length === 0) {\n            // throw NoSuchElement error if no element was found\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        var elementIdClearCommands = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var elem = _step.value;\n\n                elementIdClearCommands.push(_this.elementIdClear(elem.ELEMENT, 'value'));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _this.unify(elementIdClearCommands);\n    });\n}; /**\n    *\n    * Clear a `<textarea>` or text `<input>` element’s value. Make sure you can interact with the\n    * element before using this command. You can't clear an input element that is disabled or in\n    * readonly mode.\n    *\n    * <example>\n       :clearElement.js\n       it('should demonstrate the clearElement command', function () {\n           var input = $('.input')\n           input.setValue('test123')\n           console.log(input.getValue()) // returns 'test123'\n   \n           input.clearElement()\n           // or\n           browser.clearElement('.input')\n   \n           var value = browser.getValue('.input')\n           assert(value === ''); // true\n       })\n    * </example>\n    *\n    * @alias browser.clearElement\n    * @param {String} selector input element\n    * @uses protocol/elements, protocol/elementIdClear\n    * @type action\n    *\n    */\n\nexports.default = clearElement;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/click.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar click = function click(selector) {\n    var _this = this;\n\n    return this.element(selector).then(function (elem) {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!elem.value) {\n            throw new _ErrorHandler.RuntimeError(7);\n        }\n\n        return _this.elementIdClick(elem.value.ELEMENT);\n    });\n}; /**\n    *\n    * Click on an element based on given selector.\n    *\n    * <example>\n       :example.html\n       <button id=\"myButton\" onclick=\"document.getElementById('someText').innerHTML='I was clicked'\">Click me</button>\n       <div id=\"someText\">I was not clicked</div>\n   \n       :click.js\n       it('should demonstrate the click command', function () {\n           var myButton = $('#myButton')\n           myButton.click()\n           // or\n           browser.click('#myButton')\n   \n           var text = browser.getText('#someText');\n           assert(text === 'I was clicked'); // true\n       })\n   \n       :example.js\n       it('should fetch menu links and visit each page', function () {\n           links = $$('#menu a');\n   \n           menu.forEach(function (link) {\n               link.click();\n           });\n       });\n    * </example>\n    *\n    * @alias browser.click\n    * @param {String} selector element to click on. If it matches with more than one DOM-element it automatically clicks on the first element\n    * @uses protocol/element, protocol/elementIdClick\n    * @type action\n    *\n    */\n\nexports.default = click;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/close.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar close = function close(windowHandle) {\n    var _this = this;\n\n    if (typeof windowHandle !== 'string') {\n        return this.getTabIds().then(function (tabIds) {\n            if (tabIds.length === 0) {\n                throw new _ErrorHandler.RuntimeError('' + 'Can\\'t switch to the next tab because all windows are closed. ' + 'Make sure you keep at least one window open!');\n            }\n\n            return _this.window().switchTab(tabIds[0]);\n        });\n    }\n\n    return this.window().switchTab(windowHandle);\n}; /**\n    *\n    * Close current window (and focus on an other window). If no window handle is given\n    * it automatically switches back to the first handle.\n    *\n    * <example>\n       :close.js\n       it('should demonstrate the close command', function () {\n           browser.url('http://github.com')\n           browser.newWindow('http://google.com')\n   \n           var title = browser.getTitle()\n           console.log(title) // outputs: \"Google\"\n   \n           browser.close()\n   \n           title = browser.getTitle()\n           console.log(title) // outputs: \"GitHub · Build software better, together.\"\n       })\n    * </example>\n    *\n    * @alias browser.close\n    * @param {String=} windowHandle new window to focus on\n    * @uses protocol/window, window/switchTab\n    * @type window\n    *\n    */\n\nexports.default = close;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/debug.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _vm = require('vm');\n\nvar _vm2 = _interopRequireDefault(_vm);\n\nvar _repl = require('repl');\n\nvar _repl2 = _interopRequireDefault(_repl);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar debug = function debug() {\n    var commandTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5000;\n\n    var _this = this;\n\n    var enableStdout = arguments[1];\n    var enableLogging = arguments[2];\n\n    var commandIsRunning = false;\n    var logLevel = this.logger.logLevel;\n    this.logger.logLevel = 'verbose';\n    this.logger.debug();\n\n    if (!enableLogging) {\n        this.logger.logLevel = logLevel;\n    }\n\n    var myEval = function myEval(cmd, context, filename, callback) {\n        if (commandIsRunning) {\n            return;\n        }\n\n        if (cmd === 'browser\\n') {\n            return callback(null, '[WebdriverIO REPL client]');\n        }\n\n        commandIsRunning = true;\n        var result = void 0;\n        if (typeof global.wdioSync === 'function') {\n            return global.wdioSync(function () {\n                try {\n                    result = _vm2.default.runInThisContext(cmd);\n                } catch (e) {\n                    commandIsRunning = false;\n                    return callback(e);\n                }\n\n                callback(null, result);\n                commandIsRunning = false;\n            })();\n        }\n\n        context.browser = _this;\n        try {\n            result = _vm2.default.runInThisContext(cmd);\n        } catch (e) {\n            commandIsRunning = false;\n            return callback(e);\n        }\n\n        if (!result || typeof result.then !== 'function') {\n            commandIsRunning = false;\n            return callback(null, result);\n        }\n\n        var timeout = setTimeout(function () {\n            return callback(new _ErrorHandler.RuntimeError('Command execution timed out'));\n        }, commandTimeout);\n        result.then(function (res) {\n            commandIsRunning = false;\n            clearTimeout(timeout);\n            return callback(null, res);\n        }, function (e) {\n            commandIsRunning = false;\n            clearTimeout(timeout);\n            return callback(e);\n        });\n    };\n\n    var replServer = _repl2.default.start({\n        prompt: '> ',\n        eval: myEval,\n        input: process.stdin,\n        output: process.stdout,\n        useGlobal: true,\n        ignoreUndefined: true\n    });\n\n    return new _promise2.default(function (resolve) {\n        replServer.on('exit', function () {\n            _this.logger.logLevel = logLevel;\n            resolve();\n        });\n    });\n}; /**\n    *\n    * This command helps you to debug your integration tests. It stops the running browser and gives\n    * you time to jump into it and check the state of your application (e.g. using the dev tools).\n    * Your terminal transforms into a [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop)\n    * interface that will allow you to try out certain commands, find elements and test actions on\n    * them.\n    *\n    * [![WebdriverIO REPL](http://webdriver.io/images/repl.gif)](http://webdriver.io/images/repl.gif)\n    *\n    * If you run the WDIO testrunner make sure you increase the timeout property of your test framework\n    * your are using (e.g. Mocha or Jasmine) in order to prevent the continuation due to a test timeout.\n    * Also avoid to execute the command with multiple capabilities running at the same time.\n    *\n    * <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xWwP-3B_YyE\" frameborder=\"0\" allowfullscreen></iframe>\n    *\n    * <example>\n       :debug.js\n       it('should demonstrate the debug command', function () {\n           browser.setValue('#input', 'FOO')\n   \n           browser.debug() // jumping into the browser and change value of #input to 'BAR'\n   \n           var value = browser.getValue('#input')\n           console.log(value) // outputs: \"BAR\"\n       })\n    * </example>\n    *\n    * @alias browser.debug\n    * @type utility\n    *\n    */\n\nexports.default = debug;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/deleteCookie.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Delete cookies visible to the current page. By providing a cookie name it just removes the single cookie.\n *\n * <example>\n    :deleteCookie.js\n    it('should delete cookies', function () {\n        browser.setCookie({name: 'test', value: '123'})\n        browser.setCookie({name: 'test2', value: '456'})\n        browser.setCookie({name: 'test3', value: '789'})\n\n        var cookies = browser.getCookie()\n        console.log(cookies)\n        // outputs:\n        // [\n        //     { name: 'test', value: '123' },\n        //     { name: 'test2', value: '456' }\n        //     { name: 'test3', value: '789' }\n        // ]\n\n        browser.deleteCookie('test3')\n        cookies = browser.getCookie()\n        console.log(cookies)\n        // outputs:\n        // [\n        //     { name: 'test', value: '123' },\n        //     { name: 'test2', value: '456' }\n        // ]\n\n        browser.deleteCookie()\n        cookies = browser.getCookie()\n        console.log(cookies) // outputs: []\n    })\n * </example>\n *\n * @alias browser.deleteCookie\n * @param {String=} name name of cookie to be deleted\n * @uses protocol/cookie\n * @type cookie\n *\n */\n\nvar deleteCookie = function deleteCookie(name) {\n    /*!\n     * parameter check\n     */\n    if (typeof name !== 'string') {\n        name = null;\n    }\n\n    return this.cookie('DELETE', name);\n};\n\nexports.default = deleteCookie;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/doubleClick.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar doubleClick = function doubleClick(selector) {\n    var _this = this;\n\n    if (this.isMobile) {\n        return this.element(selector).then(function (res) {\n            /**\n             * check if element was found and throw error if not\n             */\n            if (!res.value) {\n                throw new _ErrorHandler.RuntimeError(7);\n            }\n\n            return _this.touchDoubleClick(res.value.ELEMENT);\n        });\n    }\n\n    return this.element(selector).then(function (res) {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new _ErrorHandler.RuntimeError(7);\n        }\n\n        return _this.moveTo(res.value.ELEMENT);\n    }).doDoubleClick();\n}; /**\n    *\n    * Double-click on an element based on given selector.\n    *\n    * <example>\n       :example.html\n       <button id=\"myButton\" ondblclick=\"document.getElementById('someText').innerHTML='I was dblclicked'\">Click me</button>\n       <div id=\"someText\">I was not clicked</div>\n   \n       :doubleClick.js\n       it('should demonstrate the doubleClick command', function () {\n           var myButton = $('#myButton')\n           myButton.doubleClick()\n           // or\n           browser.doubleClick('#myButton')\n   \n           var value = browser.getText('#someText')\n           assert(value === 'I was dblclicked') // true\n       })\n    * </example>\n    *\n    * @alias browser.doubleClick\n    * @param {String} selector  element to double click on. If it matches with more than on DOM-element it automatically clicks on the first element\n    * @uses protocol/element, protocol/moveTo, protocol/doDoubleClick, protocol/touchDoubleClick\n    * @type action\n    *\n    */\n\nexports.default = doubleClick;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/dragAndDrop.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Drag an item to a destination element. __Note:__ this command only works for some drag&drop implementation\n * and some browser because of the way how Selenium simulates mouse events.\n *\n * @alias browser.dragAndDrop\n * @param {String} sourceElem      source selector\n * @param {String} destinationElem destination selector\n * @uses action/moveToObject, protocol/buttonDown, protocol/buttonUp, property/getLocation, protocol/touchDown, protocol/touchMove, protocol/touchUp\n * @type action\n *\n */\n\nvar dragAndDrop = function dragAndDrop(selector, destinationElem) {\n    var _this = this;\n\n    if (this.isMobile) {\n        return this.getLocation(selector).then(function (location) {\n            return _this.touchDown(location.x, location.y);\n        }).getLocation(destinationElem).then(function (location) {\n            return _this.touchMove(location.x, location.y).touchUp(location.x, location.y);\n        });\n    }\n\n    return this.moveToObject(selector).buttonDown().moveToObject(destinationElem).buttonUp();\n};\n\nexports.default = dragAndDrop;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/end.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * End the session and close browser. This command is only supported in standalone mode. If you\n * are using the wdio testrunner you can't close the browser before your spec finishes. The testrunner\n * will close the browser for you after the spec has finished.\n *\n * However if you want to refresh the browser session you can try the [`reload`](/api/utility/reload.html)\n * command.\n *\n * <example>\n    :endAsync.js\n    client\n        .init() // starts session and opens the browser\n        .url('http://google.com')\n        // ... other commands\n        .end(); // ends session and close browser\n * </example>\n *\n * @alias browser.end\n * @uses protocol/session\n * @type utility\n *\n */\n\nvar end = function end() {\n    return this.session('delete');\n};\n\nexports.default = end;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/endAll.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * End all selenium server sessions at once. Like the [`end`](/api/utility/end.html) command is this command\n * only supported in standalone mode.\n *\n * @alias browser.endAll\n * @uses protocol/sessions, protocol/session\n * @type utility\n *\n */\n\nvar endAll = function endAll() {\n    var _this = this;\n\n    return this.sessions().then(function (res) {\n        var sessionCommands = [];\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var session = _step.value;\n\n                sessionCommands.push(_this.session('delete', session.id));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _this.unify(sessionCommands);\n    });\n};\n\nexports.default = endAll;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getAttribute.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getAttribute = function getAttribute(selector, attributeName) {\n    var _this = this;\n\n    /*!\n     * parameter check\n     */\n    if (typeof attributeName !== 'string') {\n        throw new _ErrorHandler.CommandError('number or type of arguments don\\'t agree with getAttribute command');\n    }\n\n    return this.elements(selector).then(function (res) {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        var elementIdAttributeCommands = [];\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var elem = _step.value;\n\n                elementIdAttributeCommands.push(_this.elementIdAttribute(elem.ELEMENT, attributeName));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _this.unify(elementIdAttributeCommands, {\n            extractValue: true\n        });\n    });\n}; /**\n    *\n    * Get an attribute from an DOM-element based on the selector and attribute name.\n    * Returns a list of attribute values if selector matches multiple elements.\n    *\n    * <example>\n       :index.html\n       <form action=\"/submit\" method=\"post\" class=\"loginForm\">\n           <input type=\"text\" name=\"name\" placeholder=\"username\"></input>\n           <input type=\"text\" name=\"password\" placeholder=\"password\"></input>\n           <input type=\"submit\" name=\"submit\" value=\"submit\"></input>\n       </form>\n   \n       :getAttribute.js\n       it('should demonstrate the getAttribute command', function () {\n           var form = $('form')\n   \n           var attr = form.getAttribute('method')\n           console.log(attr) // outputs: \"post\"\n           // or\n           console.log(browser.getAttribute('form', 'method')) // outputs: \"post\"\n   \n           // if your selector matches multiple elements it returns an array of results\n           var allInputs = $$('.loginForm input')\n           console.log(allInputs.map(function(el) { return el.getAttribute('name'); })) // outputs: ['name', 'password', 'submit']\n       })\n    * </example>\n    *\n    * @alias browser.getAttribute\n    * @param {String} selector      element with requested attribute\n    * @param {String} attributeName requested attribute\n    * @returns {String|String[]|null} The value of the attribute(s), or null if it is not set on the element.\n    * @uses protocol/elements, protocol/elementIdAttribute\n    * @type property\n    *\n    */\n\nexports.default = getAttribute;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getCommandHistory.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Returns a list of previous called commands + their arguments.\n *\n * <example>\n    :getCommandHistoryAsync.js\n    client\n        .init()\n        .url('http://www.google.com')\n        .click('#username')\n        .addValue('#password', 'text')\n        .pause(2000)\n        .getCommandHistory().then(function(history){\n            console.log(history);\n            // outputs:\n            // [ { name: 'init', args: [] },\n            //   { name: 'url', args: [ 'http://www.google.com' ] },\n            //   { name: 'click', args: [ 'body' ] },\n            //   { name: 'element',\n            //     args: [ 'body' ],\n            //     result:\n            //      { state: 'success',\n            //        sessionId: 'c2aea856-ba18-48c0-8745-aa292f6394bc',\n            //        hCode: 1094372184,\n            //        value: [Object],\n            //        class: 'org.openqa.selenium.remote.Response',\n            //        status: 0,\n            //        selector: 'body' } },\n            //   { name: 'elementIdClick',\n            //     args: [ '0' ],\n            //     result:\n            //      { state: 'success',\n            //        sessionId: 'c2aea856-ba18-48c0-8745-aa292f6394bc',\n            //        hCode: 1704637158,\n            //        value: null,\n            //        class: 'org.openqa.selenium.remote.Response',\n            //        status: 0 } },\n            //   { name: 'addValue', args: [ '#lst-ib', 'webdriverio' ] },\n            //   { name: 'elements',\n            //     args: [ '#lst-ib' ],\n            //     result:\n            //      { state: 'success',\n            //        sessionId: 'c2aea856-ba18-48c0-8745-aa292f6394bc',\n            //        hCode: 1171202369,\n            //        value: [Object],\n            //        class: 'org.openqa.selenium.remote.Response',\n            //        status: 0,\n            //        selector: '#lst-ib' } },\n            //   { name: 'elementIdValue',\n            //     args: [ '1', 'webdriverio' ],\n            //     result:\n            //      { state: 'success',\n            //        sessionId: 'c2aea856-ba18-48c0-8745-aa292f6394bc',\n            //        hCode: 447115314,\n            //        value: null,\n            //        class: 'org.openqa.selenium.remote.Response',\n            //        status: 0 } },\n            //   { name: 'pause', args: [ 2000 ] } ]\n        })\n        .end();\n * </example>\n *\n * @alias browser.getCommandHistory\n * @returns {Object[]} list of recent called commands + their arguments\n * @type utility\n *\n */\n\nvar getCommandHistory = function getCommandHistory() {\n    return this.commandList.slice(0, -1);\n};\n\nexports.default = getCommandHistory;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getCookie.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Retrieve a [cookie](https://w3c.github.io/webdriver/webdriver-spec.html#cookies)\n * visible to the current page. You can query a specific cookie by providing the cookie name or\n * retrieve all.\n *\n * <example>\n    :getCookie.js\n    it('should return a cookie for me', function () {\n        browser.setCookie({name: 'test', value: '123'})\n        browser.setCookie({name: 'test2', value: '456'})\n\n        var testCookie = browser.getCookie('test')\n        console.log(testCookie); // outputs: { name: 'test', value: '123' }\n\n        var allCookies = browser.getCookie()\n        console.log(allCookies);\n        // outputs:\n        // [\n        //    { name: 'test', value: '123' },\n        //    { name: 'test2', value: '456' }\n        // ]\n    })\n * </example>\n *\n * @alias browser.getCookie\n * @param {String=} name name of requested cookie\n * @returns {Object|null} requested cookie if existing\n * @uses protocol/cookie\n * @type cookie\n *\n */\n\nvar getCookie = function getCookie(name) {\n    /*!\n     * paramter check\n     */\n    if (typeof name !== 'string') {\n        name = null;\n    }\n\n    return this.cookie().then(function (res) {\n        res.value = res.value || [];\n\n        if (typeof name === 'string') {\n            return res.value.filter(function (cookie) {\n                return cookie.name === name;\n            })[0] || null;\n        }\n\n        return res.value || (typeof name === 'string' ? null : []);\n    });\n};\n\nexports.default = getCookie;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getCssProperty.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _parseCSS = require('../helpers/parseCSS.js');\n\nvar _parseCSS2 = _interopRequireDefault(_parseCSS);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Get a css property from a DOM-element selected by given selector. The return value\n * is formatted to be testable. Colors gets parsed via [rgb2hex](https://www.npmjs.org/package/rgb2hex)\n * and all other properties gets parsed via [css-value](https://www.npmjs.org/package/css-value).\n *\n * Note that shorthand CSS properties (e.g. background, font, border, margin, padding, list-style, outline,\n * pause, cue) are not returned, in accordance with the DOM CSS2 specification - you should directly access\n * the longhand properties (e.g. background-color) to access the desired values.\n *\n * <example>\n    :example.html\n    <label id=\"myLabel\" for=\"input\" style=\"color: #0088cc; font-family: helvetica, arial, freesans, clean, sans-serif, width: 100px\">Some Label</label>\n\n    :getCssProperty.js\n    it('should demonstrate the getCssProperty command', function () {\n        var elem = $('#myLabel')\n\n        var color = elem.getCssProperty('color')\n        console.log(color)\n        // outputs the following:\n        // {\n        //     property: 'color',\n        //     value: 'rgba(0, 136, 204, 1)',\n        //     parsed: {\n        //         hex: '#0088cc',\n        //         alpha: 1,\n        //         type: 'color',\n        //         rgba: 'rgba(0, 136, 204, 1)'\n        //     }\n        // }\n\n        var font = elem.getCssProperty('font-family')\n        console.log(font)\n        // outputs the following:\n        // {\n        //      property: 'font-family',\n        //      value: 'helvetica',\n        //      parsed: {\n        //          value: [ 'helvetica', 'arial', 'freesans', 'clean', 'sans-serif' ],\n        //          type: 'font',\n        //          string: 'helvetica, arial, freesans, clean, sans-serif'\n        //      }\n        // }\n\n        var width = elem.getCssProperty('width')\n        console.log(width)\n        // outputs the following:\n        // {\n        //     property: 'width',\n        //     value: '100px',\n        //     parsed: {\n        //         type: 'number',\n        //         string: '100px',\n        //         unit: 'px',\n        //         value: 100\n        //     }\n        // }\n    })\n * </example>\n *\n * @alias browser.getCssProperty\n * @param {String} selector    element with requested style attribute\n * @param {String} cssProperty css property name\n * @uses protocol/elements, protocol/elementIdCssProperty\n * @type property\n *\n */\n\nvar getCssProperty = function getCssProperty(selector, cssProperty) {\n    var _this = this;\n\n    /*!\n     * parameter check\n     */\n    if (typeof cssProperty !== 'string') {\n        throw new _ErrorHandler.CommandError('number or type of arguments don\\'t agree with getCssProperty command');\n    }\n\n    return this.elements(selector).then(function (res) {\n        if (!res.value || res.value.length === 0) {\n            // throw NoSuchElement error if no element was found\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        var elementIdCssPropertyCommands = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var elem = _step.value;\n\n                elementIdCssPropertyCommands.push(_this.elementIdCssProperty(elem.ELEMENT, cssProperty));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _promise2.default.all(elementIdCssPropertyCommands);\n    }).then(function (result) {\n        /**\n         * result already unwrapped when command was reran\n         */\n        if (!Array.isArray(result)) {\n            return result;\n        }\n\n        return (0, _parseCSS2.default)(result, cssProperty);\n    });\n};\n\nexports.default = getCssProperty;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/helpers/parseCSS.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _cssValue = require('css-value');\n\nvar _cssValue2 = _interopRequireDefault(_cssValue);\n\nvar _rgb2hex = require('rgb2hex');\n\nvar _rgb2hex2 = _interopRequireDefault(_rgb2hex);\n\nvar _sanitize = require('./sanitize');\n\nvar _sanitize2 = _interopRequireDefault(_sanitize);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar parse = function parse(cssPropertyValue, cssProperty) {\n    if (!cssPropertyValue || !cssPropertyValue.value) {\n        return null;\n    }\n\n    var parsedValue = {\n        property: cssProperty,\n        value: cssPropertyValue.value.toLowerCase().trim()\n    };\n\n    if (parsedValue.value.indexOf('rgb') === 0) {\n        /**\n         * remove whitespaces in rgb values\n         */\n        parsedValue.value = parsedValue.value.replace(/\\s/g, '');\n\n        /**\n         * parse color values\n         */\n        var color = parsedValue.value;\n        parsedValue.parsed = (0, _rgb2hex2.default)(parsedValue.value);\n        parsedValue.parsed.type = 'color';\n        parsedValue.parsed[/[rgba]+/g.exec(color)[0]] = color;\n    } else if (parsedValue.property === 'font-family') {\n        var font = (0, _cssValue2.default)(cssPropertyValue.value);\n        var string = parsedValue.value;\n        var value = cssPropertyValue.value.split(/,/).map(_sanitize2.default.css);\n\n        parsedValue.value = _sanitize2.default.css(font[0].value || font[0].string);\n        parsedValue.parsed = { value: value, type: 'font', string: string };\n    } else {\n        /**\n         * parse other css properties\n         */\n        try {\n            parsedValue.parsed = (0, _cssValue2.default)(cssPropertyValue.value);\n\n            if (parsedValue.parsed.length === 1) {\n                parsedValue.parsed = parsedValue.parsed[0];\n            }\n\n            if (parsedValue.parsed.type && parsedValue.parsed.type === 'number' && parsedValue.parsed.unit === '') {\n                parsedValue.value = parsedValue.parsed.value;\n            }\n        } catch (e) {\n            // TODO improve css-parse lib to handle properties like\n            // `-webkit-animation-timing-function :  cubic-bezier(0.25, 0.1, 0.25, 1)\n        }\n    }\n\n    return parsedValue;\n};\n\nvar parseCSS = function parseCSS(response, cssProperty) {\n    var parsedCSS = [];\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = (0, _getIterator3.default)(response), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var res = _step.value;\n\n            parsedCSS.push(parse(res, cssProperty));\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    if (parsedCSS.length === 1) {\n        return parsedCSS[0];\n    } else if (parsedCSS.length === 0) {\n        return null;\n    }\n\n    return parsedCSS;\n};\n\nexports.default = parseCSS;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getCurrentTabId.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Retrieve the current window handle.\n *\n * <example>\n    :getCurrenteTabId.js\n    it('should return the current tab id', function () {\n        browser.url('http://webdriver.io')\n\n        var tabId = browser.getCurrentTabId()\n        console.log(tabid)\n        // outputs something like the following:\n        // \"CDwindow-C43FB686-949D-4232-828B-583398FBD0C0\"\n    })\n * </example>\n *\n * @alias browser.getCurrentTabId\n * @returns {String} the window handle URL of the current focused window\n * @uses protocol/windowHandle\n * @type window\n *\n */\n\nvar getCurrentTabId = function getCurrentTabId() {\n    return this.unify(this.windowHandle(), {\n        extractValue: true\n    });\n};\n\nexports.default = getCurrentTabId;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getElementSize.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getElementSize = function getElementSize(selector, prop) {\n    return this.elements(selector).then(function (res) {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new _ErrorHandler.CommandError(7, selector || this.lastResult.selector);\n        }\n\n        var elementIdSizeCommands = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var elem = _step.value;\n\n                elementIdSizeCommands.push(this.elementIdSize(elem.ELEMENT));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _promise2.default.all(elementIdSizeCommands);\n    }).then(function (sizes) {\n        /**\n         * result already unwrapped when command was reran\n         */\n        if (!Array.isArray(sizes)) {\n            return sizes;\n        }\n\n        sizes = sizes.map(function (size) {\n            if (typeof prop === 'string' && prop.match(/(width|height)/)) {\n                return size.value[prop];\n            }\n\n            return {\n                width: size.value.width,\n                height: size.value.height\n            };\n        });\n\n        return sizes.length === 1 ? sizes[0] : sizes;\n    });\n}; /**\n    *\n    * Get the width and height for an DOM-element based given selector.\n    *\n    * <example>\n       :getElementSize.js\n       it('should give me the size of an element', function () {\n           browser.url('http://github.com')\n           var logo = $('.octicon-mark-github')\n   \n           var size = logo.getElementSize()\n           // or\n           size = browser.getElementSize('.octicon-mark-github')\n           console.log(size) // outputs: { width: 32, height: 32 }\n   \n           var width = logo.getElementSize('width')\n           // or\n           width = browser.getElementSize('.octicon-mark-github', 'width')\n           console.log(width) // outputs: 32\n   \n           var height = logo.getElementSize('height')\n           // or\n           height = browser.getElementSize('.octicon-mark-github', 'height')\n           console.log(height) // outputs: 32\n       })\n    * </example>\n    *\n    * @alias browser.getElementSize\n    * @param   {String} selector element with requested size\n    * @returns {Object}          requested element size (`{width:number, height:number}`)\n    * @uses protocol/elements, protocol/elementIdSize\n    * @type property\n    *\n    */\n\nexports.default = getElementSize;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getGeoLocation.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Get the current geolocation.\n *\n * <example>\n    :getGeoLocation.js\n    it('should return my current location', function () {\n        var location = browser.getGeoLocation()\n        console.log(location)\n        // outputs:\n        // {\n        //     latitude: 51.1045407,\n        //     longitude: 13.2017384,\n        //     altitude: 20.23345\n        // }\n    })\n * </example>\n *\n * @alias browser.getGeoLocation\n * @returns {Object} the current geo location (`{latitude: number, longitude: number, altitude: number}`)\n * @uses protocol/location\n * @type mobile\n *\n */\n\nvar getGeoLocation = function getGeoLocation() {\n    return this.unify(this.location(), {\n        extractValue: true\n    });\n};\n\nexports.default = getGeoLocation;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getGridNodeDetails.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Get the details of the Selenium Grid node running a session\n *\n * <example>\n    :grid.js\n    it('should return grid information', function () {\n        console.log(browser.getGridNodeDetails())\n        // {\n        //     success: true,\n        //     msg: \"proxy found !\",\n        //     id: \"MacMiniA10\",\n        //     request: {\n        //         ...\n        //         configuration: {\n        //             ...\n        //         },\n        //         capabilities: [\n        //             {\n        //                 ...\n        //             }\n        //         ]\n        //     }\n        // }\n    })\n * </example>\n *\n * @alias browser.getGridNodeDetails\n * @uses protocol/gridTestSession, protocol/gridProxyDetails\n * @type grid\n */\n\nvar getGridNodeDetails = function getGridNodeDetails() {\n    var _this = this;\n\n    return this.gridTestSession().then(function (session) {\n        return _this.gridProxyDetails(session.proxyId).then(function (details) {\n            delete session.msg;\n            delete session.success;\n\n            delete details.msg;\n            delete details.success;\n            delete details.id;\n\n            return (0, _assign2.default)(details, session);\n        });\n    }).catch(function (e) {\n        if (e.seleniumStack && e.seleniumStack.type === 'GridApiError') {\n            return {\n                error: e.message\n            };\n        }\n    });\n};\n\nexports.default = getGridNodeDetails;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getHTML.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar _getHTML = require('../scripts/getHTML');\n\nvar _getHTML2 = _interopRequireDefault(_getHTML);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Get source code of specified DOM element by selector.\n *\n * <example>\n    :index.html\n    <div id=\"test\">\n        <span>Lorem ipsum dolor amet</span>\n    </div>\n\n    :getHTML.js\n    it('should get html for certain elements', function () {\n        var outerHTML = browser.getHTML('#test');\n        console.log(outerHTML);\n        // outputs:\n        // \"<div id=\"test\"><span>Lorem ipsum dolor amet</span></div>\"\n\n        var innerHTML = browser.getHTML('#test', false);\n        console.log(innerHTML);\n        // outputs:\n        // \"<span>Lorem ipsum dolor amet</span>\"\n    });\n * </example>\n *\n * @alias browser.getHTML\n * @param {String}   selector           element to get the current DOM structure from\n * @param {Boolean=} includeSelectorTag if true it includes the selector element tag (default: true)\n * @uses action/selectorExecute\n * @type property\n *\n */\n\nvar getHTML = function getHTML(selector, includeSelectorTag) {\n    var _this = this;\n\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if includeSelectorTag is used\n     */\n    includeSelectorTag = typeof includeSelectorTag === 'boolean' ? includeSelectorTag : true;\n\n    return this.selectorExecute(selector, _getHTML2.default, includeSelectorTag).then(function (html) {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!html) {\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        return html && html.length === 1 ? html[0] : html;\n    });\n};\n\nexports.default = getHTML;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/scripts/getHTML.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * get HTML of selector element\n *\n * @param  {String}  selector            element to get HTML from\n * @param  {Boolean} includeSelectorTag  if true, selector tag gets included (uses outerHTML)\n * @return {String}                      html source\n */\n\nvar getHTML = function getHTML(elements, includeSelectorTag) {\n    var ret = [];\n\n    if (elements.length === 0) {\n        return null;\n    }\n\n    for (var i = 0; i < elements.length; ++i) {\n        ret.push(elements[i][includeSelectorTag ? 'outerHTML' : 'innerHTML']);\n    }\n\n    return ret;\n};\n\nexports.default = getHTML;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getLocation.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getLocation = function getLocation(selector, prop) {\n    var _this = this;\n\n    return this.elements(selector).then(function (res) {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        var results = [];\n        var that = _this;\n        return new _promise2.default(function (resolve, reject) {\n            var hasError = false;\n\n            function processNext() {\n                var current = res.value.pop();\n\n                return that.elementIdLocation(current.ELEMENT).catch(function (err) {\n                    hasError = true;\n                    reject(err);\n                }).then(function (location) {\n                    if (hasError) {\n                        return;\n                    }\n\n                    if (prop === 'x' || prop === 'y') {\n                        results.push(location.value[prop]);\n                    } else {\n                        results.push({\n                            x: location.value.x,\n                            y: location.value.y\n                        });\n                    }\n\n                    if (res.value.length) {\n                        return processNext();\n                    } else {\n                        resolve(results.length === 1 ? results[0] : results);\n                    }\n                });\n            }\n\n            return processNext();\n        });\n    });\n}; /**\n    *\n    * Determine an element’s location on the page. The point (0, 0) refers to\n    * the upper-left corner of the page.\n    *\n    * <example>\n       :getLocation.js\n       it('should get the location of one or multiple elements', function () {\n           browser.url('http://github.com');\n   \n           var location = browser.getLocation('.octicon-mark-github');\n           console.log(location); // outputs: { x: 150, y: 20 }\n   \n           var xLocation = browser.getLocation('.octicon-mark-github', 'x')\n           console.log(xLocation); // outputs: 150\n   \n           var yLocation = browser.getLocation('.octicon-mark-github', 'y')\n           console.log(yLocation); // outputs: 20\n       });\n    * </example>\n    *\n    * @alias browser.getLocation\n    * @param {String} selector    element with requested position offset\n    * @param {String} property    can be \"x\" or \"y\" to get a result value directly for easier assertions\n    * @returns {Object|Object[]}  The X and Y coordinates for the element on the page (`{x:number, y:number}`)\n    * @uses protocol/elements, protocol/elementIdLocation\n    * @type property\n    *\n    */\n\nexports.default = getLocation;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getLocationInView.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getLocationInView = function getLocationInView(selector, prop) {\n    var _this = this;\n\n    return this.elements(selector).then(function (res) {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        var elementIdLocationInViewCommands = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var elem = _step.value;\n\n                elementIdLocationInViewCommands.push(_this.elementIdLocationInView(elem.ELEMENT));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _promise2.default.all(elementIdLocationInViewCommands);\n    }).then(function (locations) {\n        /**\n         * result already unwrapped when command was reran\n         */\n        if (!Array.isArray(locations)) {\n            return locations;\n        }\n\n        locations = locations.map(function (location) {\n            if (typeof prop === 'string' && prop.match(/(x|y)/)) {\n                return location.value[prop];\n            }\n\n            return {\n                x: location.value.x,\n                y: location.value.y\n            };\n        });\n\n        return locations.length === 1 ? locations[0] : locations;\n    });\n}; /**\n    *\n    * Determine an element’s location on the screen once it has been scrolled into view.\n    *\n    * <example>\n       :getLocationInView.js\n       it('should get the location of one or multiple elements in view', function () {\n           browser.url('http://github.com');\n   \n           var location = browser.getLocation('.octicon-mark-github');\n           console.log(location); // outputs: { x: 150, y: 20 }\n   \n           var xLocation = browser.getLocation('.octicon-mark-github', 'x')\n           console.log(xLocation); // outputs: 150\n   \n           var yLocation = browser.getLocation('.octicon-mark-github', 'y')\n           console.log(yLocation); // outputs: 20\n       });\n    * </example>\n    *\n    * @alias browser.getLocationInView\n    * @param {String} selector    element with requested position offset\n    * @returns {Object|Object[]}  The X and Y coordinates for the element on the page (`{x:number, y:number}`)\n    *\n    * @uses protocol/elements, protocol/elementIdLocationInView\n    * @type property\n    *\n    */\n\nexports.default = getLocationInView;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getOrientation.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar getOrientation = function getOrientation() {\n    if (!this.isMobile) {\n        throw new _ErrorHandler.CommandError('getOrientation command is not supported on non mobile platforms');\n    }\n\n    return this.unify(this.orientation(), {\n        lowercase: true,\n        extractValue: true\n    });\n}; /**\n    *\n    * Get the current browser orientation. This command only works for mobile environments like Android Emulator,\n    * iOS Simulator or on real devices.\n    *\n    * <example>\n       :getOrientation.js\n       it('should get the orientation of my mobile device', function () {\n           var orientation = browser.getOrientation();\n           console.log(orientation); // outputs: \"landscape\"\n       });\n    * </example>\n    *\n    * @alias browser.getOrientation\n    * @returns {String} device orientation (`landscape/portrait`)\n    * @uses protocol/orientation\n    * @for android, ios\n    * @type mobile\n    *\n    */\n\nexports.default = getOrientation;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getSource.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Get source code of the page. This command won't work in mobile environments for native apps. If you running\n * hybrid tests make sure that you are in the webview before calling this command.\n *\n * <example>\n    :getSource.js\n    it('should get the source of the html document', function () {\n        browser.url('http://webdriver.io');\n\n        var source = browser.getSource();\n        console.log(source); // outputs: \"<!DOCTYPE html>\\n<title>Webdriver.io</title>...\"\n    });\n * </example>\n *\n * @alias browser.getSource\n * @returns {String} source code of current website\n * @uses protocol/source\n * @type property\n *\n */\n\nvar getSource = function getSource() {\n    return this.unify(this.source(), {\n        extractValue: true\n    });\n};\n\nexports.default = getSource;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getTabIds.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Retrieve a list of all window handles available in the session. You can use these handles to switch\n * to a different tab.\n *\n * <example>\n    :getTabIds.js\n    it('should get the source of the html document', function () {\n        browser.url('http://webdriver.io');\n\n        var tabIds = browser.getTabIds();\n        console.log(tabIds); // outputs: ['f9b387e0-99bd-11e6-8881-d3174a61fdce']\n\n        browser.newWindow('http://google.com');\n        tabIds = browser.getTabIds();\n        console.log(tabIds); // outputs: ['f9b387e0-99bd-11e6-8881-d3174a61fdce', 'fb4e9a40-99bd-11e6-8881-d3174a61fdce' ]\n    });\n * </example>\n *\n * @alias browser.getTabIds\n * @returns {String[]} a list of window handles\n * @uses protocol/windowHandles\n * @type window\n *\n */\n\nvar getTabIds = function getTabIds() {\n    return this.unify(this.windowHandles(), {\n        extractValue: true\n    });\n};\n\nexports.default = getTabIds;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getTagName.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getTagName = function getTagName(selector) {\n    var _this = this;\n\n    return this.elements(selector).then(function (res) {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        var elementIdNameCommands = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var elem = _step.value;\n\n                elementIdNameCommands.push(_this.elementIdName(elem.ELEMENT));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _this.unify(elementIdNameCommands, {\n            extractValue: true\n        });\n    });\n}; /**\n    *\n    * Get tag name of a DOM-element found by given selector.\n    *\n    * <example>\n       :index.html\n       <div id=\"elem\">Lorem ipsum</div>\n   \n       :getTagName.js\n       it('should demonstrate the getTagName command', function () {\n           var elem = $('#elem');\n   \n           var tagName = elem.getTagName();\n           console.log(tagName); // outputs: \"div\"\n       })\n    * </example>\n    *\n    * @alias browser.getTagName\n    * @param   {String}           selector   element with requested tag name\n    * @returns {String|String[]}             the element's tag name, as a lowercase string\n    * @uses protocol/elements, protocol/elementIdName\n    * @type property\n    *\n    */\n\nexports.default = getTagName;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getText.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getText = function getText(selector) {\n    var _this = this;\n\n    return this.elements(selector).then(function (res) {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        var elementIdTextCommands = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var elem = _step.value;\n\n                elementIdTextCommands.push(_this.elementIdText(elem.ELEMENT));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _this.unify(elementIdTextCommands, {\n            extractValue: true\n        });\n    });\n}; /**\n    *\n    * Get the text content from a DOM-element found by given selector. Make sure the element\n    * you want to request the text from [is interactable](http://www.w3.org/TR/webdriver/#interactable)\n    * otherwise you will get an empty string as return value. If the element is disabled or not\n    * visible and you still want to receive the text content use [getHTML](http://webdriver.io/api/property/getHTML.html)\n    * as a workaround.\n    *\n    * <example>\n       :index.html\n       <div id=\"elem\">\n           Lorem ipsum <strong>dolor</strong> sit amet,<br>\n           consetetur sadipscing elitr\n       </div>\n       <span style=\"display: none\">I am invisible</span>\n   \n       :getText.js\n       it('should get text of an element or elements', function () {\n           var text = browser.getText('#elem');\n           console.log(text);\n           // outputs the following:\n           // \"Lorem ipsum dolor sit amet,consetetur sadipscing elitr\"\n   \n           var spanText = browser.getText('span');\n           console.log(text);\n           // outputs \"\" (empty string) since element is not interactable\n       });\n   \n       it('get content from table cell', function () {\n           browser.url('http://the-internet.herokuapp.com/tables');\n           var rows = $$('#table1 tr');\n           var columns = rows[1].$$('td'); // get columns of 2nd row\n           console.log(columns[2].getText()); // get text of 3rd column\n       });\n    * </example>\n    *\n    * @alias browser.getText\n    * @param   {String}           selector   element with requested text\n    * @returns {String|String[]}             content of selected element (all HTML tags are removed)\n    * @uses protocol/elements, protocol/elementIdText\n    * @type property\n    *\n    */\n\nexports.default = getText;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getTitle.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Get the title of current opened website. This command only works for browser environments or on mobile\n * devices with webview enabled (hybrid tests).\n *\n * <example>\n    :getTitle.js\n    it('should get the title of the document', function () {\n        browser.url('http://webdriver.io');\n\n        var title = browser.getTitle()\n        console.log(title);\n        // outputs the following:\n        // \"WebdriverIO - Selenium 2.0 javascript bindings for nodejs\"\n    });\n * </example>\n *\n * @alias browser.getTitle\n * @returns {String} current page title\n * @uses protocol/title\n * @type property\n *\n */\n\nvar getTitle = function getTitle() {\n    return this.unify(this.title(), {\n        extractValue: true\n    });\n};\n\nexports.default = getTitle;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getUrl.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Get the url of current opened website.\n *\n * <example>\n    :getUrl.js\n    it('should get the url of the current page', function () {\n        browser.url('http://webdriver.io');\n\n        var url = browser.getUrl();\n        console.log(url);\n        // outputs the following:\n        // \"http://webdriver.io\"\n    });\n * </example>\n *\n * @alias browser.getUrl\n * @returns {String} current page url\n * @uses protocol/url\n * @type property\n *\n */\n\nvar getUrl = function getUrl() {\n    return this.unify(this.url(), {\n        extractValue: true\n    });\n};\n\nexports.default = getUrl;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getValue.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getValue = function getValue(selector) {\n    var _this = this;\n\n    return this.elements(selector).then(function (res) {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        var elementIdAttributeCommands = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var elem = _step.value;\n\n                elementIdAttributeCommands.push(_this.elementIdAttribute(elem.ELEMENT, 'value'));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _this.unify(elementIdAttributeCommands, {\n            extractValue: true\n        });\n    });\n}; /**\n    *\n    * Get the value of a `<textarea>` or text `<input>` found by given selector.\n    *\n    * <example>\n       :index.html\n       <input type=\"text\" value=\"John Doe\" id=\"username\">\n   \n       :getValue.js\n       it('should demonstrate the getValue command', function () {\n           var inputUser = $('#username');\n   \n           var value = inputUser.getValue();\n           console.log(value); // outputs: \"John Doe\"\n       });\n    * </example>\n    *\n    * @alias browser.getValue\n    * @param   {String} selector input or textarea element\n    * @returns {String}          requested input value\n    * @uses protocol/elements, protocol/elementIdAttribute\n    * @type property\n    *\n    */\n\nexports.default = getValue;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/getViewportSize.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getViewportSize = require('../scripts/getViewportSize');\n\nvar _getViewportSize2 = _interopRequireDefault(_getViewportSize);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getViewportSize = function getViewportSize(prop) {\n    return this.execute(_getViewportSize2.default).then(function (res) {\n        if (typeof prop === 'string' && prop.match(/(width|height)/)) {\n            prop = 'screen' + prop.slice(0, 1).toUpperCase() + prop.slice(1);\n            return res.value[prop];\n        }\n\n        return {\n            width: res.value.screenWidth || 0,\n            height: res.value.screenHeight || 0\n        };\n    });\n}; /**\n    *\n    * Get viewport size of the current browser window. This command only works on desktop browser or in a mobile\n    * environment with a webview enabled.\n    *\n    * <example>\n       :getViewportSize.js\n       it('should return the viewport size', function () {\n           browser.url('http://webdriver.io');\n   \n           var size = browser.getViewportSize()\n           console.log(size); // outputs: {width: 1024, height: 768}\n   \n           var width = browser.getViewportSize('width')\n           console.log(size); // outputs: 1024\n   \n           var height = browser.getViewportSize('height');\n           console.log(height); // outputs: 768\n       });\n    * </example>\n    *\n    * @alias browser.getViewportSize\n    * @param {String} property  if \"width\" or \"height\" is set it returns only that property\n    * @returns {Object}  viewport width and height of the browser\n    * @uses protocol/execute\n    * @type window\n    *\n    */\n\nexports.default = getViewportSize;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/scripts/getViewportSize.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * helper function to get the viewport size of the browser\n */\n\nvar getViewportSize = function getViewportSize() {\n    return {\n        screenWidth: Math.max(document.documentElement.clientWidth, window.innerWidth || 0),\n        screenHeight: Math.max(document.documentElement.clientHeight, window.innerHeight || 0)\n    };\n};\n\nexports.default = getViewportSize;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/hasFocus.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Return true or false if the selected DOM-element currently has focus.\n *\n * <example>\n    :index.html\n    <input name=\"login\" autofocus=\"\" />\n\n    :hasFocus.js\n    it('should detect the focus of an element', function () {\n        browser.url('/');\n\n        var loginInput = $('[name=\"login\"]');\n        console.log(loginInput.hasFocus()); // outputs: false\n\n        loginInput.click();\n        console.log(loginInput.hasFocus()); // outputs: true\n    })\n * </example>\n *\n * @alias browser.hasFocus\n * @param {String} selector   select active element\n * @returns {Boolean}         true if element has focus\n * @uses protocol/execute\n * @type state\n *\n */\n\nvar hasFocus = function hasFocus(selector) {\n    var result = this.execute(function (selector) {\n        var focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            return false;\n        } else if (document.querySelector) {\n            return focused === document.querySelector(selector);\n        }\n\n        return false;\n    }, selector);\n\n    return result.then(function (result) {\n        return result.value;\n    });\n};\n\nexports.default = hasFocus;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/hold.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar hold = function hold(selector) {\n    var _this = this;\n\n    return this.element(selector).then(function (res) {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new _ErrorHandler.RuntimeError(7);\n        }\n\n        return _this.touchLongClick(res.value.ELEMENT);\n    });\n}; /**\n    *\n    * Long press on an element using finger motion events. This command works only in a\n    * mobile context.\n    *\n    * @alias browser.hold\n    * @param {String} selector element to hold on\n    * @uses protocol/element, protocol/touchLongClick\n    * @type mobile\n    *\n    */\n\nexports.default = hold;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/isEnabled.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isEnabled = function isEnabled(selector) {\n    var _this = this;\n\n    return this.elements(selector).then(function (res) {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        var elementIdEnabledCommands = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var elem = _step.value;\n\n                elementIdEnabledCommands.push(_this.elementIdEnabled(elem.ELEMENT));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _this.unify(elementIdEnabledCommands, {\n            extractValue: true\n        });\n    });\n}; /**\n    *\n    * Return true or false if the selected DOM-element found by given selector is enabled.\n    *\n    * <example>\n       :index.html\n       <input type=\"text\" name=\"inputField\" class=\"input1\">\n       <input type=\"text\" name=\"inputField\" class=\"input2\" disabled>\n       <input type=\"text\" name=\"inputField\" class=\"input3\" disabled=\"disabled\">\n   \n       :isEnabled.js\n       it('should detect if an element is enabled', function () {\n           var isEnabled = browser.isEnabled('.input1');\n           console.log(isEnabled); // outputs: true\n   \n           var isEnabled2 = browser.isEnabled('.input2');\n           console.log(isEnabled2); // outputs: false\n   \n           var isEnabled3 = browser.isEnabled('.input3')\n           console.log(isEnabled3); // outputs: false\n       });\n    * </example>\n    *\n    * @alias browser.isEnabled\n    * @param   {String}             selector  DOM-element\n    * @returns {Boolean|Boolean[]}            true if element(s)* (is|are) enabled\n    * @uses protocol/elements, protocol/elementIdEnabled\n    * @type state\n    *\n    */\n\nexports.default = isEnabled;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/isExisting.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Returns true if at least one element is existing by given selector\n *\n * <example>\n    :index.html\n    <div id=\"notDisplayed\" style=\"display: none\"></div>\n    <div id=\"notVisible\" style=\"visibility: hidden\"></div>\n    <div id=\"notInViewport\" style=\"position:absolute; left: 9999999\"></div>\n    <div id=\"zeroOpacity\" style=\"opacity: 0\"></div>\n\n    :isExisting.js\n    it('should detect if elements are existing', function () {\n        var isExisting;\n        isExisting = browser.isExisting('#someRandomNonExistingElement');\n        console.log(isExisting); // outputs: false\n\n        isExisting = browser.isExisting('#notDisplayed');\n        console.log(isExisting); // outputs: true\n\n        isExisting = browser.isExisting('#notVisible');\n        console.log(isExisting); // outputs: true\n\n        isExisting = browser.isExisting('#notInViewport');\n        console.log(isExisting); // outputs: true\n\n        isExisting = browser.isExisting('#zeroOpacity');\n        console.log(isExisting); // outputs: true\n    });\n * </example>\n *\n * @alias browser.isExisting\n * @param   {String}             selector  DOM-element\n * @returns {Boolean|Boolean[]}            true if element(s)* [is|are] existing\n * @uses protocol/elements\n * @type state\n *\n */\n\nvar isExisting = function isExisting(selector) {\n    return this.elements(selector).then(function (res) {\n        if (Array.isArray(res.value) && res.value.length > 0) {\n            return true;\n        }\n\n        return false;\n    });\n};\n\nexports.default = isExisting;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/isSelected.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isSelected = function isSelected(selector) {\n    var _this = this;\n\n    return this.elements(selector).then(function (res) {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        var elementIdSelectedCommands = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var elem = _step.value;\n\n                elementIdSelectedCommands.push(_this.elementIdSelected(elem.ELEMENT));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _this.unify(elementIdSelectedCommands, {\n            extractValue: true\n        });\n    });\n}; /**\n    *\n    * Return true or false if an `<option>` element, or an `<input>` element of type\n    * checkbox or radio is currently selected found by given selector.\n    *\n    * <example>\n       :index.html\n       <select name=\"selectbox\" id=\"selectbox\">\n           <option value=\"John Doe\">John Doe</option>\n           <option value=\"Layla Terry\" selected=\"selected\">Layla Terry</option>\n           <option value=\"Bill Gilbert\">Bill Gilbert\"</option>\n       </select>\n   \n       :isSelected.js\n       it('should detect if an element is selected', function () {\n           var element = $('[value=\"Layla Terry\"]');\n           console.log(element.isSelected()); // outputs: true\n   \n           browser.selectByValue('#selectbox', 'Bill Gilbert');\n           console.log(element.isSelected()); // outputs: false\n       });\n    * </example>\n    *\n    * @alias browser.isSelected\n    * @param   {String}             selector  option element or input of type checkbox or radio\n    * @returns {Boolean|Boolean[]}            true if element is selected\n    * @uses protocol/elements, protocol/elementIdSelected\n    * @type state\n    *\n    */\n\nexports.default = isSelected;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/isVisible.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Return true if the selected DOM-element found by given selector is visible. Returns an array if multiple DOM-elements are found for the given selector.\n *\n * <example>\n    :index.html\n    <div id=\"notDisplayed\" style=\"display: none\"></div>\n    <div id=\"notVisible\" style=\"visibility: hidden\"></div>\n    <div id=\"notInViewport\" style=\"position:absolute; left: 9999999\"></div>\n    <div id=\"zeroOpacity\" style=\"opacity: 0\"></div>\n\n    :isVisible.js\n    it('should detect if an element is visible', function () {\n        var isVisible = browser.isVisible('#notDisplayed');\n        console.log(isVisible); // outputs: false\n\n        isVisible = browser.isVisible('#notVisible');\n        console.log(isVisible); // outputs: false\n\n        isVisible = browser.isVisible('#notExisting');\n        console.log(isVisible); // outputs: false\n\n        isVisible = browser.isVisible('#notInViewport');\n        console.log(isVisible); // outputs: true\n\n        isVisible = browser.isVisible('#zeroOpacity');\n        console.log(isVisible); // outputs: true\n    });\n * </example>\n *\n * @alias browser.isVisible\n * @param   {String}             selector  DOM-element\n * @returns {Boolean|Boolean[]}            true if element(s)* [is|are] visible\n * @uses protocol/elements, protocol/elementIdDisplayed\n * @type state\n *\n */\n\nvar isVisible = function isVisible(selector) {\n    var _this = this;\n\n    return this.elements(selector).then(function (res) {\n        /**\n         * if element does not exist it is automatically not visible ;-)\n         */\n        if (!res.value || res.value.length === 0) {\n            return false;\n        }\n\n        var elementIdDisplayedCommands = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var elem = _step.value;\n\n                elementIdDisplayedCommands.push(_this.elementIdDisplayed(elem.ELEMENT));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _this.unify(elementIdDisplayedCommands, {\n            extractValue: true\n        });\n    });\n};\n\nexports.default = isVisible;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/isVisibleWithinViewport.js":"'use strict';\n\nvar _isWithinViewport = require('../scripts/isWithinViewport');\n\nvar _isWithinViewport2 = _interopRequireDefault(_isWithinViewport);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = function isVisibleWithinViewport(selector) {\n    return this.selectorExecute(selector, _isWithinViewport2.default).then(function (res) {\n        if (Array.isArray(res) && res.length === 1) {\n            return res[0];\n        }\n\n        return res;\n    }, function (err) {\n        /**\n         * if element does not exist it is automatically not visible :-)\n         */\n        if (err.message.indexOf('NoSuchElement') > -1) {\n            return true;\n        }\n\n        throw err;\n    });\n}; /**\n    *\n    * Return true if the selected DOM-element found by given selector is visible and within the viewport.\n    *\n    * <example>\n       :index.html\n       <div id=\"notDisplayed\" style=\"display: none\"></div>\n       <div id=\"notVisible\" style=\"visibility: hidden\"></div>\n       <div id=\"notInViewport\" style=\"position:absolute; left: 9999999\"></div>\n       <div id=\"zeroOpacity\" style=\"opacity: 0\"></div>\n   \n       :isVisibleWithinViewport.js\n       :isVisible.js\n       it('should detect if an element is visible', function () {\n           var isVisibleWithinViewport = browser.isVisibleWithinViewport('#notDisplayed');\n           console.log(isVisibleWithinViewport); // outputs: false\n   \n           isVisibleWithinViewport = browser.isVisibleWithinViewport('#notVisible');\n           console.log(isVisibleWithinViewport); // outputs: false\n   \n           isVisibleWithinViewport = browser.isVisibleWithinViewport('#notExisting');\n           console.log(isVisibleWithinViewport); // outputs: false\n   \n           isVisibleWithinViewport = browser.isVisibleWithinViewport('#notInViewport');\n           console.log(isVisibleWithinViewport); // outputs: false\n   \n           isVisibleWithinViewport = browser.isVisibleWithinViewport('#zeroOpacity');\n           console.log(isVisibleWithinViewport); // outputs: false\n       });\n    * </example>\n    *\n    * @alias browser.isVisibleWithinViewport\n    * @param   {String}             selector  DOM-element\n    * @returns {Boolean|Boolean[]}            true if element(s)* [is|are] visible\n    * @uses protocol/selectorExecute, protocol/timeoutsAsyncScript\n    * @type state\n    *\n    */\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/scripts/isWithinViewport.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * check if element is visible and within the viewport\n *\n * @param {String}  elements  DOM elements to check against\n *\n * @see  waitForVisible\n */\n\nvar isWithinViewport = function isWithinViewport(elements) {\n    var dde = document.documentElement;\n    var result = [];\n\n    if (elements.length === 0) {\n        throw new Error('NoSuchElement');\n    }\n\n    for (var i = 0; i < elements.length; ++i) {\n        var elem = elements[i];\n        var isWithinViewport = true;\n\n        while (elem.parentNode && elem.parentNode.getBoundingClientRect) {\n            var elemDimension = elem.getBoundingClientRect();\n            var elemComputedStyle = window.getComputedStyle(elem);\n            var viewportDimension = {\n                width: dde.clientWidth,\n                height: dde.clientHeight\n            };\n\n            isWithinViewport = isWithinViewport && elemComputedStyle.display !== 'none' && elemComputedStyle.visibility === 'visible' && parseFloat(elemComputedStyle.opacity, 10) > 0 && elemDimension.bottom > 0 && elemDimension.right > 0 && elemDimension.top < viewportDimension.height && elemDimension.left < viewportDimension.width;\n\n            elem = elem.parentNode;\n        }\n        result.push(isWithinViewport);\n    }\n    return result;\n};\n\nexports.default = isWithinViewport;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/leftClick.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _handleMouseButtonCommand = require('../helpers/handleMouseButtonCommand');\n\nvar _handleMouseButtonCommand2 = _interopRequireDefault(_handleMouseButtonCommand);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar leftClick = function leftClick(selector, xoffset, yoffset) {\n  return _handleMouseButtonCommand2.default.call(this, selector, 'left', xoffset, yoffset);\n}; /**\n    *\n    * Apply left click on an element. If selector is not provided, click on the last\n    * moved-to location.\n    *\n    * @alias browser.leftClick\n    * @param {String} selector element to click on\n    * @param {Number} xoffset  X offset to move to, relative to the top-left corner of the element.\n    * @param {Number} yoffset  Y offset to move to, relative to the top-left corner of the element.\n    * @uses protocol/element, protocol/buttonPress\n    * @type action\n    *\n    */\n\nexports.default = leftClick;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/helpers/handleMouseButtonCommand.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\n/**\n * call must be scoped to the webdriverio client\n */\nvar handleMouseButtonCommand = function handleMouseButtonCommand(selector, button, xoffset, yoffset) {\n    var _this = this;\n\n    /**\n     * mobile only supports simple clicks\n     */\n    if (this.isMobile) {\n        return this.click(selector);\n    }\n\n    /**\n     * just press button if no selector is given\n     */\n    if (selector === undefined) {\n        return this.buttonPress(button);\n    }\n\n    return this.element(selector).then(function (res) {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new _ErrorHandler.RuntimeError(7);\n        }\n\n        /**\n         * simulate event in safari\n         */\n        if (_this.desiredCapabilities.browserName === 'safari') {\n            return _this.moveTo(res.value.ELEMENT, xoffset, yoffset).execute(function (elem, x, y, button) {\n                return window._wdio_simulate(elem, 'mousedown', 0, 0, button) && window._wdio_simulate(elem, 'mouseup', 0, 0, button);\n            }, res.value, xoffset, yoffset, button);\n        }\n\n        return _this.moveTo(res.value.ELEMENT, xoffset, yoffset).buttonPress(button);\n    });\n};\n\nexports.default = handleMouseButtonCommand;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/middleClick.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _handleMouseButtonCommand = require('../helpers/handleMouseButtonCommand');\n\nvar _handleMouseButtonCommand2 = _interopRequireDefault(_handleMouseButtonCommand);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar middleClick = function middleClick(selector, xoffset, yoffset) {\n  return _handleMouseButtonCommand2.default.call(this, selector, 'middle', xoffset, yoffset);\n}; /**\n    *\n    * Apply middle click on an element. If selector is not provided, click on the last\n    * moved-to location.\n    *\n    * @alias browser.middleClick\n    * @param {String} selector element to click on\n    * @param {Number} xoffset  X offset to move to, relative to the top-left corner of the element.\n    * @param {Number} yoffset  Y offset to move to, relative to the top-left corner of the element.\n    * @uses protocol/element, protocol/buttonPress\n    * @type action\n    *\n    */\n\nexports.default = middleClick;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/moveToObject.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar moveToObject = function moveToObject(selector, xoffset, yoffset) {\n    var _this = this;\n\n    /**\n     * check for offset params\n     */\n    var hasOffsetParams = true;\n    if (typeof xoffset !== 'number' && typeof yoffset !== 'number') {\n        hasOffsetParams = false;\n    }\n\n    if (this.isMobile) {\n        return this.element(selector).then(function (res) {\n            /**\n             * check if element was found and throw error if not\n             */\n            if (!res.value) {\n                throw new _ErrorHandler.RuntimeError(7);\n            }\n\n            return _this.elementIdSize(res.value.ELEMENT).then(function (size) {\n                return _this.elementIdLocation(res.value.ELEMENT).then(function (location) {\n                    return { size: size, location: location };\n                });\n            });\n        }).then(function (res) {\n            var x = res.location.value.x + res.size.value.width / 2;\n            var y = res.location.value.y + res.size.value.height / 2;\n\n            if (hasOffsetParams) {\n                x = res.location.value.x + xoffset;\n                y = res.location.value.y + yoffset;\n            }\n\n            return _this.touchMove(x, y);\n        });\n    }\n\n    return this.element(selector).then(function (res) {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new _ErrorHandler.RuntimeError(7);\n        }\n\n        return _this.moveTo(res.value.ELEMENT, xoffset, yoffset);\n    });\n}; /**\n    *\n    * Move the mouse by an offset of the specificed element. If an element is provided but no\n    * offset, the mouse will be moved to the center of the element. If the element is not\n    * visible, it will be scrolled into view.\n    *\n    * @alias browser.moveToObject\n    * @param {String} selector element to move to\n    * @param {Number} xoffset  X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.\n    * @param {Number} yoffset  Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.\n    * @uses protocol/element, protocol/elementIdLocation\n    * @type action\n    *\n    */\n\nexports.default = moveToObject;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/newWindow.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _newWindow = require('../scripts/newWindow');\n\nvar _newWindow2 = _interopRequireDefault(_newWindow);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Open new window in browser. This command is the equivalent function to `window.open()`. This command does not\n * work in mobile environments.\n *\n * __Note:__ When calling this command you automatically switch to the new window.\n *\n * <example>\n    :newWindowSync.js\n    it('should open a new tab', function () {\n        browser.url('http://google.com')\n        console.log(browser.getTitle()); // outputs: \"Google\"\n\n        browser.newWindow('http://webdriver.io', 'WebdriverIO window', 'width=420,height=230,resizable,scrollbars=yes,status=1')\n        console.log(browser.getTitle()); // outputs: \"WebdriverIO - Selenium 2.0 javascript bindings for nodejs\"\n\n        browser.close()\n        console.log(browser.getTitle()); // outputs: \"Google\"\n    });\n * </example>\n *\n * @alias browser.newWindow\n * @param {String} url            website URL to open\n * @param {String} windowName     name of the new window\n * @param {String} windowFeatures features of opened window (e.g. size, position, scrollbars, etc.)\n * @uses protocol/execute, window/getTabIds, window/switchTab\n * @type window\n *\n */\n\nvar newWindow = function newWindow(url) {\n    var _this = this;\n\n    var windowName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var windowFeatures = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n    /*!\n     * parameter check\n     */\n    if (typeof url !== 'string' || typeof windowName !== 'string' || typeof windowFeatures !== 'string') {\n        throw new _ErrorHandler.CommandError('number or type of arguments don\\'t agree with newWindow command');\n    }\n\n    /*!\n     * mobile check\n     */\n    if (this.isMobile) {\n        throw new _ErrorHandler.CommandError('newWindow command is not supported on mobile platforms');\n    }\n\n    return this.execute(_newWindow2.default, url, windowName, windowFeatures).getTabIds().then(function (tabs) {\n        return _this.switchTab(tabs[tabs.length - 1]);\n    });\n};\n\nexports.default = newWindow;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/scripts/newWindow.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * opens new window via window.open\n * @param  {String} url            The URL to be loaded in the newly opened window.\n * @param  {String} windowName     A string name for the new window.\n * @param  {String} windowFeatures An optional parameter listing the features (size, position, scrollbars, etc.) of the new window as a string.\n *\n * @see  https://developer.mozilla.org/en-US/docs/Web/API/Window.open\n */\n\n/* global window */\nvar newWindow = function newWindow(url) {\n  var windowName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'new window';\n  var windowFeatures = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  window.open(url, windowName, windowFeatures);\n};\n\nexports.default = newWindow;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/pause.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Pauses execution for a specific amount of time. It is recommended to not use this command to wait for an\n * element to show up. In order to avoid flaky test results it is better to use commands like\n * [`waitforExist`](/api/utility/waitForExist.html) or other waitFor* commands.\n *\n * <example>\n    :pause.js\n    it('should pause the execution', function () {\n        var starttime = new Date().getTime();\n        browser.pause(3000);\n        var endtime = new Date().getTime();\n        console.log(endtime - starttime); // outputs: 3000\n    });\n * </example>\n *\n * @alias browser.pause\n * @param {Number} milliseconds time in ms\n * @type utility\n *\n */\n\nvar pause = function pause() {\n    var milliseconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n\n    return new _promise2.default(function (resolve) {\n        return setTimeout(resolve, milliseconds);\n    });\n};\n\nexports.default = pause;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/release.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * Release touch sequence on specific element.\n *\n * @alias browser.release\n * @param {String} selector element to release on\n * @uses property/getLocation, protocol/touchUp\n * @type mobile\n *\n */\n\nvar release = function release(selector) {\n  var _this = this;\n\n  return this.getLocation(selector).then(function (res) {\n    return _this.touchUp(res.x, res.y);\n  });\n};\n\nexports.default = release;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/reload.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Creates a new Selenium session with your current capabilities. This is useful if you\n * test highly stateful application where you need to clean the browser session between\n * the tests in your spec file to avoid creating hundreds of single test files with WDIO.\n * Be careful though, this command affects your test time tremendously since spawning\n * new Selenium sessions is very time consuming especially when using cloud services.\n *\n * <example>\n    :reloadSync.js\n    it('should reload my session', function () {\n        console.log(browser.sessionId); // outputs: e042b3f3cd5a479da4e171825e96e655\n        browser.reload();\n        console.log(browser.sessionId); // outputs: 9a0d9bf9d4864160aa982c50cf18a573\n    })\n * </example>\n *\n * @alias browser.reload\n * @type utility\n *\n */\n\nvar reload = function reload() {\n    var _this = this;\n\n    var oldSessionId = this.requestHandler.sessionID;\n\n    return this.end().init().then(function (res) {\n        var newSessionId = _this.requestHandler.sessionID;\n\n        if (!Array.isArray(_this.options.onReload)) {\n            return _promise2.default.resolve();\n        }\n\n        return _promise2.default.all(_this.options.onReload.map(function (hook) {\n            return hook(oldSessionId, newSessionId);\n        }));\n    }).catch(function (e) {\n        console.log(\"Error in onReload hook: \\\"\" + e.stack + \"\\\"\");\n    });\n};\n\nexports.default = reload;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/rightClick.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _handleMouseButtonCommand = require('../helpers/handleMouseButtonCommand');\n\nvar _handleMouseButtonCommand2 = _interopRequireDefault(_handleMouseButtonCommand);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar rightClick = function rightClick(selector, xoffset, yoffset) {\n  return _handleMouseButtonCommand2.default.call(this, selector, 'right', xoffset, yoffset);\n}; /**\n    *\n    * Apply right click on an element. If selector is not provided, click on the last\n    * moved-to location.\n    *\n    * @alias browser.rightClick\n    * @param {String} selector element to click on\n    * @param {Number} xoffset  X offset to move to, relative to the top-left corner of the element.\n    * @param {Number} yoffset  Y offset to move to, relative to the top-left corner of the element.\n    * @uses protocol/element, protocol/buttonPress\n    * @type action\n    *\n    */\n\nexports.default = rightClick;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/saveScreenshot.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar saveScreenshot = function saveScreenshot(filename) {\n    var _this = this;\n\n    return this.screenshot().then(function (res) {\n        _this.emit('screenshot', { data: res.value, filename: filename });\n\n        var screenshot = new Buffer(res.value, 'base64');\n\n        if (typeof filename === 'string') {\n            _fs2.default.writeFileSync(filename, screenshot);\n        }\n\n        return screenshot;\n    });\n}; /**\n    *\n    * Save a screenshot as a base64 encoded PNG with the current state of the browser. Be aware that some Selenium driver\n    * are taking screenshots of the whole document (e.g. phantomjs) and others only of the current viewport. If you want\n    * to always be sure that the screenshot has the size of the whole document, use [wdio-screenshot](https://www.npmjs.com/package/wdio-screenshot)\n    * to enhance this command with that functionality.\n    *\n    * <example>\n       :saveScreenshot.js\n       it('should save a screenshot of the browser view', function () {\n           // receive screenshot as Buffer\n           var screenshot = browser.saveScreenshot(); // returns base64 string buffer\n           fs.writeFileSync('./myShort.png', screenshot)\n   \n           // save screenshot to file and receive as Buffer\n           screenshot = browser.saveScreenshot('./snapshot.png');\n   \n           // save screenshot to file\n           browser.saveScreenshot('./snapshot.png');\n       });\n    * </example>\n    *\n    * @alias browser.saveScreenshot\n    * @param {Function|String=}   filename    path to the generated image (relative to the execution directory)\n    * @uses protocol/screenshot\n    * @type utility\n    *\n    */\n\nexports.default = saveScreenshot;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/scroll.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar _scroll = require('../scripts/scroll');\n\nvar _scroll2 = _interopRequireDefault(_scroll);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Scroll to a specific element. You can also append/pass two offset values as parameter\n * to scroll to a specific position.\n *\n * <example>\n    :scroll.js\n    it('should demonstrate the scroll command', function () {\n        var elem = $('#myElement');\n\n        // scroll to specific element\n        elem.scroll();\n\n        // scroll to specific element with offset\n        // scroll offset will be added to elements position\n        elem.scroll(100, 100);\n\n        // scroll to specific x and y position\n        browser.scroll(0, 250);\n    });\n * </example>\n *\n * @alias browser.scroll\n * @param {String=}  selector  element to scroll to\n * @param {Number=}   xoffset   x offset to scroll to\n * @param {Number=}   yoffset   y offset to scroll to\n * @uses protocol/element, protocol/elementIdLocation, protocol/touchScroll, protocol/execute\n * @type utility\n *\n */\n\nvar scroll = function scroll(selector, xoffset, yoffset) {\n    var _this = this;\n\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if an offset is used\n     */\n    xoffset = typeof xoffset === 'number' ? xoffset : 0;\n    yoffset = typeof yoffset === 'number' ? yoffset : 0;\n\n    if (typeof selector === 'number' && typeof xoffset === 'number') {\n        yoffset = xoffset;\n        xoffset = selector;\n        selector = null;\n    }\n\n    if (this.isMobile) {\n        var queue = _promise2.default.resolve();\n\n        if (selector) {\n            queue = this.element(selector);\n        }\n\n        return queue.then(function (res) {\n            /**\n             * check if element was found and throw error if not\n             */\n            if (res && !res.value) {\n                throw new _ErrorHandler.RuntimeError(7);\n            }\n\n            if (typeof res !== 'undefined') {\n                selector = res.value.ELEMENT;\n            }\n\n            return _this.touchScroll(selector, xoffset, yoffset);\n        });\n    }\n\n    if (selector) {\n        return this.element(selector).then(function (res) {\n            /**\n             * check if element was found and throw error if not\n             */\n            if (!res.value) {\n                throw new _ErrorHandler.RuntimeError(7);\n            }\n\n            return _this.elementIdLocation(res.value.ELEMENT);\n        }).then(function (location) {\n            return _this.execute(_scroll2.default, location.value.x + xoffset, location.value.y + yoffset);\n        });\n    }\n\n    return this.execute(_scroll2.default, xoffset, yoffset);\n};\n\nexports.default = scroll;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/scripts/scroll.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/* global window */\nvar scroll = function scroll(x, y) {\n    return window.scrollTo(x, y);\n};\n\nexports.default = scroll;\nmodule.exports = exports[\"default\"];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/selectByAttribute.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar selectByAttribute = function selectByAttribute(selector, attribute, value) {\n    var _this = this;\n\n    /**\n     * convert value into string\n     */\n    if (typeof value === 'number') {\n        value = value.toString();\n    }\n\n    /**\n     * get options element by xpath\n     */\n    return this.element(selector).then(function (res) {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new _ErrorHandler.RuntimeError(7);\n        }\n\n        /**\n         * find option elem using xpath\n         */\n        var normalized = '[normalize-space(@' + attribute.trim() + ') = \"' + value.trim() + '\"]';\n        return _this.elementIdElement(res.value.ELEMENT, './option' + normalized + '|./optgroup/option' + normalized);\n    }).then(function (res) {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new _ErrorHandler.RuntimeError(7);\n        }\n\n        /**\n         * select option\n         */\n        return _this.elementIdClick(res.value.ELEMENT);\n    });\n}; /**\n    *\n    * Select option with a specific value.\n    *\n    * <example>\n       :example.html\n       <select id=\"selectbox\">\n           <option value=\"someValue0\">uno</option>\n           <option value=\"someValue1\">dos</option>\n           <option value=\"someValue2\">tres</option>\n           <option value=\"someValue3\">cuatro</option>\n           <option value=\"someValue4\">cinco</option>\n           <option name=\"someName5\" value=\"someValue5\">seis</option>\n       </select>\n   \n       :selectByAttribute.js\n       it('should demonstrate the selectByAttribute command', function () {\n           var selectBox = $('#selectbox');\n   \n           var value = selectBox.getValue();\n           console.log(value); // returns \"someValue0\"\n   \n           selectBox.selectByAttribute('value', 'someValue3');\n           console.log(selectBox.getValue()); // returns \"someValue3\"\n   \n           selectBox.selectByAttribute('name', 'someName5');\n           console.log(selectBox.getValue()); // returns \"someValue5\"\n       });\n    * </example>\n    *\n    * @alias browser.selectByAttribute\n    * @param {String} selector   select element that contains the options\n    * @param {String} attribute  attribute of option element to get selected\n    * @param {String} value      value of option element to get selected\n    * @uses protocol/element, protocol/elementIdClick, protocol/elementIdElement\n    * @type action\n    *\n    */\n\nexports.default = selectByAttribute;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/selectByIndex.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar selectByIndex = function selectByIndex(selector, index) {\n    var _this = this;\n\n    /*!\n     * negative index check\n     */\n    if (index < 0) {\n        throw new _ErrorHandler.CommandError('index needs to be 0 or any other positive number');\n    }\n\n    return this.element(selector).then(function (element) {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!element.value) {\n            throw new _ErrorHandler.RuntimeError(7);\n        }\n\n        return _this.elementIdElements(element.value.ELEMENT, '<option>');\n    }).then(function (elements) {\n        if (elements.value.length === 0) {\n            throw new _ErrorHandler.CommandError('select element (' + selector + ') doesn\\'t contain any option element');\n        }\n        if (elements.value.length - 1 < index) {\n            throw new _ErrorHandler.CommandError('option with index \"' + index + '\" not found. Select element (' + selector + ') only contains ' + elements.value.length + ' option elements');\n        }\n\n        return _this.elementIdClick(elements.value[index].ELEMENT);\n    });\n}; /**\n    *\n    * Select option with a specific index.\n    *\n    * <example>\n       :example.html\n       <select id=\"selectbox\">\n           <option value=\"someValue0\">uno</option>\n           <option value=\"someValue1\">dos</option>\n           <option value=\"someValue2\">tres</option>\n           <option value=\"someValue3\">cuatro</option>\n           <option value=\"someValue4\">cinco</option>\n           <option value=\"someValue5\">seis</option>\n       </select>\n   \n       :selectByIndex.js\n       it('should demonstrate the selectByIndex command', function () {\n           var selectBox = $('#selectbox');\n           console.log(selectBox.getValue()); // returns \"someValue0\"\n   \n           selectBox.selectByIndex(4);\n           console.log(selectBox.getValue()); // returns \"someValue4\"\n       });\n    * </example>\n    *\n    * @alias browser.selectByIndex\n    * @param {String} selector   select element that contains the options\n    * @param {Number} index      option index\n    * @uses protocol/element, protocol/elementIdElements, protocol/elementIdClick\n    * @type action\n    *\n    */\n\nexports.default = selectByIndex;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/selectByValue.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Select option with a specific value.\n *\n * <example>\n    :example.html\n    <select id=\"selectbox\">\n        <option value=\"someValue0\">uno</option>\n        <option value=\"someValue1\">dos</option>\n        <option value=\"someValue2\">tres</option>\n        <option value=\"someValue3\">cuatro</option>\n        <option value=\"someValue4\">cinco</option>\n        <option value=\"someValue5\">seis</option>\n    </select>\n\n    :selectByValue.js\n    it('should demonstrate the selectByValue command', function () {\n        var selectBox = $('#selectbox');\n        console.log(selectBox.getValue()); // returns \"someValue0\"\n\n        selectBox.selectByValue('someValue3');\n        console.log(selectBox.getValue()); // returns \"someValue3\"\n    });\n * </example>\n *\n * @alias browser.selectByValue\n * @param {String} selector   select element that contains the options\n * @param {String} value      value of option element to get selected\n * @uses protocol/element, protocol/elementIdClick, protocol/elementIdElement\n * @type action\n *\n */\n\nvar selectByValue = function selectByValue(selector, value) {\n    return this.selectByAttribute(selector, 'value', value);\n};\n\nexports.default = selectByValue;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/selectByVisibleText.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar selectByVisibleText = function selectByVisibleText(selector, text) {\n    var _this = this;\n\n    /**\n     * get select element\n     */\n    return this.element(selector).then(function (res) {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new _ErrorHandler.RuntimeError(7);\n        }\n\n        /**\n         * find option elem using xpath\n         */\n        var formatted = '\"' + text.trim() + '\"';\n\n        if (/\"/.test(text)) {\n            formatted = 'concat(\"' + text.trim().split('\"').join('\", \\'\"\\', \"') + '\")'; // escape quotes\n        }\n\n        var normalized = '[normalize-space(.) = ' + formatted + ']';\n        return _this.elementIdElement(res.value.ELEMENT, './option' + normalized + '|./optgroup/option' + normalized);\n    }).then(function (res) {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new _ErrorHandler.RuntimeError(7);\n        }\n\n        /**\n         * select option\n         */\n        return _this.elementIdClick(res.value.ELEMENT);\n    });\n}; /**\n    *\n    * Select option that display text matching the argument.\n    *\n    * <example>\n       :example.html\n       <select id=\"selectbox\">\n           <option value=\"someValue0\">uno</option>\n           <option value=\"someValue1\">dos</option>\n           <option value=\"someValue2\">tres</option>\n           <option value=\"someValue3\">cuatro</option>\n           <option value=\"someValue4\">cinco</option>\n           <option value=\"someValue5\">seis</option>\n       </select>\n   \n       :selectByVisibleText.js\n       it('demonstrate the selectByVisibleText command', function () {\n           var selectBox = $('#selectbox');\n           console.log(selectBox.getText('option:checked')); // returns \"uno\"\n   \n           selectBox.selectByVisibleText('cuatro');\n           console.log(selectBox.getText('option:checked')); // returns \"cuatro\"\n       })\n    * </example>\n    *\n    * @alias browser.selectByVisibleText\n    * @param {String} selector   select element that contains the options\n    * @param {String} text       text of option element to get selected\n    * @uses protocol/element, protocol/elementIdClick, protocol/elementIdElement\n    * @type action\n    *\n    */\n\nexports.default = selectByVisibleText;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/selectorExecute.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _ensureClientSideSelectorSupport = require('../helpers/ensureClientSideSelectorSupport');\n\nvar _ensureClientSideSelectorSupport2 = _interopRequireDefault(_ensureClientSideSelectorSupport);\n\nvar _createSelectorScript = require('../scripts/createSelectorScript');\n\nvar _createSelectorScript2 = _interopRequireDefault(_createSelectorScript);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar selectorExecute = function selectorExecute(selector, script) {\n    var _this = this;\n\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n    }\n\n    /**\n     * if selectorExecute gets executed with element as first citizen like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.selectorExecute(function () {...}, some, args);\n     * ```\n     */\n    if (typeof selector === 'function' && this.lastResult && typeof this.lastResult.selector === 'string') {\n        args.unshift(script);\n        script = selector;\n        selector = [this.lastResult.selector];\n\n        /**\n         * if selectorExecute gets executed by getHTML\n         */\n    } else if (selector === null) {\n        selector = [this.lastResult.selector];\n    }\n\n    if (typeof selector === 'string') {\n        selector = [selector];\n    }\n\n    if (!Array.isArray(selector)) {\n        throw new _ErrorHandler.CommandError('Argument \\'selector\\' must be string or array of strings.');\n    }\n    if (!/string|function/.test(typeof script === 'undefined' ? 'undefined' : (0, _typeof3.default)(script))) {\n        throw new _ErrorHandler.CommandError('Argument \\'script\\' must be a function or string.');\n    }\n\n    var fullScript = _createSelectorScript2.default.call(this, script, selector, args);\n    return _ensureClientSideSelectorSupport2.default.call(this).execute(fullScript).then(function (res) {\n        var result = res && res.value;\n\n        if (result && result.message === 'NoSuchElement') {\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        return result;\n    });\n}; /**\n    * Works just like execute, only you can use selectors to pass html elements to\n    * the function you wish to execute in the browser.\n    *\n    * The function fn will receive every resolved selector as an array of html elements,\n    * even if there is only one result, or no result.\n    * These arrays are the first arguments the function fn receives.\n    * If you pass an array of selectors, the resulting html element arrays are returned in the same order.\n    *\n    * All arguments you append after function fn are added as the arguments after the html arrays.\n    * You can use any JSON value or a function as such an argument.\n    *\n    * <example>\n       :selectorExecute.js\n       it('it inject JavaScript to the page', function () {\n           var divCount = browser.selectorExecute(\"//div\", function(divs, message) {\n               return divs.length + message;\n           }, \" divs on the page\");\n           console.log(divCount); // returns, for example, \"68 divs on the page\"\n   \n           var divLinkCount = browser.selectorExecute([\"//div\", \"=Read Post\"], function(divs, links) {\n               var message = 'There are ';\n   \n               message += divs.length + ' divs on the page';\n               message += ' and ';\n               message += links.length + ' links with an link text \"' + links[0].text + '\"';\n   \n               return message;\n           });\n           console.log(divLinkCount); // returns, for example, \"There are 68 divs on the page and 42 links with an link text 'Read Post'\"\n       });\n    * </example>\n    *\n    * @alias browser.selectorExecute\n    * @param {String|Array.<String>} selectors                  single selector or array of selectors\n    * @param {Function}              script                     function to get executed in the browser\n    * @param {...*}                  [argument1,...,argumentN]  arguments added to fn. Can be any JSON value or function\n    * @uses protocol/execute\n    * @type action\n    */\n\nexports.default = selectorExecute;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/helpers/ensureClientSideSelectorSupport.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar WGXPATH_PATH = require.resolve('wgxpath');\n\nvar wgxpathSrc = void 0;\n\n/**\n * Ensures document.evaluate() in the browser.\n */\nvar ensureClientSideSelectorSupport = function ensureClientSideSelectorSupport() {\n    var _this = this;\n\n    return this.execute('return !!document.evaluate;').then(function (res) {\n        if (res.value) {\n            return true;\n        }\n\n        /**\n         * Don't read in unless necessary\n         */\n        if (!wgxpathSrc) {\n            wgxpathSrc = _fs2.default.readFileSync(WGXPATH_PATH);\n            wgxpathSrc = wgxpathSrc.toString().split('module.exports')[0];\n        }\n\n        return _this.execute(wgxpathSrc + '\\nwgxpath.install(window);');\n    });\n};\n\nexports.default = ensureClientSideSelectorSupport;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/scripts/createSelectorScript.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nexports.getFn = getFn;\nexports.getArgs = getArgs;\n\nvar _findElementStrategy = require('../helpers/findElementStrategy');\n\nvar _findElementStrategy2 = _interopRequireDefault(_findElementStrategy);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Transforms function into string if necessaty\n * @param  {Function} fn                         function to execute on client side\n * @param  {Boolean}  [inMultibrowserMode=false] flag that is true if using multibrowser (multiremote)\n * @return {String}                              stringified function\n */\nfunction getFn(fn) {\n    var inMultibrowserMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (typeof fn === 'function' || inMultibrowserMode && fn.indexOf('function (') === 0) {\n        // Handle function script\n        return fn.toString();\n    }\n\n    return 'function(){' + fn + '}';\n}\n\n/**\n * Transform command args into list of arguments\n * @param  {Array}   [args=[]]                  argument passed to the command\n * @param  {Boolean} [inMultibrowserMode=false] flag that is true if using multibrowser (multiremote)\n * @return {String}                             list of args\n */\nfunction getArgs() {\n    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var inMultibrowserMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var strArgs = [];\n\n    args.forEach(function (arg) {\n        if (typeof arg === 'function' || inMultibrowserMode && typeof arg === 'string' && arg.indexOf('function (') === 0) {\n            return strArgs.push(arg.toString());\n        }\n\n        strArgs.push((0, _stringify2.default)(arg));\n    });\n\n    return '[' + strArgs.join(',') + ']';\n}\n\n/**\n * Returns the script to execute in the browser, in string format.\n * @param {Function|String} fn - function to execute in the browser\n * @param {Array.<String>} selectors - the selectors to resolve and pass to fn, each in its own array\n * @param {Array} args - the arguments to pass to fn (after resolved selectors)\n * @param {Function} callback\n * @returns {string}\n */\nvar createSelectorScript = function createSelectorScript(fn, selectors, args) {\n    var strArgs = [];\n    var foundSel = [];\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = (0, _getIterator3.default)(selectors), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var selector = _step.value;\n\n            var val = (0, _findElementStrategy2.default)(selector);\n            foundSel.push(val.using, val.value);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    strArgs.push(getFn(fn, this.inMultibrowserMode));\n    strArgs.push((0, _stringify2.default)(foundSel));\n    strArgs.push(getArgs(args, this.inMultibrowserMode));\n\n    return ('return (' + executeClientSide + ')(' + strArgs.join(',') + ', arguments[arguments.length - 1]);').replace(/(\\s{4}|\\t)+/g, ' ');\n};\n\n/**\n * Helper that resolves selectors client side and returns the result in the given fn.\n * Every resolved selector is prepended to the function's arguments.\n * Each resolved selector yields a single array.\n *\n * @param {Function} fn - the function to execute client side that will receive the resolved selectors\n * @param {Array.<String>} sArr - a series of usage, value pairs from find-element-strategy\n * @param {Array} args - any other arguments to pass to fn\n * @returns {*} the return value of fn\n * @example\n * var helper = require('./executeClientSideSelector');\n * // Execute in the browser\n * helper(fn, ['xpath', '//body', 'css', '[id=\"what\"]'], [1, 2, 3]);\n * // Assuming fn is...\n * fn = function(xpathResult, cssResult, one, two, three) {\n *     console.log(xpathResult.length); // 1\n *     console.log(xpathResult[0]);     // <body.../>\n *     console.log(cssResult.length);   // 0\n *     console.log(one, two, three);    // 1 2 3\n * }\n */\nvar executeClientSide = function executeClientSide(fn, sArr, args) {\n    var cb = arguments[arguments.length - 1];\n    var i = 0;\n    var sArgs = [];\n    var use, value, xp, cs, tn, res, j, arg;\n\n    if (typeof document.querySelectorAll === 'undefined') {\n        document.querySelectorAll = function (selector) {\n            var doc = document;\n            var head = doc.documentElement.firstChild;\n            var styleTag = doc.createElement('STYLE');\n\n            head.appendChild(styleTag);\n            doc.__qsaels = [];\n\n            styleTag.styleSheet.cssText = selector + '{x:expression(document.__qsaels.push(this))}';\n            window.scrollBy(0, 0);\n\n            return doc.__qsaels;\n        };\n    }\n\n    while ((use = sArr[i++]) && (value = sArr[i++])) {\n        arg = [];\n        xp = cs = tn = null;\n        switch (use) {\n            case 'partial link text':\n                xp = '//a[contains(text(),\"' + value + '\")]';\n                break;\n            case 'link text':\n                xp = '//a[text()=\"' + value + '\"]';\n                break;\n            case 'xpath':\n                xp = value;\n                break;\n            case 'id':\n                cs = '#' + value;\n                break;\n            case 'name':\n                cs = '[name=\"' + value + '\"]';\n                break;\n            case 'tag name':\n                tn = value;\n                break;\n            case 'css selector':\n                cs = value;\n                break;\n            default:\n                throw new Error('Could not evaluate selector: Invalid strategy ' + use);\n        }\n\n        if (xp) {\n            res = document.evaluate(xp, document, null, 0, null);\n\n            value = res.iterateNext();\n            while (value) {\n                arg.push(value);\n                value = res.iterateNext();\n            }\n        } else if (tn || cs) {\n            res = tn ? document.getElementsByTagName(tn) : document.querySelectorAll(cs);\n            for (j = 0; j < res.length; ++j) {\n                arg.push(res[j]);\n            }\n        }\n        sArgs.push(arg);\n    }\n\n    var parameter = args && sArgs.concat(args) || sArgs;\n    if (parameter.length === 0 || parameter.length === 1 && parameter[0].length === 0) {\n        if (typeof cb === 'function') {\n            return cb('NoSuchElement') && new Error('NoSuchElement');\n        }\n        return new Error('NoSuchElement');\n    }\n\n    parameter.push(arguments[arguments.length - 1]);\n\n    return fn.apply(window, parameter);\n};\n\nexports.default = createSelectorScript;\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/selectorExecuteAsync.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _ensureClientSideSelectorSupport = require('../helpers/ensureClientSideSelectorSupport');\n\nvar _ensureClientSideSelectorSupport2 = _interopRequireDefault(_ensureClientSideSelectorSupport);\n\nvar _createSelectorScript = require('../scripts/createSelectorScript');\n\nvar _createSelectorScript2 = _interopRequireDefault(_createSelectorScript);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar selectorExecuteAsync = function selectorExecuteAsync(selector, script) {\n    var _this = this;\n\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n    }\n\n    /**\n     * if selectorExecuteAsync gets executed with element as first citizen like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.selectorExecuteAsync(function () {...}, some, args);\n     * ```\n     */\n    if (typeof selector === 'function' && this.lastResult && typeof this.lastResult.selector === 'string') {\n        args.unshift(script);\n        script = selector;\n        selector = [this.lastResult.selector];\n\n        /**\n         * if selectorExecuteAsync gets executed by getHTML\n         */\n    } else if (selector === null) {\n        selector = [this.lastResult.selector];\n    }\n\n    if (typeof selector === 'string') {\n        selector = [selector];\n    }\n    if (!Array.isArray(selector)) {\n        throw new _ErrorHandler.CommandError('Argument \\'selector\\' must be string or array of strings.');\n    }\n    if (!/string|function/.test(typeof script === 'undefined' ? 'undefined' : (0, _typeof3.default)(script))) {\n        throw new _ErrorHandler.CommandError('Argument \\'script\\' must be a function or string.');\n    }\n\n    var fullScript = _createSelectorScript2.default.call(this, script, selector, args);\n    return _ensureClientSideSelectorSupport2.default.call(this).executeAsync(fullScript).then(function (res) {\n        var result = res && res.value;\n\n        if (result && result.message === 'NoSuchElement') {\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        return result;\n    });\n}; /**\n    * Works just like execute, only you can use Selenium selector strategies to pass html elements to\n    * the asynchronous function you wish to execute in the browser.\n    *\n    * The asynchronous function fn will receive every resolved selector as an array of html elements,\n    * even if there is only one result, or no result.\n    * These arrays are the first arguments the function fn receives.\n    * If you pass an array of selectors, the resulting html element arrays are returned in the same order.\n    *\n    * All arguments you append after function fn are added as the arguments after the html arrays.\n    * You can use any JSON value or a function as such an argument.\n    *\n    * <example>\n       :selectorExecuteAsync.js\n       it('should be able to inject JavaScript into the page that can be execute asynchronously', function () {\n           var divCount = browser.selectorExecuteAsync(\"//div\", function(divs, message, callback) {\n               callback(divs.length + message);\n           }, \" divs on the page\")\n           console.log(divCount); // returns, for example, \"68 divs on the page\"\n   \n           var divLinkCount = browser.selectorExecuteAsync([\"//div\", \"=Read Post\"], function(divs, links, callback) {\n               var message = 'There are ';\n   \n               message += divs.length + ' divs on the page';\n               message += ' and ';\n               message += links.length + ' links with an link text \"' + links[0].text + '\"';\n   \n               callback(message);\n           })\n           console.log(divLinkCount); // returns, for example, \"There are 68 divs on the page and 42 links with an link text 'Read Post'\"\n       });\n    * </example>\n    *\n    * @alias browser.selectorExecuteAsync\n    * @param {String|Array.<String>} selectors                  single selector or array of selectors\n    * @param {Function}              script                     asynchronous function to get executed in the browser\n    * @param {...*}                  [argument1,...,argumentN]  arguments added to fn. Can be any JSON value or function\n    * @uses protocol/execute\n    * @type action\n    */\n\nexports.default = selectorExecuteAsync;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/setCookie.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar setCookie = function setCookie(cookieObj) {\n    /*!\n     * parameter check\n     */\n    if ((typeof cookieObj === 'undefined' ? 'undefined' : (0, _typeof3.default)(cookieObj)) !== 'object') {\n        throw new _ErrorHandler.CommandError('Please specify a cookie object to set (see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#cookie-json-object for documentation.');\n    }\n\n    return this.cookie('POST', cookieObj);\n}; /**\n    *\n    * Sets a [cookie](https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#cookie-json-object)\n    * for current page. Make sure you are on the page that should receive the cookie. You can't set\n    * a cookie for an arbitrary page without being on that page.\n    *\n    * <example>\n       :setCookie.js\n       it('should set a cookie for the page', function () {\n           browser.url('/')\n           browser.setCookie({name: 'test', value: '123'});\n   \n           var cookies = browser.getCookie();\n           console.log(cookies); // outputs: [{ name: 'test', value: '123' }]\n       });\n    * </example>\n    *\n    * @alias browser.setCookie\n    * @param {Object} cookie cookie object\n    * @uses protocol/cookie\n    * @type cookie\n    *\n    */\n\nexports.default = setCookie;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/setGeoLocation.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar setGeoLocation = function setGeoLocation(location) {\n  /*!\n   * parameter check\n   */\n  if ((typeof location === 'undefined' ? 'undefined' : (0, _typeof3.default)(location)) !== 'object' || location.latitude === undefined || location.longitude === undefined || location.altitude === undefined) {\n    throw new _ErrorHandler.CommandError('location object need to have a latitude, longitude and altitude attribute');\n  }\n\n  return this.location(location);\n}; /**\n    *\n    * Set the current geo location.\n    *\n    * @alias browser.setGeoLocation\n    * @param {Object} location the new location (`{latitude: number, longitude: number, altitude: number}`)\n    * @uses protocol/location\n    * @type mobile\n    *\n    */\n\nexports.default = setGeoLocation;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/setOrientation.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar setOrientation = function setOrientation(orientation) {\n    /*!\n     * parameter check\n     */\n    if (typeof orientation !== 'string') {\n        throw new _ErrorHandler.CommandError('number or type of arguments don\\'t agree with setOrientation command');\n    }\n\n    return this.orientation(orientation.toUpperCase());\n}; /**\n    *\n    * Set a device orientation.\n    *\n    * <example>\n       :setOrientation.js\n       it('should set a geo location for the device', function () {\n           browser.setOrientation('landscape');\n   \n           var orientation = browser.getOrientation();\n           console.log(orientation); // outputs: \"landscape\"\n       });\n    * </example>\n    *\n    * @alias browser.setOrientation\n    * @param {String} orientation the new browser orientation (`landscape/portrait`)\n    * @uses protocol/orientation\n    * @type mobile\n    * @for android, ios\n    *\n    */\n\nexports.default = setOrientation;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/setValue.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar setValue = function setValue(selector, value) {\n    var _this = this;\n\n    /*!\n     * parameter check\n     */\n    if (typeof value === 'number') {\n        value = value.toString();\n    }\n\n    if (typeof value !== 'string' && !Array.isArray(value)) {\n        throw new _ErrorHandler.CommandError('number or type of arguments don\\'t agree with setValue command');\n    }\n\n    return this.elements(selector).then(function (res) {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new _ErrorHandler.CommandError(7, selector || _this.lastResult.selector);\n        }\n\n        var elementIdValueCommands = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = (0, _getIterator3.default)(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var elem = _step.value;\n\n                elementIdValueCommands.push(_this.elementIdClear(elem.ELEMENT).elementIdValue(elem.ELEMENT, value));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return _this.unify(elementIdValueCommands);\n    });\n}; /**\n    *\n    * Send a sequence of key strokes to an element (clears value before). You can also use\n    * unicode characters like Left arrow or Back space. WebdriverIO will take care of\n    * translating them into unicode characters. You’ll find all supported characters\n    * [here](https://w3c.github.io/webdriver/webdriver-spec.html#dfn-character-types).\n    * To do that, the value has to correspond to a key from the table.\n    *\n    * <example>\n       :setValue.js\n       it('should set value for a certain element', function () {\n           var input = $('.input');\n           input.setValue('test123');\n   \n           // same as\n           browser.setValue('.input', 'test123');\n   \n           console.log(input.getValue()); // outputs: 'test123'\n       });\n    * </example>\n    *\n    * @alias browser.setValue\n    * @param {String}              selector   Input element\n    * @param {String|Number|Array} values     Input element\n    * @uses protocol/elements, protocol/elementIdClear, protocol/elementIdValue\n    * @type action\n    *\n    */\n\nexports.default = setValue;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/setViewportSize.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getViewportSize = require('../scripts/getViewportSize');\n\nvar _getViewportSize2 = _interopRequireDefault(_getViewportSize);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * This command changes the viewport size of the browser. When talking about browser size we have to differentiate\n * between the actual window size of the browser application and the document/viewport size of the website. The\n * window size will always be bigger since it includes the height of any menu or status bars.\n *\n * The command tries to resize the browser multiple times (max 5 times) because Webdriver only allows to change\n * the window size and doesn't take the viewport into consideration. This is handled by WebdriverIO internally.\n *\n * <example>\n    :setViewportSize.js\n    it('should resize the current viewport', function () {\n        browser.setViewportSize({\n            width: 500,\n            height: 500\n        });\n\n        var windowSize = browser.windowHandleSize();\n        console.log(windowSize.value); // outputs: { width: 500, height: 602 }\n    });\n * </example>\n *\n * @alias browser.setViewportSize\n * @param {Object}   size  window width/height\n * @param {Boolean}  type  set to `false` to change window size, `true` (default) to change viewport size\n * @uses protocol/execute, protocol/windowHandleSize\n * @type window\n *\n */\n\nvar MAX_TRIES = 5;\n\nvar setViewportSize = function setViewportSize(size, type) {\n    /**\n     * parameter check\n     */\n    if ((typeof size === 'undefined' ? 'undefined' : (0, _typeof3.default)(size)) !== 'object' || typeof size.width !== 'number' || typeof size.height !== 'number' || typeof type !== 'undefined' && typeof type !== 'boolean') {\n        throw new _ErrorHandler.CommandError('number or type of arguments don\\'t agree with setViewportSize command');\n    }\n\n    var shouldIndent = typeof type === 'undefined' ? true : type;\n    return shouldIndent ? _setViewportSize.call(this, size) : this.windowHandleSize(size);\n};\n\n/**\n * to set viewport size properly we need to execute the process multiple times\n * since the difference between the inner and outer size changes when browser\n * switch between fullscreen modes or visibility of scrollbar\n */\nvar _setViewportSize = function _setViewportSize(size) {\n    var _this = this;\n\n    var retryNo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    /**\n     * get window size\n     */\n    return this.windowHandleSize().then(function (windowHandleSize) {\n        /**\n         * get viewport size\n         */\n        return _this.execute(_getViewportSize2.default).then(function (viewportSize) {\n            var widthDiff = windowHandleSize.value.width - viewportSize.value.screenWidth;\n            var heightDiff = windowHandleSize.value.height - viewportSize.value.screenHeight;\n\n            /**\n             * change window size with indent\n             */\n            return _this.windowHandleSize({\n                width: size.width + widthDiff,\n                height: size.height + heightDiff\n            });\n        }).execute(_getViewportSize2.default).then(function (res) {\n            /**\n             * if viewport size not equals desired size, execute process again\n             */\n            if (retryNo < MAX_TRIES && (res.value.screenWidth !== size.width || res.value.screenHeight !== size.height)) {\n                return _setViewportSize.call(_this, size, ++retryNo);\n            }\n        });\n    });\n};\n\nexports.default = setViewportSize;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/submitForm.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar submitForm = function submitForm(selector) {\n    var _this = this;\n\n    return this.element(selector).then(function (res) {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new _ErrorHandler.RuntimeError(7);\n        }\n\n        return _this.submit(res.value.ELEMENT);\n    });\n}; /**\n    *\n    * Submits a form found by given selector. The submit command may also be applied\n    * to any element that is a descendant of a `<form>` element.\n    *\n    * <example>\n       :index.html\n       <form action=\"/form.php\" method=\"post\" id=\"loginForm\">\n           <label for=\"username\">User:</label>\n           <input type=\"text\" name=\"username\" id=\"username\">\n           <label for=\"password\">Password:</label>\n           <input type=\"password\" name=\"password\" id=\"password\">\n           <input type=\"submit\" value=\"Login\">\n       </form>\n   \n       :submitForm.js\n       it('should submit login form', function () {\n           browser.setValue('#username', 'foobar');\n           browser.setValue('#password', 'test123');\n           browser.submitForm('#loginForm');\n       });\n    * </example>\n    *\n    * @alias browser.submitForm\n    * @param {String} selector form element\n    * @uses protocol/element, protocol/submit\n    * @type action\n    *\n    */\n\nexports.default = submitForm;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/swipe.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar swipe = function swipe(selector, xoffset, yoffset, speed) {\n  var _this = this;\n\n  if (arguments.length === 2 && typeof selector === 'number' && typeof xoffset === 'number') {\n    /*!\n     * you don't care where the swipe starts on the screen\n     */\n    var xspeed = selector;\n    var yspeed = xoffset;\n\n    return this.touchFlick(xspeed, yspeed);\n  }\n\n  /*!\n   * command starts at a particular screen location\n   */\n  return this.element(selector).then(function (res) {\n    /**\n     * check if element was found and throw error if not\n     */\n    if (!res.value) {\n      throw new _ErrorHandler.RuntimeError(7);\n    }\n\n    return _this.touchFlick(res.value.ELEMENT.toString(), xoffset, yoffset, speed);\n  });\n}; /**\n    *\n    * Perform a swipe on the screen or an element. If you want to swipe on a specific\n    * element make sure you provide a selector argument. If not just pass `xoffset`\n    * and `yoffset` as command arguments.\n    *\n    * Start at a particular screen location.\n    *\n    * @alias browser.swipe\n    * @param {String=} selector   element to swipe on\n    * @param {Number=} xoffset    x offset of swipe gesture (in pixels or relative units)\n    * @param {Number=} yoffset    y offset of swipe gesture (in pixels or relative units)\n    * @param {Number=} speed      time (in seconds) to spend performing the swipe\n    * @uses protocol/element, protocol/touchFlick\n    * @type mobile\n    *\n    */\n\nexports.default = swipe;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/swipeDown.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * Perform a swipe down on an element.\n *\n * @alias browser.swipeDown\n * @param {String} selector  element to swipe on\n * @param {Number} speed     number of pixels go per second\n * @uses mobile/swipe\n * @type mobile\n *\n */\n\nvar swipeDown = function swipeDown(selector, yOffset, speed) {\n  /**\n   * we can't use default values for function parameter here because this would\n   * break the ability to chain the command with an element if reverse is used\n   */\n  yOffset = typeof yOffset === 'number' ? yOffset : 100;\n  speed = typeof speed === 'number' ? speed : 100;\n\n  /**\n   * make sure yoffset is positive so we scroll up\n   */\n  yOffset = yOffset < 0 ? yOffset * -1 : yOffset;\n\n  return this.pause(100).swipe(selector, 0, yOffset, speed);\n};\n\nexports.default = swipeDown;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/swipeLeft.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * Perform a swipe left on an element.\n *\n * @alias browser.swipeLeft\n * @param {String} selector  element to swipe on\n * @param {Number} speed     time (in seconds) to spend performing the swipe\n * @uses mobile/flick\n * @type mobile\n *\n */\n\nvar swipeLeft = function swipeLeft(selector, xOffset, speed) {\n  /**\n   * we can't use default values for function parameter here because this would\n   * break the ability to chain the command with an element if reverse is used\n   */\n  xOffset = typeof xOffset === 'number' ? xOffset : 100;\n  speed = typeof speed === 'number' ? speed : 100;\n\n  /**\n   * make sure xoffset is positive so we scroll right\n   */\n  xOffset = xOffset > 0 ? xOffset * -1 : xOffset;\n\n  return this.pause(100).swipe(selector, xOffset, 0, speed);\n};\n\nexports.default = swipeLeft;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/swipeRight.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * Perform a swipe right on an element.\n *\n * @alias browser.swipeRight\n * @param {String} selector  element to swipe on\n * @param {Number} speed     time (in seconds) to spend performing the swipe\n * @uses mobile/swipe\n * @type mobile\n *\n */\n\nvar swipeRight = function swipeRight(selector, xOffset, speed) {\n  /**\n   * we can't use default values for function parameter here because this would\n   * break the ability to chain the command with an element if reverse is used\n   */\n  xOffset = typeof xOffset === 'number' ? xOffset : -100;\n  speed = typeof speed === 'number' ? speed : 100;\n\n  /**\n   * make sure xoffset is negative so we scroll left\n   */\n  xOffset = xOffset < 0 ? xOffset * -1 : xOffset;\n\n  return this.pause(100).swipe(selector, xOffset, 0, speed);\n};\n\nexports.default = swipeRight;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/swipeUp.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * Perform a swipe up on an element.\n *\n * @alias browser.swipeUp\n * @param {String} selector  element to swipe on\n * @param {Number} speed     time (in seconds) to spend performing the swipe\n * @uses mobile/swipe\n * @type mobile\n *\n */\n\nvar swipeUp = function swipeUp(selector, yOffset, speed) {\n  /**\n   * we can't use default values for function parameter here because this would\n   * break the ability to chain the command with an element if reverse is used\n   */\n  yOffset = typeof yOffset === 'number' ? yOffset : -100;\n  speed = typeof speed === 'number' ? speed : 100;\n\n  /**\n   * make sure yoffset is negative so we scroll down\n   */\n  yOffset = yOffset > 0 ? yOffset * -1 : yOffset;\n\n  return this.pause(100).swipe(selector, 0, yOffset, speed);\n};\n\nexports.default = swipeUp;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/switchTab.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n *\n * Switch focus to a particular tab / window handle.\n *\n * @alias browser.switchTab\n * @param {String=} windowHandle window handle URL to focus on (if no handle was specified the command switches to the first available one)\n * @uses protocol/window, window/getTabIds, window/switchTab\n * @type window\n *\n */\n\nvar switchTab = function switchTab(windowHandle) {\n    var _this = this;\n\n    /*!\n     * parameter check\n     */\n    if (typeof windowHandle !== 'string') {\n        windowHandle = null;\n    }\n\n    if (windowHandle) {\n        return this.window(windowHandle);\n    }\n\n    return this.windowHandles().then(function (tabIds) {\n        if (tabIds && tabIds.value && tabIds.value.length) {\n            return _this.switchTab(tabIds.value[0]);\n        }\n    });\n};\n\nexports.default = switchTab;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/touch.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Put finger on an element (only in mobile context).\n *\n * @alias browser.touch\n * @param {String}  selector  element to put finger on\n * @param {Boolean} longClick if true touch click will be long (default: false)\n * @uses property/getLocation, protocol/touchClick\n * @type mobile\n * @uses android\n *\n */\n\nvar touch = function touch(selector, longClick) {\n  var _this = this;\n\n  /**\n   * we can't use default values for function parameter here because this would\n   * break the ability to chain the command with an element if reverse is used\n   */\n  longClick = typeof longClick === 'boolean' ? longClick : false;\n\n  var touchCommand = longClick ? 'touchLongClick' : 'touchClick';\n\n  return this.getLocation(selector).then(function (val) {\n    return _this[touchCommand](val.x, val.y);\n  });\n};\n\nexports.default = touch;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/touchAction.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nexports.default = touchAction;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * The Touch Action API provides the basis of all gestures that can be automated in Appium.\n * At its core is the ability to chain together _ad hoc_ individual actions, which will then be\n * applied to an element in the application on the device. The basic actions that can be used are:\n *\n * - press (pass selector or (x,y) or both)\n * - longPress (pass selector or (x,y) or both)\n * - tap (pass selector or (x,y) or both)\n * - moveTo (pass selector or (x,y) or both)\n * - wait (pass ms (as milliseconds))\n * - release (no arguments)\n *\n * If you use the touchAction command with a selector you don't need to pass the selector to each\n * action. It will be propagated by the internally (if no x or y parameters are given).\n *\n * <example>\n    :touchAction.js\n    it('should do a touch gesture', function () {\n        var screen = $('//UITextbox');\n\n        // simple touch action on element\n        screen.touchAction('tap');\n        // same as\n        browser.touchAction('//UITextbox', 'tap')\n\n        // simple touch action using x y variables\n        browser.touchAction({\n            actions: 'tap', x: 300, y:200\n        })\n\n        // simple touch action using selector and x y variables\n        // tap location is 30px right and 20px down relative from the center of the element\n        browser.touchAction({\n            actions: 'tap', x: 30, y:20, selector: '//UIAApplication[1]/UIAElement[2]'\n        })\n\n        // multi action on an element (drag&drop)\n        screen.touchAction([\n            'press',\n            { action: 'moveTo', x: 200, y: 0 },\n            'release'\n        ])\n        // same as\n        browser.touchAction('//UITextbox', [\n            'press',\n            { action: 'moveTo', x: 200, y: 0},\n            'release'\n        ])\n\n        // drag&drop to element\n        screen.touchAction([\n            'press',\n            { action: 'moveTo', selector: '//UIAApplication[1]/UIAElement[2]' },\n            'release'\n        ]))\n    });\n\n    :multiTouchAction.js\n    it('should do a multitouch gesture', function () {\n        // drag&drop with two fingers 200px down\n        browser.touchAction([\n            [{action: 'press', x:  10, y: 10}, { action: 'moveTo', x: 0, y: 200 }, 'release'],\n            [{action: 'press', x: 100, y: 10}, { action: 'moveTo', x: 0, y: 200 }, 'release']]\n        ])\n    })\n * </example>\n *\n * @param {String} selector  selector to execute the touchAction on\n * @param {String} action    action to execute\n *\n * @see https://saucelabs.com/blog/appium-sauce-labs-bootcamp-chapter-2-touch-actions\n * @type mobile\n * @for android, ios\n * @uses mobile/performTouchAction, mobile/performMultiAction\n *\n */\n\nvar TOUCH_ACTIONS = ['press', 'longPress', 'tap', 'moveTo', 'wait', 'release'];\nvar POS_ACTIONS = TOUCH_ACTIONS.slice(0, -2);\nvar ACCEPTED_OPTIONS = ['x', 'y', 'selector', 'element'];\n\nfunction touchAction(selector, actions) {\n    var _this = this;\n\n    if (typeof selector !== 'string' || TOUCH_ACTIONS.indexOf(selector) > -1) {\n        actions = selector;\n        selector = this.lastResult;\n    }\n\n    if (!Array.isArray(actions)) {\n        actions = [actions];\n    }\n\n    /**\n     * check if multiAction\n     */\n    if (Array.isArray(actions[0])) {\n        actions = formatArgs(selector, actions);\n        return _promise2.default.all(getSelectors.call(this, actions, true)).then(function (jsonElements) {\n            actions = replaceSelectorsById(actions, jsonElements);\n            return _this.performMultiAction({ actions: actions });\n        });\n    }\n\n    actions = formatArgs(selector, actions);\n    return _promise2.default.all(getSelectors.call(this, actions)).then(function (jsonElements) {\n        actions = replaceSelectorsById(actions, jsonElements);\n        return _this.performTouchAction({ actions: actions });\n    });\n}\n\n/**\n * helper to determine if action has proper option arguments\n * ('press', 'longPress', 'tap', 'moveTo' need at least some kind of position information)\n * @param  {String}  action  name of action\n * @param  {Object}  options action options\n * @return {Boolean}         True if don't need any options or has a position option\n */\nvar hasValidActionOptions = function hasValidActionOptions(action, options) {\n    return POS_ACTIONS.indexOf(action) < 0 || POS_ACTIONS.indexOf(action) > -1 && (0, _keys2.default)(options).length > 0;\n};\n\nvar formatArgs = function formatArgs(selector, actions) {\n    return actions.map(function (action) {\n        if (Array.isArray(action)) {\n            return formatArgs(selector, action);\n        }\n\n        var formattedAction = { action: action.action, options: {} };\n\n        /**\n         * propagate selector or element to options object\n         */\n        if (selector &&\n        // selector is given as string `e.g. browser.touchAction(selector, 'tap')`\n        typeof selector === 'string' &&\n        // don't propagate for actions that don't require element options\n        POS_ACTIONS.indexOf(typeof action === 'string' ? action : formattedAction.action) > -1 &&\n        // don't propagate if user has x and y set\n        !(isFinite(action.x) && isFinite(action.y))) {\n            formattedAction.options.selector = selector;\n        } else if (selector &&\n        // selector is given by previous command\n        // e.g. $(selector).touchAction('tap')\n        selector.value &&\n        // don't propagate for actions that don't require element options\n        POS_ACTIONS.indexOf(typeof action === 'string' ? action : formattedAction.action) > -1 &&\n        // don't propagate if user has x and y set\n        !(isFinite(action.x) && isFinite(action.y))) {\n            formattedAction.options.element = selector.value.ELEMENT;\n        }\n\n        if (typeof action === 'string') {\n            if (!hasValidActionOptions(action, formattedAction.options)) {\n                throw new Error('Touch action \"' + action + '\" doesn\\'t have proper options. Make sure certain actions like ' + (POS_ACTIONS.join(', ') + ' have position options like \"selector\", \"x\" or \"y\".'));\n            }\n\n            formattedAction.action = action;\n\n            /**\n             * remove options property if empyt\n             */\n            if ((0, _keys2.default)(formattedAction.options).length === 0) {\n                delete formattedAction.options;\n            }\n\n            return formattedAction;\n        }\n\n        if (isFinite(action.x)) formattedAction.options.x = action.x;\n        if (isFinite(action.y)) formattedAction.options.y = action.y;\n        if (action.ms) formattedAction.options.ms = action.ms;\n\n        if (action.selector && POS_ACTIONS.indexOf(formattedAction.action) > -1) {\n            formattedAction.options.selector = action.selector;\n        }\n\n        if (action.element) {\n            formattedAction.options.element = action.element;\n            delete formattedAction.options.selector;\n        }\n\n        /**\n         * remove options property if empyt\n         */\n        if ((0, _keys2.default)(formattedAction.options).length === 0) {\n            delete formattedAction.options;\n        }\n\n        /**\n         * option check\n         * make sure action has proper options before sending command to Appium\n         */\n        if (formattedAction.action === 'release' && formattedAction.options) {\n            throw new Error('action \"release\" doesn\\'t accept any options ' + ('(\"' + (0, _keys2.default)(formattedAction.options).join('\", \"') + '\" found)'));\n        } else if (formattedAction.action === 'wait' && ((0, _keys2.default)(formattedAction.options).indexOf('x') > -1 || (0, _keys2.default)(formattedAction.options).indexOf('y') > -1)) {\n            throw new Error('action \"wait\" doesn\\'t accept x, y options');\n        } else if (POS_ACTIONS.indexOf(formattedAction.action) > -1) {\n            for (var option in formattedAction.options) {\n                if (ACCEPTED_OPTIONS.indexOf(option) === -1) {\n                    throw new Error('action \"' + formattedAction.action + '\" doesn\\'t accept \"' + option + '\" as option');\n                }\n            }\n\n            if ((0, _keys2.default)(formattedAction.options || {}).length === 0) {\n                throw new Error('Touch actions like \"' + formattedAction.action + '\" need at least some kind of ' + 'position information like \"selector\", \"x\" or \"y\" options, you\\'ve none given.');\n            }\n        }\n\n        return formattedAction;\n    });\n};\n\nvar getSelectors = function getSelectors(actions) {\n    var _this2 = this;\n\n    var isMultiAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var queriedSelectors = [];\n\n    /**\n     * flatten actions array\n     */\n    if (isMultiAction) {\n        actions = [].concat.apply([], actions);\n    }\n\n    return actions\n    /**\n     * map down to list of selectors\n     */\n    .map(function (action) {\n        return action.options && action.options.selector;\n    })\n    /**\n     * filter actions without selector and unique selectors\n     */\n    .filter(function (selector) {\n        var res = Boolean(selector) && queriedSelectors.indexOf(selector) === -1;\n        queriedSelectors.push(selector);\n        return res;\n    })\n    /**\n     * call element command on selectors\n     */\n    .map(function (selector) {\n        return _this2.element(selector);\n    });\n};\n\n/**\n * replaces selector action properties with element ids after they got fetched\n * @param  {Object[]} actions  list of actions\n * @param  {Object[]} elements list of fetched elements\n * @return {Object[]}          list of actions with proper element ids\n */\nvar replaceSelectorsById = function replaceSelectorsById(actions, elements) {\n    return actions.map(function (action) {\n        if (Array.isArray(action)) {\n            return replaceSelectorsById(action, elements);\n        }\n\n        if (!action.options || !action.options.selector) {\n            return action;\n        }\n\n        elements.forEach(function (element) {\n            if (action.options.selector === element.selector) {\n                action.options.element = element.value.ELEMENT;\n                delete action.options.selector;\n            }\n        });\n\n        return action;\n    });\n};\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/uploadFile.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _archiver = require('archiver');\n\nvar _archiver2 = _interopRequireDefault(_archiver);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * Uploads a file to the selenium server by using the [`file`](/api/protocol/file.html) command. Note that\n * this command might not be supported as it is an undocumented Selenium command.\n *\n * @alias browser.uploadFile\n * @param {String} localPath local path to file\n * @type utility\n * @uses protocol/file\n *\n */\n\nvar uploadFile = function uploadFile(localPath) {\n    var _this = this;\n\n    /*!\n     * parameter check\n     */\n    if (typeof localPath !== 'string') {\n        throw new _ErrorHandler.CommandError('number or type of arguments don\\'t agree with uploadFile command');\n    }\n\n    var zipData = [];\n    var source = _fs2.default.createReadStream(localPath);\n\n    return new _promise2.default(function (resolve, reject) {\n        (0, _archiver2.default)('zip').on('error', function (e) {\n            throw new Error(e);\n        }).on('data', function (data) {\n            return zipData.push(data);\n        }).on('end', function () {\n            return _this.file(Buffer.concat(zipData).toString('base64')).then(resolve, reject);\n        }).append(source, { name: _path2.default.basename(localPath) }).finalize(function (err) {\n            /* istanbul ignore next */\n            if (err) {\n                reject(err);\n            }\n        });\n    });\n};\n\nexports.default = uploadFile;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/waitForEnabled.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar waitForEnabled = function waitForEnabled(selector, ms, reverse) {\n    var _this = this;\n\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used, like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.waitForXXX(10000, true);\n     * ```\n     */\n    reverse = typeof reverse === 'boolean' ? reverse : false;\n\n    /*!\n     * ensure that ms is set properly\n     */\n    if (typeof ms !== 'number') {\n        ms = this.options.waitforTimeout;\n    }\n\n    return this.waitUntil(function () {\n        return _this.isEnabled(selector).then(function (isEnabled) {\n            if (!Array.isArray(isEnabled)) {\n                return isEnabled !== reverse;\n            }\n\n            var result = reverse;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(isEnabled), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var val = _step.value;\n\n                    if (!reverse) {\n                        result = result || val;\n                    } else {\n                        result = result && val;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return result !== reverse;\n        });\n    }, ms).catch(function (e) {\n        selector = selector || _this.lastResult.selector;\n\n        if ((0, _ErrorHandler.isTimeoutError)(e)) {\n            var isReversed = reverse ? '' : 'not';\n            throw new _ErrorHandler.WaitUntilTimeoutError('element (' + selector + ') still ' + isReversed + ' enabled after ' + ms + 'ms');\n        }\n        throw e;\n    });\n}; /**\n    *\n    * Wait for an element (selected by css selector) for the provided amount of\n    * milliseconds to be (dis/en)abled. If multiple elements get queryied by given\n    * selector, it returns true (or false if reverse flag is set) if at least one\n    * element is (dis/en)abled.\n    *\n    * <example>\n       :index.html\n       <input type=\"text\" id=\"username\" value=\"foobar\" disabled=\"disabled\"></input>\n       <script type=\"text/javascript\">\n           setTimeout(function () {\n               document.getElementById('username').disabled = false\n           }, 2000);\n       </script>\n   \n       :waitForEnabledExample.js\n       it('should detect when element is enabled', function () {\n           browser.waitForEnabled('#username', 3000);\n   \n           // same as\n           elem = $('#username');\n           elem.waitForEnabled(3000)\n       });\n    * </example>\n    *\n    * @alias browser.waitForEnabled\n    * @param {String}   selector element to wait for\n    * @param {Number=}  ms       time in ms (default: 500)\n    * @param {Boolean=} reverse  if true it waits for the opposite (default: false)\n    * @uses utility/waitUntil, state/isEnabled\n    * @type utility\n    *\n    */\n\nexports.default = waitForEnabled;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/waitForExist.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar waitForExist = function waitForExist(selector, ms, reverse) {\n    var _this = this;\n\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used, like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.waitForXXX(10000, true);\n     * ```\n     */\n    reverse = typeof reverse === 'boolean' ? reverse : false;\n\n    /*!\n     * ensure that ms is set properly\n     */\n    if (typeof ms !== 'number') {\n        ms = this.options.waitforTimeout;\n    }\n\n    return this.waitUntil(function () {\n        return _this.isExisting(selector).then(function (isExisting) {\n            if (!Array.isArray(isExisting)) {\n                return isExisting !== reverse;\n            }\n\n            var result = reverse;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(isExisting), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var val = _step.value;\n\n                    if (!reverse) {\n                        result = result || val;\n                    } else {\n                        result = result && val;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return result !== reverse;\n        });\n    }, ms).catch(function (e) {\n        selector = selector || _this.lastResult.selector;\n\n        if ((0, _ErrorHandler.isTimeoutError)(e)) {\n            var isReversed = reverse ? '' : 'not ';\n            throw new _ErrorHandler.WaitUntilTimeoutError('element (' + selector + ') still ' + isReversed + 'existing after ' + ms + 'ms');\n        }\n        throw e;\n    });\n}; /**\n    *\n    * Wait for an element (selected by css selector) for the provided amount of\n    * milliseconds to be present within the DOM. Returns true if the selector\n    * matches at least one element that exists in the DOM, otherwise throws an\n    * error. If the reverse flag is true, the command will instead return true\n    * if the selector does not match any elements.\n    *\n    * <example>\n       :waitForExistSyncExample.js\n       it('should display a notification message after successful form submit', function () {\n           var form = $('form');\n           var notification = $('.notification');\n   \n           form.submit();\n           notification.waitForExist(5000); // same as `browser.waitForExist('.notification', 5000)`\n           expect(notification.getText()).to.be.equal('Data transmitted successfully!')\n       });\n    * </example>\n    *\n    * @alias browser.waitForExist\n    * @param {String}   selector CSS selector to query\n    * @param {Number=}  ms       time in ms (default: 500)\n    * @param {Boolean=} reverse  if true it instead waits for the selector to not match any elements (default: false)\n    * @uses utility/waitUntil, state/isExisting\n    * @type utility\n    *\n    */\n\nexports.default = waitForExist;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/waitForSelected.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar waitForSelected = function waitForSelected(selector, ms, reverse) {\n    var _this = this;\n\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used, like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.waitForXXX(10000, true);\n     * ```\n     */\n    reverse = typeof reverse === 'boolean' ? reverse : false;\n\n    /*!\n     * ensure that ms is set properly\n     */\n    if (typeof ms !== 'number') {\n        ms = this.options.waitforTimeout;\n    }\n\n    return this.waitUntil(function () {\n        return _this.isSelected(selector).then(function (isSelected) {\n            if (!Array.isArray(isSelected)) {\n                return isSelected !== reverse;\n            }\n\n            var result = reverse;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(isSelected), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var val = _step.value;\n\n                    if (!reverse) {\n                        result = result || val;\n                    } else {\n                        result = result && val;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return result !== reverse;\n        });\n    }, ms).catch(function (e) {\n        selector = selector || _this.lastResult.selector;\n\n        if ((0, _ErrorHandler.isTimeoutError)(e)) {\n            var isReversed = reverse ? '' : 'not';\n            throw new _ErrorHandler.WaitUntilTimeoutError('element (' + selector + ') still ' + isReversed + ' selected after ' + ms + 'ms');\n        }\n        throw e;\n    });\n}; /**\n    *\n    * Wait for an option or radio/checkbox element (selected by css selector) for the provided amount of\n    * milliseconds to be (un)selected or (un)checked. If multiple elements get queryied by given\n    * selector, it returns true (or false if reverse flag is set) if at least one element is (un)selected.\n    *\n    * <example>\n       :index.html\n       <select>\n           <option value=\"1\" id=\"option1\">1</option>\n           <option value=\"2\" id=\"option2\" selected=\"selected\">2</option>\n           <option value=\"3\" id=\"option3\">3</option>\n       </select>\n       <script type=\"text/javascript\">\n           setTimeout(function () {\n               document.getElementById('option1').selected = true;\n           }, 2000);\n       </script>\n   \n       :waitForSelectedExample.js\n       it('should detect when an option is selected', function () {\n           browser.waitForSelected('#option1', 3000);\n   \n           // same as\n           elem = $('#option1');\n           elem.waitForSelected(3000)\n       });\n    * </example>\n    *\n    * @alias browser.waitForSelected\n    * @param {String}   selector element to wait for\n    * @param {Number=}  ms       time in ms (default: 500)\n    * @param {Boolean=} reverse  if true it waits for the opposite (default: false)\n    * @uses utility/waitUntil, state/isSelected\n    * @type utility\n    *\n    */\n\nexports.default = waitForSelected;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/waitForText.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar waitForText = function waitForText(selector, ms, reverse) {\n    var _this = this;\n\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used, like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.waitForXXX(10000, true);\n     * ```\n     */\n    reverse = typeof reverse === 'boolean' ? reverse : false;\n\n    /*!\n     * ensure that ms is set properly\n     */\n    if (typeof ms !== 'number') {\n        ms = this.options.waitforTimeout;\n    }\n\n    return this.waitUntil(function () {\n        return _this.getText(selector).then(function (text) {\n            if (!Array.isArray(text)) {\n                return text !== '' !== reverse;\n            }\n\n            var result = reverse;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(text), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var val = _step.value;\n\n                    if (!reverse) {\n                        result = result || val !== '';\n                    } else {\n                        result = result && val === '';\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return result !== reverse;\n        });\n    }, ms).catch(function (e) {\n        selector = selector || _this.lastResult.selector;\n\n        if ((0, _ErrorHandler.isTimeoutError)(e)) {\n            var isReversed = reverse ? 'with' : 'without';\n            throw new _ErrorHandler.WaitUntilTimeoutError('element (' + selector + ') still ' + isReversed + ' text after ' + ms + 'ms');\n        }\n        throw e;\n    });\n}; /**\n    *\n    * Wait for an element (selected by css selector) for the provided amount of\n    * milliseconds to have text/content. If multiple elements get queryied by given\n    * selector, it returns true (or false if reverse flag is set) if at least one\n    * element has text/content.\n    *\n    * <example>\n       :index.html\n       <div id=\"elem\"></div>\n       <script type=\"text/javascript\">\n           setTimeout(function () {\n               document.getElementById('elem').innerHTML = 'some text';\n           }, 2000);\n       </script>\n   \n       :waitForTextExample.js\n       it('should detect when element has text', function () {\n           browser.waitForText('#elem', 3000);\n   \n           // same as\n           elem = $('#elem');\n           elem.waitForText(3000)\n       });\n    * </example>\n    *\n    * @alias browser.waitForText\n    * @param {String}   selector element to wait for\n    * @param {Number=}  ms       time in ms (default: 500)\n    * @param {Boolean=} reverse  if true it waits for the opposite (default: false)\n    * @uses utility/waitUntil, property/getText\n    * @type utility\n    *\n    */\n\nexports.default = waitForText;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/waitForValue.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar waitForValue = function waitForValue(selector, ms, reverse) {\n    var _this = this;\n\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used, like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.waitForXXX(10000, true);\n     * ```\n     */\n    reverse = typeof reverse === 'boolean' ? reverse : false;\n\n    /*!\n     * ensure that ms is set properly\n     */\n    if (typeof ms !== 'number') {\n        ms = this.options.waitforTimeout;\n    }\n\n    return this.waitUntil(function () {\n        return _this.getValue(selector).then(function (value) {\n            if (!Array.isArray(value)) {\n                return value !== '' !== reverse;\n            }\n\n            var result = reverse;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var val = _step.value;\n\n                    if (!reverse) {\n                        result = result || val !== '';\n                    } else {\n                        result = result && val === '';\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return result !== reverse;\n        });\n    }, ms).catch(function (e) {\n        selector = selector || _this.lastResult.selector;\n\n        if ((0, _ErrorHandler.isTimeoutError)(e)) {\n            var isReversed = reverse ? 'with' : 'without';\n            throw new _ErrorHandler.WaitUntilTimeoutError('element (' + selector + ') still ' + isReversed + ' a value after ' + ms + 'ms');\n        }\n        throw e;\n    });\n}; /**\n    *\n    * Wait for an element (selected by css selector) for the provided amount of\n    * milliseconds to have a value. If multiple elements get queryied by given\n    * selector, it returns true (or false if reverse flag is set) if at least one\n    * element has a value.\n    *\n    * <example>\n       :index.html\n       <input name=\"someInput\" id=\"elem\" value=\"\"></input>\n       <script type=\"text/javascript\">\n           setTimeout(function () {\n               document.getElementById('elem').value = 'some text';\n           }, 2000);\n       </script>\n   \n       :waitForValueExample.js\n       it('should detect when element has value', function () {\n           browser.waitForValue('#elem', 3000);\n   \n           // same as\n           elem = $('#elem');\n           elem.waitForValue(3000)\n       });\n    * </example>\n    *\n    * @alias browser.waitForValue\n    * @param {String}   selector element to wait\n    * @param {Number=}  ms       time in ms (default: 500)\n    * @param {Boolean=} reverse  if true it waits for the opposite (default: false)\n    * @uses utility/waitUntil, property/getValue\n    * @type utility\n    *\n    */\n\nexports.default = waitForValue;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/waitForVisible.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar waitForVisible = function waitForVisible(selector, ms, reverse) {\n    var _this = this;\n\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used, like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.waitForXXX(10000, true);\n     * ```\n     */\n    reverse = typeof reverse === 'boolean' ? reverse : false;\n\n    /*!\n     * ensure that ms is set properly\n     */\n    if (typeof ms !== 'number') {\n        ms = this.options.waitforTimeout;\n    }\n\n    return this.waitUntil(function () {\n        return _this.isVisible(selector).then(function (isVisible) {\n            if (!Array.isArray(isVisible)) {\n                return isVisible !== reverse;\n            }\n\n            var result = reverse;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(isVisible), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var val = _step.value;\n\n                    if (!reverse) {\n                        result = result || val;\n                    } else {\n                        result = result && val;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return result !== reverse;\n        });\n    }, ms).catch(function (e) {\n        selector = selector || _this.lastResult.selector;\n\n        if ((0, _ErrorHandler.isTimeoutError)(e)) {\n            var isReversed = reverse ? '' : 'not';\n            throw new _ErrorHandler.WaitUntilTimeoutError('element (' + selector + ') still ' + isReversed + ' visible after ' + ms + 'ms');\n        }\n        throw e;\n    });\n}; /**\n    *\n    * Wait for an element (selected by css selector) for the provided amount of\n    * milliseconds to be (in)visible. If multiple elements get queryied by given\n    * selector, it returns true (or false if reverse flag is set) if at least one\n    * element is visible.\n    *\n    * <example>\n       :index.html\n       <div id=\"elem\" style=\"visibility: hidden;\">Hello World!</div>\n       <script type=\"text/javascript\">\n           setTimeout(function () {\n               document.getElementById('elem').style.visibility = 'visible';\n           }, 2000);\n       </script>\n   \n       :waitForVisibleExample.js\n       it('should detect when element is visible', function () {\n           browser.waitForVisible('#elem', 3000);\n   \n           // same as\n           elem = $('#elem');\n           elem.waitForVisible(3000)\n       });\n    * </example>\n    *\n    * @alias browser.waitForVisible\n    * @param {String}   selector element to wait for\n    * @param {Number=}  ms       time in ms (default: 500)\n    * @param {Boolean=} reverse  if true it waits for the opposite (default: false)\n    * @uses utility/waitUntil, state/isVisible\n    * @type utility\n    *\n    */\n\nexports.default = waitForVisible;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/commands/waitUntil.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nexports.default = function (condition, timeout, timeoutMsg, interval) {\n    /*!\n     * ensure that timeout and interval are set properly\n     */\n    if (typeof timeout !== 'number') {\n        timeout = this.options.waitforTimeout;\n    }\n\n    if (typeof interval !== 'number') {\n        interval = this.options.waitforInterval;\n    }\n\n    var fn = void 0;\n\n    if (typeof condition === 'function') {\n        fn = condition.bind(this);\n    } else {\n        fn = function fn() {\n            return _promise2.default.resolve(condition);\n        };\n    }\n\n    var isSync = this.options.sync;\n    var timer = new _Timer2.default(interval, timeout, fn, true, isSync);\n\n    return timer.catch(function (e) {\n        if (e === 'timeout' && typeof timeoutMsg === 'string') {\n            throw new _ErrorHandler.WaitUntilTimeoutError(timeoutMsg);\n        }\n        throw new _ErrorHandler.WaitUntilTimeoutError('Promise was rejected with the following reason: ' + e);\n    });\n};\n\nvar _ErrorHandler = require('../utils/ErrorHandler');\n\nvar _Timer = require('../utils/Timer');\n\nvar _Timer2 = _interopRequireDefault(_Timer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports['default']; /**\n                                      *\n                                      * This wait command is your universal weapon if you want to wait on something. It expects a condition\n                                      * and waits until that condition is fulfilled with a truthy value. A condition can be either a promise\n                                      * or a command result. The commands within the condition are getting executed synchronously like in\n                                      * your test.\n                                      *\n                                      * A common example is to wait until a certain element contains a certain text (see example).\n                                      *\n                                      * <example>\n                                         :example.html\n                                         <div id=\"someText\">I am some text</div>\n                                         <script>\n                                           setTimeout(function() {\n                                             $('#someText').html('I am now different');\n                                           }, 1000);\n                                         </script>\n                                     \n                                         :waitUntil.js\n                                         it('should wait until text has changed', function () {\n                                             browser.waitUntil(function () {\n                                               return browser.getText('#someText') === 'I am now different'\n                                             }, 5000, 'expected text to be different after 5s');\n                                         });\n                                      * </example>\n                                      *\n                                      *\n                                      * @alias browser.waitUntil\n                                      * @param {Function|Promise} condition  condition to wait on\n                                      * @param {Number=}          timeout    timeout in ms (default: 500)\n                                      * @param {String=}          timeoutMsg error message to throw when waitUntil times out\n                                      * @param {Number=}          interval   interval between condition checks (default: 500)\n                                      * @uses utility/pause\n                                      * @type utility\n                                      *\n                                      */\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/build/lib/utils/Timer.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar TIMEOUT_ERROR = 'timeout';\n\n/**\n * Promise-based Timer. Execute fn every tick.\n * When fn is resolved — timer will stop\n * @param {Number} delay - delay between ticks\n * @param {Number} timeout - after that time timer will stop\n * @param {Function} fn - function that returns promise. will execute every tick\n * @param {Boolean} leading - should be function invoked on start\n * @param {Boolean} isSync - true if test runner runs commands synchronously\n * @returns {promise}\n */\n\nvar Timer = function () {\n    function Timer(delay, timeout, fn, leading, isSync) {\n        var _this = this;\n\n        (0, _classCallCheck3.default)(this, Timer);\n\n        this._delay = delay;\n        this._timeout = timeout;\n        this._fn = fn;\n        this._leading = leading;\n        this._conditionExecutedCnt = 0;\n\n        /**\n         * execute commands synchronously if method name is not async\n         */\n        if (isSync && typeof global.wdioSync === 'function' && fn.name.match(/^(bound )*async$/) === null) {\n            this._fn = function () {\n                return new _promise2.default(function (resolve) {\n                    return global.wdioSync(fn, resolve)();\n                });\n            };\n        }\n\n        var retPromise = new _promise2.default(function (resolve, reject) {\n            _this._resolve = resolve;\n            _this._reject = reject;\n        });\n\n        this.start();\n\n        return retPromise;\n    }\n\n    (0, _createClass3.default)(Timer, [{\n        key: 'start',\n        value: function start() {\n            var _this2 = this;\n\n            this._start = Date.now();\n            this._ticks = 0;\n            if (this._leading) {\n                this.tick();\n            } else {\n                this._timeoutId = setTimeout(this.tick.bind(this), this._delay);\n            }\n\n            this._mainTimeoutId = setTimeout(function () {\n                /**\n                 * make sure that condition was executed at least once\n                 */\n                if (!_this2.wasConditionExecuted()) {\n                    return;\n                }\n\n                var reason = _this2.lastError || TIMEOUT_ERROR;\n                _this2._reject(reason);\n                _this2.stop();\n            }, this._timeout);\n        }\n    }, {\n        key: 'stop',\n        value: function stop() {\n            if (this._timeoutId) {\n                clearTimeout(this._timeoutId);\n            }\n            this._timeoutId = null;\n        }\n    }, {\n        key: 'stopMain',\n        value: function stopMain() {\n            clearTimeout(this._mainTimeoutId);\n        }\n    }, {\n        key: 'tick',\n        value: function tick() {\n            var _this3 = this;\n\n            var result = this._fn();\n\n            if (typeof result.then !== 'function') {\n                this.stop();\n                this.stopMain();\n                return this._reject('Expected a promise as return value but got \"' + result + '\"');\n            }\n\n            result.then(function (res) {\n                return _this3.checkCondition(null, res);\n            }, function (err) {\n                return _this3.checkCondition(err);\n            });\n        }\n    }, {\n        key: 'checkCondition',\n        value: function checkCondition(err, res) {\n            ++this._conditionExecutedCnt;\n            this.lastError = err;\n\n            // resolve timer only on truthy values\n            if (res) {\n                this._resolve(res);\n                this.stop();\n                this.stopMain();\n                return;\n            }\n\n            // autocorrect timer\n            var diff = Date.now() - this._start - this._ticks++ * this._delay;\n            var delay = Math.max(0, this._delay - diff);\n\n            // clear old timeoutID\n            this.stop();\n\n            // check if we have time to one more tick\n            if (this.hasTime(delay)) {\n                this._timeoutId = setTimeout(this.tick.bind(this), delay);\n            } else {\n                this.stopMain();\n                var reason = this.lastError || TIMEOUT_ERROR;\n                this._reject(reason);\n            }\n        }\n    }, {\n        key: 'hasTime',\n        value: function hasTime(delay) {\n            return Date.now() - this._start + delay <= this._timeout;\n        }\n    }, {\n        key: 'wasConditionExecuted',\n        value: function wasConditionExecuted() {\n            return this._conditionExecutedCnt > 0;\n        }\n    }]);\n    return Timer;\n}();\n\nexports.default = Timer;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/addCommand.js":"/**\n *\n * Add custom command to client/browser instance. Read more about `addCommand` [here](/guide/usage/customcommands.html).\n *\n * <example>\n    :addCommandAsync.js\n    // adding `async` as function name disables the synchronous behavior of WebdriverIO commands\n    // in case you need to interact with other 3rd party libraries that support promises\n    client.addCommand(\"getUrlAndTitle\", function async (customVar) {\n        return this.url().then(function(urlResult) {\n            return this.getTitle().then(function(titleResult) {\n                console.log(customVar); // \"a custom variable\"\n                return { url: urlResult.value, title: titleResult }\n            })\n        })\n    })\n\n    :addCommand.js\n    browser.addCommand(\"getUrlAndTitle\", function (customVar) {\n        return {\n            url: this.getUrl(),\n            title: this.getTitle(),\n            customVar: customVar\n        }\n    })\n\n    :example.js\n    it('should use my custom command', function () {\n        browser.url('http://www.github.com')\n        var result = browser.getUrlAndTitle('foobar')\n\n        assert.strictEqual(result.url, 'https://github.com/')\n        assert.strictEqual(result.title, 'GitHub · Where software is built')\n        assert.strictEqual(result.customVar, 'foobar')\n    })\n * </example>\n *\n * @alias browser.addCommand\n * @param {String}   commandName   name of your custom command\n * @param {Function} customMethod  your custom method\n * @param {Boolean}  overwrite     if set to `true` you can overwrite existing commands\n * @type utility\n *\n */\n\n// Nothing to see here!\n// You can find the actual implementation in /lib/webdriverio.js\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/addValue.js":"/**\n *\n * Add a value to an object found by given selector. You can also use unicode\n * characters like Left arrow or Back space. WebdriverIO will take care of\n * translating them into unicode characters. You’ll find all supported characters\n * [here](https://w3c.github.io/webdriver/webdriver-spec.html#dfn-character-types).\n * To do that, the value has to correspond to a key from the table.\n *\n * <example>\n    :addValue.js\n    it('should demonstrate the addValue command', function () {\n        var input = $('.input')\n        input.setValue('test')\n        input.setValue(123)\n\n        // same as\n        browser.setValue('.input', 'test')\n        browser.addValue('.input', '123')\n\n        var value = elem.getValue()\n        assert(value === 'test123') // true\n    })\n * </example>\n *\n * @alias browser.addValue\n * @param {String}        selector   Input element\n * @param {String|Number} values     value to be added\n * @uses protocol/elements, protocol/elementIdValue\n * @type action\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet addValue = function (selector, value) {\n    /*!\n     * parameter check\n     */\n    if (typeof value === 'number') {\n        value = '' + value\n    }\n\n    if (typeof value !== 'string' && !Array.isArray(value)) {\n        throw new CommandError('number or type of arguments don\\'t agree with addValue command')\n    }\n\n    return this.elements(selector).then((res) => {\n        if (!res.value || res.value.length === 0) {\n            /*!\n             * throw NoSuchElement error if no element was found\n             */\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        let self = this\n        let elementIdValueCommands = []\n\n        for (let elem of res.value) {\n            elementIdValueCommands.push(self.elementIdValue(elem.ELEMENT, value))\n        }\n\n        return this.unify(elementIdValueCommands)\n    })\n}\n\nexport default addValue\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/call.js":"/**\n * You can use `call` to execute any async action within your test spec. The command itself\n * it treated like a synchronous function. It accepts promises and stops the execution until\n * the promise has resolved.\n *\n * <example>\n    :call.js\n    it('some testing here', function() {\n        browser.url('http://google.com')\n\n        // make an asynchronous call using any 3rd party library supporting promises\n        // e.g. call to backend or db to inject fixture data\n        browser.call(function () {\n            return somePromiseLibrary.someMethod().then(function () {\n                // ...\n            })\n        })\n\n        // example for async call to 3rd party library that doesn't support promises\n        browser.call(function () {\n            return new Promise(function(resolve, reject) {\n                someOtherNodeLibrary.someMethod(param1, function(err, res) {\n                    if (err) {\n                        return reject(err)\n                    }\n\n                    resolve(res)\n                })\n            })\n        })\n\n        // continue synchronously\n        browser.click('#elemA')\n        browser.setValue('.firstname','webdriverbot')\n    });\n * </example>\n *\n * @alias browser.call\n * @param {Function} callback  function to be called\n * @type utility\n *\n */\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/chooseFile.js":"/**\n *\n * Given a selector corresponding to an `<input type=file>` chooseFile will upload\n * the local file to the browser machine and fill the form accordingly. It does not\n * submit the form for you. This command only works for desktop browser.\n *\n * <example>\n    :call.js\n    it('uploads a file and fills the form with it', async function () {\n        var toUpload = path.join(__dirname, '..', '..', 'fixtures', 'cat-to-upload.gif')\n\n        browser.chooseFile('#upload-test', toUpload)\n\n        browser.getValue('#upload-test')\n        expect(/cat\\-to\\-upload\\.gif$/.test(val)).to.be.equal(true)\n    })\n * </example>\n *\n * @alias browser.chooseFile\n * @param {String} selector   input element\n * @param {String} localPath  local path to file to be uploaded\n * @uses utility/uploadFile, action/addValue\n * @type utility\n *\n */\n\nimport fs from 'fs'\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet chooseFile = function (selector, localPath) {\n    /*!\n     * parameter check\n     */\n    if (typeof localPath !== 'string') {\n        return new CommandError('number or type of arguments don\\'t agree with chooseFile command')\n    }\n\n    /*!\n     * mobile check\n     */\n    if (this.isMobile) {\n        return new CommandError('chooseFile command is not supported on mobile platforms')\n    }\n\n    return new Promise((resolve, reject) => {\n        fs.exists(localPath, (exists) => {\n            /* istanbul ignore next */\n            if (!exists) {\n                return reject(new CommandError('File to upload does not exists on your system'))\n            }\n\n            this.uploadFile(localPath).then(function (res) {\n                return this.addValue(selector, res.value)\n            }).then(resolve, reject)\n        })\n    })\n}\n\nexport default chooseFile\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/clearElement.js":"/**\n *\n * Clear a `<textarea>` or text `<input>` element’s value. Make sure you can interact with the\n * element before using this command. You can't clear an input element that is disabled or in\n * readonly mode.\n *\n * <example>\n    :clearElement.js\n    it('should demonstrate the clearElement command', function () {\n        var input = $('.input')\n        input.setValue('test123')\n        console.log(input.getValue()) // returns 'test123'\n\n        input.clearElement()\n        // or\n        browser.clearElement('.input')\n\n        var value = browser.getValue('.input')\n        assert(value === ''); // true\n    })\n * </example>\n *\n * @alias browser.clearElement\n * @param {String} selector input element\n * @uses protocol/elements, protocol/elementIdClear\n * @type action\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet clearElement = function (selector) {\n    return this.elements(selector).then((res) => {\n        if (!res.value || res.value.length === 0) {\n            // throw NoSuchElement error if no element was found\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        let elementIdClearCommands = []\n        for (let elem of res.value) {\n            elementIdClearCommands.push(this.elementIdClear(elem.ELEMENT, 'value'))\n        }\n\n        return this.unify(elementIdClearCommands)\n    })\n}\n\nexport default clearElement\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/click.js":"/**\n *\n * Click on an element based on given selector.\n *\n * <example>\n    :example.html\n    <button id=\"myButton\" onclick=\"document.getElementById('someText').innerHTML='I was clicked'\">Click me</button>\n    <div id=\"someText\">I was not clicked</div>\n\n    :click.js\n    it('should demonstrate the click command', function () {\n        var myButton = $('#myButton')\n        myButton.click()\n        // or\n        browser.click('#myButton')\n\n        var text = browser.getText('#someText');\n        assert(text === 'I was clicked'); // true\n    })\n\n    :example.js\n    it('should fetch menu links and visit each page', function () {\n        links = $$('#menu a');\n\n        menu.forEach(function (link) {\n            link.click();\n        });\n    });\n * </example>\n *\n * @alias browser.click\n * @param {String} selector element to click on. If it matches with more than one DOM-element it automatically clicks on the first element\n * @uses protocol/element, protocol/elementIdClick\n * @type action\n *\n */\n\nimport { RuntimeError } from '../utils/ErrorHandler'\n\nlet click = function (selector) {\n    return this.element(selector).then((elem) => {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!elem.value) {\n            throw new RuntimeError(7)\n        }\n\n        return this.elementIdClick(elem.value.ELEMENT)\n    })\n}\n\nexport default click\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/close.js":"/**\n *\n * Close current window (and focus on an other window). If no window handle is given\n * it automatically switches back to the first handle.\n *\n * <example>\n    :close.js\n    it('should demonstrate the close command', function () {\n        browser.url('http://github.com')\n        browser.newWindow('http://google.com')\n\n        var title = browser.getTitle()\n        console.log(title) // outputs: \"Google\"\n\n        browser.close()\n\n        title = browser.getTitle()\n        console.log(title) // outputs: \"GitHub · Build software better, together.\"\n    })\n * </example>\n *\n * @alias browser.close\n * @param {String=} windowHandle new window to focus on\n * @uses protocol/window, window/switchTab\n * @type window\n *\n */\n\nimport { RuntimeError } from '../utils/ErrorHandler'\n\nlet close = function (windowHandle) {\n    if (typeof windowHandle !== 'string') {\n        return this.getTabIds().then((tabIds) => {\n            if (tabIds.length === 0) {\n                throw new RuntimeError('' +\n                    'Can\\'t switch to the next tab because all windows are closed. ' +\n                    'Make sure you keep at least one window open!')\n            }\n\n            return this.window().switchTab(tabIds[0])\n        })\n    }\n\n    return this.window().switchTab(windowHandle)\n}\n\nexport default close\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/debug.js":"/**\n *\n * This command helps you to debug your integration tests. It stops the running browser and gives\n * you time to jump into it and check the state of your application (e.g. using the dev tools).\n * Your terminal transforms into a [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop)\n * interface that will allow you to try out certain commands, find elements and test actions on\n * them.\n *\n * [![WebdriverIO REPL](http://webdriver.io/images/repl.gif)](http://webdriver.io/images/repl.gif)\n *\n * If you run the WDIO testrunner make sure you increase the timeout property of your test framework\n * your are using (e.g. Mocha or Jasmine) in order to prevent the continuation due to a test timeout.\n * Also avoid to execute the command with multiple capabilities running at the same time.\n *\n * <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xWwP-3B_YyE\" frameborder=\"0\" allowfullscreen></iframe>\n *\n * <example>\n    :debug.js\n    it('should demonstrate the debug command', function () {\n        browser.setValue('#input', 'FOO')\n\n        browser.debug() // jumping into the browser and change value of #input to 'BAR'\n\n        var value = browser.getValue('#input')\n        console.log(value) // outputs: \"BAR\"\n    })\n * </example>\n *\n * @alias browser.debug\n * @type utility\n *\n */\n\nimport vm from 'vm'\nimport repl from 'repl'\nimport { RuntimeError } from '../utils/ErrorHandler'\n\nlet debug = function (commandTimeout = 5000, enableStdout, enableLogging) {\n    let commandIsRunning = false\n    let logLevel = this.logger.logLevel\n    this.logger.logLevel = 'verbose'\n    this.logger.debug()\n\n    if (!enableLogging) {\n        this.logger.logLevel = logLevel\n    }\n\n    const myEval = (cmd, context, filename, callback) => {\n        if (commandIsRunning) {\n            return\n        }\n\n        if (cmd === 'browser\\n') {\n            return callback(null, '[WebdriverIO REPL client]')\n        }\n\n        commandIsRunning = true\n        let result\n        if (typeof global.wdioSync === 'function') {\n            return global.wdioSync(() => {\n                try {\n                    result = vm.runInThisContext(cmd)\n                } catch (e) {\n                    commandIsRunning = false\n                    return callback(e)\n                }\n\n                callback(null, result)\n                commandIsRunning = false\n            })()\n        }\n\n        context.browser = this\n        try {\n            result = vm.runInThisContext(cmd)\n        } catch (e) {\n            commandIsRunning = false\n            return callback(e)\n        }\n\n        if (!result || typeof result.then !== 'function') {\n            commandIsRunning = false\n            return callback(null, result)\n        }\n\n        const timeout = setTimeout(() => callback(new RuntimeError('Command execution timed out')), commandTimeout)\n        result.then((res) => {\n            commandIsRunning = false\n            clearTimeout(timeout)\n            return callback(null, res)\n        }, (e) => {\n            commandIsRunning = false\n            clearTimeout(timeout)\n            return callback(e)\n        })\n    }\n\n    const replServer = repl.start({\n        prompt: '> ',\n        eval: myEval,\n        input: process.stdin,\n        output: process.stdout,\n        useGlobal: true,\n        ignoreUndefined: true\n    })\n\n    return new Promise((resolve) => {\n        replServer.on('exit', () => {\n            this.logger.logLevel = logLevel\n            resolve()\n        })\n    })\n}\n\nexport default debug\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/deleteCookie.js":"/**\n *\n * Delete cookies visible to the current page. By providing a cookie name it just removes the single cookie.\n *\n * <example>\n    :deleteCookie.js\n    it('should delete cookies', function () {\n        browser.setCookie({name: 'test', value: '123'})\n        browser.setCookie({name: 'test2', value: '456'})\n        browser.setCookie({name: 'test3', value: '789'})\n\n        var cookies = browser.getCookie()\n        console.log(cookies)\n        // outputs:\n        // [\n        //     { name: 'test', value: '123' },\n        //     { name: 'test2', value: '456' }\n        //     { name: 'test3', value: '789' }\n        // ]\n\n        browser.deleteCookie('test3')\n        cookies = browser.getCookie()\n        console.log(cookies)\n        // outputs:\n        // [\n        //     { name: 'test', value: '123' },\n        //     { name: 'test2', value: '456' }\n        // ]\n\n        browser.deleteCookie()\n        cookies = browser.getCookie()\n        console.log(cookies) // outputs: []\n    })\n * </example>\n *\n * @alias browser.deleteCookie\n * @param {String=} name name of cookie to be deleted\n * @uses protocol/cookie\n * @type cookie\n *\n */\n\nlet deleteCookie = function (name) {\n    /*!\n     * parameter check\n     */\n    if (typeof name !== 'string') {\n        name = null\n    }\n\n    return this.cookie('DELETE', name)\n}\n\nexport default deleteCookie\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/doubleClick.js":"/**\n *\n * Double-click on an element based on given selector.\n *\n * <example>\n    :example.html\n    <button id=\"myButton\" ondblclick=\"document.getElementById('someText').innerHTML='I was dblclicked'\">Click me</button>\n    <div id=\"someText\">I was not clicked</div>\n\n    :doubleClick.js\n    it('should demonstrate the doubleClick command', function () {\n        var myButton = $('#myButton')\n        myButton.doubleClick()\n        // or\n        browser.doubleClick('#myButton')\n\n        var value = browser.getText('#someText')\n        assert(value === 'I was dblclicked') // true\n    })\n * </example>\n *\n * @alias browser.doubleClick\n * @param {String} selector  element to double click on. If it matches with more than on DOM-element it automatically clicks on the first element\n * @uses protocol/element, protocol/moveTo, protocol/doDoubleClick, protocol/touchDoubleClick\n * @type action\n *\n */\n\nimport { RuntimeError } from '../utils/ErrorHandler'\n\nlet doubleClick = function (selector) {\n    if (this.isMobile) {\n        return this.element(selector).then((res) => {\n            /**\n             * check if element was found and throw error if not\n             */\n            if (!res.value) {\n                throw new RuntimeError(7)\n            }\n\n            return this.touchDoubleClick(res.value.ELEMENT)\n        })\n    }\n\n    return this.element(selector).then((res) => {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new RuntimeError(7)\n        }\n\n        return this.moveTo(res.value.ELEMENT)\n    }).doDoubleClick()\n}\n\nexport default doubleClick\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/dragAndDrop.js":"/**\n *\n * Drag an item to a destination element. __Note:__ this command only works for some drag&drop implementation\n * and some browser because of the way how Selenium simulates mouse events.\n *\n * @alias browser.dragAndDrop\n * @param {String} sourceElem      source selector\n * @param {String} destinationElem destination selector\n * @uses action/moveToObject, protocol/buttonDown, protocol/buttonUp, property/getLocation, protocol/touchDown, protocol/touchMove, protocol/touchUp\n * @type action\n *\n */\n\nlet dragAndDrop = function (selector, destinationElem) {\n    if (this.isMobile) {\n        return this.getLocation(selector).then(\n            (location) => this.touchDown(location.x, location.y)\n        ).getLocation(destinationElem).then(\n            (location) => this.touchMove(location.x, location.y).touchUp(location.x, location.y)\n        )\n    }\n\n    return this.moveToObject(selector).buttonDown().moveToObject(destinationElem).buttonUp()\n}\n\nexport default dragAndDrop\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/endAll.js":"/**\n *\n * End all selenium server sessions at once. Like the [`end`](/api/utility/end.html) command is this command\n * only supported in standalone mode.\n *\n * @alias browser.endAll\n * @uses protocol/sessions, protocol/session\n * @type utility\n *\n */\n\nlet endAll = function () {\n    return this.sessions().then((res) => {\n        let sessionCommands = []\n\n        for (let session of res.value) {\n            sessionCommands.push(this.session('delete', session.id))\n        }\n\n        return this.unify(sessionCommands)\n    })\n}\n\nexport default endAll\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/end.js":"/**\n *\n * End the session and close browser. This command is only supported in standalone mode. If you\n * are using the wdio testrunner you can't close the browser before your spec finishes. The testrunner\n * will close the browser for you after the spec has finished.\n *\n * However if you want to refresh the browser session you can try the [`reload`](/api/utility/reload.html)\n * command.\n *\n * <example>\n    :endAsync.js\n    client\n        .init() // starts session and opens the browser\n        .url('http://google.com')\n        // ... other commands\n        .end(); // ends session and close browser\n * </example>\n *\n * @alias browser.end\n * @uses protocol/session\n * @type utility\n *\n */\n\nlet end = function () {\n    return this.session('delete')\n}\n\nexport default end\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getAttribute.js":"/**\n *\n * Get an attribute from an DOM-element based on the selector and attribute name.\n * Returns a list of attribute values if selector matches multiple elements.\n *\n * <example>\n    :index.html\n    <form action=\"/submit\" method=\"post\" class=\"loginForm\">\n        <input type=\"text\" name=\"name\" placeholder=\"username\"></input>\n        <input type=\"text\" name=\"password\" placeholder=\"password\"></input>\n        <input type=\"submit\" name=\"submit\" value=\"submit\"></input>\n    </form>\n\n    :getAttribute.js\n    it('should demonstrate the getAttribute command', function () {\n        var form = $('form')\n\n        var attr = form.getAttribute('method')\n        console.log(attr) // outputs: \"post\"\n        // or\n        console.log(browser.getAttribute('form', 'method')) // outputs: \"post\"\n\n        // if your selector matches multiple elements it returns an array of results\n        var allInputs = $$('.loginForm input')\n        console.log(allInputs.map(function(el) { return el.getAttribute('name'); })) // outputs: ['name', 'password', 'submit']\n    })\n * </example>\n *\n * @alias browser.getAttribute\n * @param {String} selector      element with requested attribute\n * @param {String} attributeName requested attribute\n * @returns {String|String[]|null} The value of the attribute(s), or null if it is not set on the element.\n * @uses protocol/elements, protocol/elementIdAttribute\n * @type property\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet getAttribute = function (selector, attributeName) {\n    /*!\n     * parameter check\n     */\n    if (typeof attributeName !== 'string') {\n        throw new CommandError('number or type of arguments don\\'t agree with getAttribute command')\n    }\n\n    return this.elements(selector).then((res) => {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        let elementIdAttributeCommands = []\n\n        for (let elem of res.value) {\n            elementIdAttributeCommands.push(this.elementIdAttribute(elem.ELEMENT, attributeName))\n        }\n\n        return this.unify(elementIdAttributeCommands, {\n            extractValue: true\n        })\n    })\n}\n\nexport default getAttribute\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getCommandHistory.js":"/**\n *\n * Returns a list of previous called commands + their arguments.\n *\n * <example>\n    :getCommandHistoryAsync.js\n    client\n        .init()\n        .url('http://www.google.com')\n        .click('#username')\n        .addValue('#password', 'text')\n        .pause(2000)\n        .getCommandHistory().then(function(history){\n            console.log(history);\n            // outputs:\n            // [ { name: 'init', args: [] },\n            //   { name: 'url', args: [ 'http://www.google.com' ] },\n            //   { name: 'click', args: [ 'body' ] },\n            //   { name: 'element',\n            //     args: [ 'body' ],\n            //     result:\n            //      { state: 'success',\n            //        sessionId: 'c2aea856-ba18-48c0-8745-aa292f6394bc',\n            //        hCode: 1094372184,\n            //        value: [Object],\n            //        class: 'org.openqa.selenium.remote.Response',\n            //        status: 0,\n            //        selector: 'body' } },\n            //   { name: 'elementIdClick',\n            //     args: [ '0' ],\n            //     result:\n            //      { state: 'success',\n            //        sessionId: 'c2aea856-ba18-48c0-8745-aa292f6394bc',\n            //        hCode: 1704637158,\n            //        value: null,\n            //        class: 'org.openqa.selenium.remote.Response',\n            //        status: 0 } },\n            //   { name: 'addValue', args: [ '#lst-ib', 'webdriverio' ] },\n            //   { name: 'elements',\n            //     args: [ '#lst-ib' ],\n            //     result:\n            //      { state: 'success',\n            //        sessionId: 'c2aea856-ba18-48c0-8745-aa292f6394bc',\n            //        hCode: 1171202369,\n            //        value: [Object],\n            //        class: 'org.openqa.selenium.remote.Response',\n            //        status: 0,\n            //        selector: '#lst-ib' } },\n            //   { name: 'elementIdValue',\n            //     args: [ '1', 'webdriverio' ],\n            //     result:\n            //      { state: 'success',\n            //        sessionId: 'c2aea856-ba18-48c0-8745-aa292f6394bc',\n            //        hCode: 447115314,\n            //        value: null,\n            //        class: 'org.openqa.selenium.remote.Response',\n            //        status: 0 } },\n            //   { name: 'pause', args: [ 2000 ] } ]\n        })\n        .end();\n * </example>\n *\n * @alias browser.getCommandHistory\n * @returns {Object[]} list of recent called commands + their arguments\n * @type utility\n *\n */\n\nlet getCommandHistory = function () {\n    return this.commandList.slice(0, -1)\n}\n\nexport default getCommandHistory\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getCookie.js":"/**\n *\n * Retrieve a [cookie](https://w3c.github.io/webdriver/webdriver-spec.html#cookies)\n * visible to the current page. You can query a specific cookie by providing the cookie name or\n * retrieve all.\n *\n * <example>\n    :getCookie.js\n    it('should return a cookie for me', function () {\n        browser.setCookie({name: 'test', value: '123'})\n        browser.setCookie({name: 'test2', value: '456'})\n\n        var testCookie = browser.getCookie('test')\n        console.log(testCookie); // outputs: { name: 'test', value: '123' }\n\n        var allCookies = browser.getCookie()\n        console.log(allCookies);\n        // outputs:\n        // [\n        //    { name: 'test', value: '123' },\n        //    { name: 'test2', value: '456' }\n        // ]\n    })\n * </example>\n *\n * @alias browser.getCookie\n * @param {String=} name name of requested cookie\n * @returns {Object|null} requested cookie if existing\n * @uses protocol/cookie\n * @type cookie\n *\n */\n\nlet getCookie = function (name) {\n    /*!\n     * paramter check\n     */\n    if (typeof name !== 'string') {\n        name = null\n    }\n\n    return this.cookie().then((res) => {\n        res.value = res.value || []\n\n        if (typeof name === 'string') {\n            return res.value.filter((cookie) => cookie.name === name)[0] || null\n        }\n\n        return res.value || (typeof name === 'string' ? null : [])\n    })\n}\n\nexport default getCookie\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getCssProperty.js":"/**\n *\n * Get a css property from a DOM-element selected by given selector. The return value\n * is formatted to be testable. Colors gets parsed via [rgb2hex](https://www.npmjs.org/package/rgb2hex)\n * and all other properties gets parsed via [css-value](https://www.npmjs.org/package/css-value).\n *\n * Note that shorthand CSS properties (e.g. background, font, border, margin, padding, list-style, outline,\n * pause, cue) are not returned, in accordance with the DOM CSS2 specification - you should directly access\n * the longhand properties (e.g. background-color) to access the desired values.\n *\n * <example>\n    :example.html\n    <label id=\"myLabel\" for=\"input\" style=\"color: #0088cc; font-family: helvetica, arial, freesans, clean, sans-serif, width: 100px\">Some Label</label>\n\n    :getCssProperty.js\n    it('should demonstrate the getCssProperty command', function () {\n        var elem = $('#myLabel')\n\n        var color = elem.getCssProperty('color')\n        console.log(color)\n        // outputs the following:\n        // {\n        //     property: 'color',\n        //     value: 'rgba(0, 136, 204, 1)',\n        //     parsed: {\n        //         hex: '#0088cc',\n        //         alpha: 1,\n        //         type: 'color',\n        //         rgba: 'rgba(0, 136, 204, 1)'\n        //     }\n        // }\n\n        var font = elem.getCssProperty('font-family')\n        console.log(font)\n        // outputs the following:\n        // {\n        //      property: 'font-family',\n        //      value: 'helvetica',\n        //      parsed: {\n        //          value: [ 'helvetica', 'arial', 'freesans', 'clean', 'sans-serif' ],\n        //          type: 'font',\n        //          string: 'helvetica, arial, freesans, clean, sans-serif'\n        //      }\n        // }\n\n        var width = elem.getCssProperty('width')\n        console.log(width)\n        // outputs the following:\n        // {\n        //     property: 'width',\n        //     value: '100px',\n        //     parsed: {\n        //         type: 'number',\n        //         string: '100px',\n        //         unit: 'px',\n        //         value: 100\n        //     }\n        // }\n    })\n * </example>\n *\n * @alias browser.getCssProperty\n * @param {String} selector    element with requested style attribute\n * @param {String} cssProperty css property name\n * @uses protocol/elements, protocol/elementIdCssProperty\n * @type property\n *\n */\n\nimport parseCSS from '../helpers/parseCSS.js'\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet getCssProperty = function (selector, cssProperty) {\n    /*!\n     * parameter check\n     */\n    if (typeof cssProperty !== 'string') {\n        throw new CommandError('number or type of arguments don\\'t agree with getCssProperty command')\n    }\n\n    return this.elements(selector).then((res) => {\n        if (!res.value || res.value.length === 0) {\n            // throw NoSuchElement error if no element was found\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        let elementIdCssPropertyCommands = []\n        for (let elem of res.value) {\n            elementIdCssPropertyCommands.push(this.elementIdCssProperty(elem.ELEMENT, cssProperty))\n        }\n\n        return Promise.all(elementIdCssPropertyCommands)\n    }).then((result) => {\n        /**\n         * result already unwrapped when command was reran\n         */\n        if (!Array.isArray(result)) {\n            return result\n        }\n\n        return parseCSS(result, cssProperty)\n    })\n}\n\nexport default getCssProperty\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getCurrentTabId.js":"/**\n *\n * Retrieve the current window handle.\n *\n * <example>\n    :getCurrenteTabId.js\n    it('should return the current tab id', function () {\n        browser.url('http://webdriver.io')\n\n        var tabId = browser.getCurrentTabId()\n        console.log(tabid)\n        // outputs something like the following:\n        // \"CDwindow-C43FB686-949D-4232-828B-583398FBD0C0\"\n    })\n * </example>\n *\n * @alias browser.getCurrentTabId\n * @returns {String} the window handle URL of the current focused window\n * @uses protocol/windowHandle\n * @type window\n *\n */\n\nlet getCurrentTabId = function () {\n    return this.unify(this.windowHandle(), {\n        extractValue: true\n    })\n}\n\nexport default getCurrentTabId\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getElementSize.js":"/**\n *\n * Get the width and height for an DOM-element based given selector.\n *\n * <example>\n    :getElementSize.js\n    it('should give me the size of an element', function () {\n        browser.url('http://github.com')\n        var logo = $('.octicon-mark-github')\n\n        var size = logo.getElementSize()\n        // or\n        size = browser.getElementSize('.octicon-mark-github')\n        console.log(size) // outputs: { width: 32, height: 32 }\n\n        var width = logo.getElementSize('width')\n        // or\n        width = browser.getElementSize('.octicon-mark-github', 'width')\n        console.log(width) // outputs: 32\n\n        var height = logo.getElementSize('height')\n        // or\n        height = browser.getElementSize('.octicon-mark-github', 'height')\n        console.log(height) // outputs: 32\n    })\n * </example>\n *\n * @alias browser.getElementSize\n * @param   {String} selector element with requested size\n * @returns {Object}          requested element size (`{width:number, height:number}`)\n * @uses protocol/elements, protocol/elementIdSize\n * @type property\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet getElementSize = function (selector, prop) {\n    return this.elements(selector).then(function (res) {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        let elementIdSizeCommands = []\n        for (let elem of res.value) {\n            elementIdSizeCommands.push(this.elementIdSize(elem.ELEMENT))\n        }\n\n        return Promise.all(elementIdSizeCommands)\n    }).then((sizes) => {\n        /**\n         * result already unwrapped when command was reran\n         */\n        if (!Array.isArray(sizes)) {\n            return sizes\n        }\n\n        sizes = sizes.map((size) => {\n            if (typeof prop === 'string' && prop.match(/(width|height)/)) {\n                return size.value[prop]\n            }\n\n            return {\n                width: size.value.width,\n                height: size.value.height\n            }\n        })\n\n        return sizes.length === 1 ? sizes[0] : sizes\n    })\n}\n\nexport default getElementSize\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getGeoLocation.js":"/**\n *\n * Get the current geolocation.\n *\n * <example>\n    :getGeoLocation.js\n    it('should return my current location', function () {\n        var location = browser.getGeoLocation()\n        console.log(location)\n        // outputs:\n        // {\n        //     latitude: 51.1045407,\n        //     longitude: 13.2017384,\n        //     altitude: 20.23345\n        // }\n    })\n * </example>\n *\n * @alias browser.getGeoLocation\n * @returns {Object} the current geo location (`{latitude: number, longitude: number, altitude: number}`)\n * @uses protocol/location\n * @type mobile\n *\n */\n\nlet getGeoLocation = function () {\n    return this.unify(this.location(), {\n        extractValue: true\n    })\n}\n\nexport default getGeoLocation\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getGridNodeDetails.js":"/**\n *\n * Get the details of the Selenium Grid node running a session\n *\n * <example>\n    :grid.js\n    it('should return grid information', function () {\n        console.log(browser.getGridNodeDetails())\n        // {\n        //     success: true,\n        //     msg: \"proxy found !\",\n        //     id: \"MacMiniA10\",\n        //     request: {\n        //         ...\n        //         configuration: {\n        //             ...\n        //         },\n        //         capabilities: [\n        //             {\n        //                 ...\n        //             }\n        //         ]\n        //     }\n        // }\n    })\n * </example>\n *\n * @alias browser.getGridNodeDetails\n * @uses protocol/gridTestSession, protocol/gridProxyDetails\n * @type grid\n */\n\nlet getGridNodeDetails = function () {\n    return this.gridTestSession().then((session) =>\n        this.gridProxyDetails(session.proxyId).then((details) => {\n            delete session.msg\n            delete session.success\n\n            delete details.msg\n            delete details.success\n            delete details.id\n\n            return Object.assign(details, session)\n        })\n    )\n    .catch(e => {\n        if (e.seleniumStack && e.seleniumStack.type === 'GridApiError') {\n            return {\n                error: e.message\n            }\n        }\n    })\n}\n\nexport default getGridNodeDetails\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getHTML.js":"/**\n *\n * Get source code of specified DOM element by selector.\n *\n * <example>\n    :index.html\n    <div id=\"test\">\n        <span>Lorem ipsum dolor amet</span>\n    </div>\n\n    :getHTML.js\n    it('should get html for certain elements', function () {\n        var outerHTML = browser.getHTML('#test');\n        console.log(outerHTML);\n        // outputs:\n        // \"<div id=\"test\"><span>Lorem ipsum dolor amet</span></div>\"\n\n        var innerHTML = browser.getHTML('#test', false);\n        console.log(innerHTML);\n        // outputs:\n        // \"<span>Lorem ipsum dolor amet</span>\"\n    });\n * </example>\n *\n * @alias browser.getHTML\n * @param {String}   selector           element to get the current DOM structure from\n * @param {Boolean=} includeSelectorTag if true it includes the selector element tag (default: true)\n * @uses action/selectorExecute\n * @type property\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\nimport getHTMLHelper from '../scripts/getHTML'\n\nlet getHTML = function (selector, includeSelectorTag) {\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if includeSelectorTag is used\n     */\n    includeSelectorTag = typeof includeSelectorTag === 'boolean' ? includeSelectorTag : true\n\n    return this.selectorExecute(selector, getHTMLHelper, includeSelectorTag).then((html) => {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!html) {\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        return html && html.length === 1 ? html[0] : html\n    })\n}\n\nexport default getHTML\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getLocationInView.js":"/**\n *\n * Determine an element’s location on the screen once it has been scrolled into view.\n *\n * <example>\n    :getLocationInView.js\n    it('should get the location of one or multiple elements in view', function () {\n        browser.url('http://github.com');\n\n        var location = browser.getLocation('.octicon-mark-github');\n        console.log(location); // outputs: { x: 150, y: 20 }\n\n        var xLocation = browser.getLocation('.octicon-mark-github', 'x')\n        console.log(xLocation); // outputs: 150\n\n        var yLocation = browser.getLocation('.octicon-mark-github', 'y')\n        console.log(yLocation); // outputs: 20\n    });\n * </example>\n *\n * @alias browser.getLocationInView\n * @param {String} selector    element with requested position offset\n * @returns {Object|Object[]}  The X and Y coordinates for the element on the page (`{x:number, y:number}`)\n *\n * @uses protocol/elements, protocol/elementIdLocationInView\n * @type property\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet getLocationInView = function (selector, prop) {\n    return this.elements(selector).then((res) => {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        let elementIdLocationInViewCommands = []\n        for (let elem of res.value) {\n            elementIdLocationInViewCommands.push(this.elementIdLocationInView(elem.ELEMENT))\n        }\n\n        return Promise.all(elementIdLocationInViewCommands)\n    }).then((locations) => {\n        /**\n         * result already unwrapped when command was reran\n         */\n        if (!Array.isArray(locations)) {\n            return locations\n        }\n\n        locations = locations.map((location) => {\n            if (typeof prop === 'string' && prop.match(/(x|y)/)) {\n                return location.value[prop]\n            }\n\n            return {\n                x: location.value.x,\n                y: location.value.y\n            }\n        })\n\n        return locations.length === 1 ? locations[0] : locations\n    })\n}\n\nexport default getLocationInView\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getLocation.js":"/**\n *\n * Determine an element’s location on the page. The point (0, 0) refers to\n * the upper-left corner of the page.\n *\n * <example>\n    :getLocation.js\n    it('should get the location of one or multiple elements', function () {\n        browser.url('http://github.com');\n\n        var location = browser.getLocation('.octicon-mark-github');\n        console.log(location); // outputs: { x: 150, y: 20 }\n\n        var xLocation = browser.getLocation('.octicon-mark-github', 'x')\n        console.log(xLocation); // outputs: 150\n\n        var yLocation = browser.getLocation('.octicon-mark-github', 'y')\n        console.log(yLocation); // outputs: 20\n    });\n * </example>\n *\n * @alias browser.getLocation\n * @param {String} selector    element with requested position offset\n * @param {String} property    can be \"x\" or \"y\" to get a result value directly for easier assertions\n * @returns {Object|Object[]}  The X and Y coordinates for the element on the page (`{x:number, y:number}`)\n * @uses protocol/elements, protocol/elementIdLocation\n * @type property\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet getLocation = function (selector, prop) {\n    return this.elements(selector).then((res) => {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        let results = []\n        let that = this\n        return new Promise((resolve, reject) => {\n            let hasError = false\n\n            function processNext () {\n                let current = res.value.pop()\n\n                return that\n                    .elementIdLocation(current.ELEMENT)\n                    .catch((err) => {\n                        hasError = true\n                        reject(err)\n                    })\n                    .then((location) => {\n                        if (hasError) {\n                            return\n                        }\n\n                        if (prop === 'x' || prop === 'y') {\n                            results.push(location.value[prop])\n                        } else {\n                            results.push({\n                                x: location.value.x,\n                                y: location.value.y\n                            })\n                        }\n\n                        if (res.value.length) {\n                            return processNext()\n                        } else {\n                            resolve((results.length === 1) ? results[0] : results)\n                        }\n                    })\n            }\n\n            return processNext()\n        })\n    })\n}\n\nexport default getLocation\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getOrientation.js":"/**\n *\n * Get the current browser orientation. This command only works for mobile environments like Android Emulator,\n * iOS Simulator or on real devices.\n *\n * <example>\n    :getOrientation.js\n    it('should get the orientation of my mobile device', function () {\n        var orientation = browser.getOrientation();\n        console.log(orientation); // outputs: \"landscape\"\n    });\n * </example>\n *\n * @alias browser.getOrientation\n * @returns {String} device orientation (`landscape/portrait`)\n * @uses protocol/orientation\n * @for android, ios\n * @type mobile\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet getOrientation = function () {\n    if (!this.isMobile) {\n        throw new CommandError('getOrientation command is not supported on non mobile platforms')\n    }\n\n    return this.unify(this.orientation(), {\n        lowercase: true,\n        extractValue: true\n    })\n}\n\nexport default getOrientation\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getSource.js":"/**\n *\n * Get source code of the page. This command won't work in mobile environments for native apps. If you running\n * hybrid tests make sure that you are in the webview before calling this command.\n *\n * <example>\n    :getSource.js\n    it('should get the source of the html document', function () {\n        browser.url('http://webdriver.io');\n\n        var source = browser.getSource();\n        console.log(source); // outputs: \"<!DOCTYPE html>\\n<title>Webdriver.io</title>...\"\n    });\n * </example>\n *\n * @alias browser.getSource\n * @returns {String} source code of current website\n * @uses protocol/source\n * @type property\n *\n */\n\nlet getSource = function () {\n    return this.unify(this.source(), {\n        extractValue: true\n    })\n}\n\nexport default getSource\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getTabIds.js":"/**\n *\n * Retrieve a list of all window handles available in the session. You can use these handles to switch\n * to a different tab.\n *\n * <example>\n    :getTabIds.js\n    it('should get the source of the html document', function () {\n        browser.url('http://webdriver.io');\n\n        var tabIds = browser.getTabIds();\n        console.log(tabIds); // outputs: ['f9b387e0-99bd-11e6-8881-d3174a61fdce']\n\n        browser.newWindow('http://google.com');\n        tabIds = browser.getTabIds();\n        console.log(tabIds); // outputs: ['f9b387e0-99bd-11e6-8881-d3174a61fdce', 'fb4e9a40-99bd-11e6-8881-d3174a61fdce' ]\n    });\n * </example>\n *\n * @alias browser.getTabIds\n * @returns {String[]} a list of window handles\n * @uses protocol/windowHandles\n * @type window\n *\n */\n\nlet getTabIds = function () {\n    return this.unify(this.windowHandles(), {\n        extractValue: true\n    })\n}\n\nexport default getTabIds\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getTagName.js":"/**\n *\n * Get tag name of a DOM-element found by given selector.\n *\n * <example>\n    :index.html\n    <div id=\"elem\">Lorem ipsum</div>\n\n    :getTagName.js\n    it('should demonstrate the getTagName command', function () {\n        var elem = $('#elem');\n\n        var tagName = elem.getTagName();\n        console.log(tagName); // outputs: \"div\"\n    })\n * </example>\n *\n * @alias browser.getTagName\n * @param   {String}           selector   element with requested tag name\n * @returns {String|String[]}             the element's tag name, as a lowercase string\n * @uses protocol/elements, protocol/elementIdName\n * @type property\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet getTagName = function (selector) {\n    return this.elements(selector).then((res) => {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        let elementIdNameCommands = []\n        for (let elem of res.value) {\n            elementIdNameCommands.push(this.elementIdName(elem.ELEMENT))\n        }\n\n        return this.unify(elementIdNameCommands, {\n            extractValue: true\n        })\n    })\n}\n\nexport default getTagName\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getText.js":"/**\n *\n * Get the text content from a DOM-element found by given selector. Make sure the element\n * you want to request the text from [is interactable](http://www.w3.org/TR/webdriver/#interactable)\n * otherwise you will get an empty string as return value. If the element is disabled or not\n * visible and you still want to receive the text content use [getHTML](http://webdriver.io/api/property/getHTML.html)\n * as a workaround.\n *\n * <example>\n    :index.html\n    <div id=\"elem\">\n        Lorem ipsum <strong>dolor</strong> sit amet,<br>\n        consetetur sadipscing elitr\n    </div>\n    <span style=\"display: none\">I am invisible</span>\n\n    :getText.js\n    it('should get text of an element or elements', function () {\n        var text = browser.getText('#elem');\n        console.log(text);\n        // outputs the following:\n        // \"Lorem ipsum dolor sit amet,consetetur sadipscing elitr\"\n\n        var spanText = browser.getText('span');\n        console.log(text);\n        // outputs \"\" (empty string) since element is not interactable\n    });\n\n    it('get content from table cell', function () {\n        browser.url('http://the-internet.herokuapp.com/tables');\n        var rows = $$('#table1 tr');\n        var columns = rows[1].$$('td'); // get columns of 2nd row\n        console.log(columns[2].getText()); // get text of 3rd column\n    });\n * </example>\n *\n * @alias browser.getText\n * @param   {String}           selector   element with requested text\n * @returns {String|String[]}             content of selected element (all HTML tags are removed)\n * @uses protocol/elements, protocol/elementIdText\n * @type property\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet getText = function (selector) {\n    return this.elements(selector).then((res) => {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        let elementIdTextCommands = []\n        for (let elem of res.value) {\n            elementIdTextCommands.push(this.elementIdText(elem.ELEMENT))\n        }\n\n        return this.unify(elementIdTextCommands, {\n            extractValue: true\n        })\n    })\n}\n\nexport default getText\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getTitle.js":"/**\n *\n * Get the title of current opened website. This command only works for browser environments or on mobile\n * devices with webview enabled (hybrid tests).\n *\n * <example>\n    :getTitle.js\n    it('should get the title of the document', function () {\n        browser.url('http://webdriver.io');\n\n        var title = browser.getTitle()\n        console.log(title);\n        // outputs the following:\n        // \"WebdriverIO - Selenium 2.0 javascript bindings for nodejs\"\n    });\n * </example>\n *\n * @alias browser.getTitle\n * @returns {String} current page title\n * @uses protocol/title\n * @type property\n *\n */\n\nlet getTitle = function () {\n    return this.unify(this.title(), {\n        extractValue: true\n    })\n}\n\nexport default getTitle\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getUrl.js":"/**\n *\n * Get the url of current opened website.\n *\n * <example>\n    :getUrl.js\n    it('should get the url of the current page', function () {\n        browser.url('http://webdriver.io');\n\n        var url = browser.getUrl();\n        console.log(url);\n        // outputs the following:\n        // \"http://webdriver.io\"\n    });\n * </example>\n *\n * @alias browser.getUrl\n * @returns {String} current page url\n * @uses protocol/url\n * @type property\n *\n */\n\nlet getUrl = function () {\n    return this.unify(this.url(), {\n        extractValue: true\n    })\n}\n\nexport default getUrl\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getValue.js":"/**\n *\n * Get the value of a `<textarea>` or text `<input>` found by given selector.\n *\n * <example>\n    :index.html\n    <input type=\"text\" value=\"John Doe\" id=\"username\">\n\n    :getValue.js\n    it('should demonstrate the getValue command', function () {\n        var inputUser = $('#username');\n\n        var value = inputUser.getValue();\n        console.log(value); // outputs: \"John Doe\"\n    });\n * </example>\n *\n * @alias browser.getValue\n * @param   {String} selector input or textarea element\n * @returns {String}          requested input value\n * @uses protocol/elements, protocol/elementIdAttribute\n * @type property\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet getValue = function (selector) {\n    return this.elements(selector).then((res) => {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        let elementIdAttributeCommands = []\n        for (let elem of res.value) {\n            elementIdAttributeCommands.push(this.elementIdAttribute(elem.ELEMENT, 'value'))\n        }\n\n        return this.unify(elementIdAttributeCommands, {\n            extractValue: true\n        })\n    })\n}\n\nexport default getValue\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/getViewportSize.js":"/**\n *\n * Get viewport size of the current browser window. This command only works on desktop browser or in a mobile\n * environment with a webview enabled.\n *\n * <example>\n    :getViewportSize.js\n    it('should return the viewport size', function () {\n        browser.url('http://webdriver.io');\n\n        var size = browser.getViewportSize()\n        console.log(size); // outputs: {width: 1024, height: 768}\n\n        var width = browser.getViewportSize('width')\n        console.log(size); // outputs: 1024\n\n        var height = browser.getViewportSize('height');\n        console.log(height); // outputs: 768\n    });\n * </example>\n *\n * @alias browser.getViewportSize\n * @param {String} property  if \"width\" or \"height\" is set it returns only that property\n * @returns {Object}  viewport width and height of the browser\n * @uses protocol/execute\n * @type window\n *\n */\n\nimport getViewportSizeHelper from '../scripts/getViewportSize'\n\nlet getViewportSize = function (prop) {\n    return this.execute(getViewportSizeHelper).then((res) => {\n        if (typeof prop === 'string' && prop.match(/(width|height)/)) {\n            prop = 'screen' + prop.slice(0, 1).toUpperCase() + prop.slice(1)\n            return res.value[prop]\n        }\n\n        return {\n            width: res.value.screenWidth || 0,\n            height: res.value.screenHeight || 0\n        }\n    })\n}\n\nexport default getViewportSize\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/hasFocus.js":"/**\n *\n * Return true or false if the selected DOM-element currently has focus.\n *\n * <example>\n    :index.html\n    <input name=\"login\" autofocus=\"\" />\n\n    :hasFocus.js\n    it('should detect the focus of an element', function () {\n        browser.url('/');\n\n        var loginInput = $('[name=\"login\"]');\n        console.log(loginInput.hasFocus()); // outputs: false\n\n        loginInput.click();\n        console.log(loginInput.hasFocus()); // outputs: true\n    })\n * </example>\n *\n * @alias browser.hasFocus\n * @param {String} selector   select active element\n * @returns {Boolean}         true if element has focus\n * @uses protocol/execute\n * @type state\n *\n */\n\nlet hasFocus = function (selector) {\n    let result = this.execute(function (selector) {\n        var focused = document.activeElement\n\n        if (!focused || focused === document.body) {\n            return false\n        } else if (document.querySelector) {\n            return focused === document.querySelector(selector)\n        }\n\n        return false\n    }, selector)\n\n    return result.then(result => result.value)\n}\n\nexport default hasFocus\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/hold.js":"/**\n *\n * Long press on an element using finger motion events. This command works only in a\n * mobile context.\n *\n * @alias browser.hold\n * @param {String} selector element to hold on\n * @uses protocol/element, protocol/touchLongClick\n * @type mobile\n *\n */\n\nimport { RuntimeError } from '../utils/ErrorHandler'\n\nlet hold = function (selector) {\n    return this.element(selector).then((res) => {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new RuntimeError(7)\n        }\n\n        return this.touchLongClick(res.value.ELEMENT)\n    })\n}\n\nexport default hold\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/isEnabled.js":"/**\n *\n * Return true or false if the selected DOM-element found by given selector is enabled.\n *\n * <example>\n    :index.html\n    <input type=\"text\" name=\"inputField\" class=\"input1\">\n    <input type=\"text\" name=\"inputField\" class=\"input2\" disabled>\n    <input type=\"text\" name=\"inputField\" class=\"input3\" disabled=\"disabled\">\n\n    :isEnabled.js\n    it('should detect if an element is enabled', function () {\n        var isEnabled = browser.isEnabled('.input1');\n        console.log(isEnabled); // outputs: true\n\n        var isEnabled2 = browser.isEnabled('.input2');\n        console.log(isEnabled2); // outputs: false\n\n        var isEnabled3 = browser.isEnabled('.input3')\n        console.log(isEnabled3); // outputs: false\n    });\n * </example>\n *\n * @alias browser.isEnabled\n * @param   {String}             selector  DOM-element\n * @returns {Boolean|Boolean[]}            true if element(s)* (is|are) enabled\n * @uses protocol/elements, protocol/elementIdEnabled\n * @type state\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet isEnabled = function (selector) {\n    return this.elements(selector).then((res) => {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        let elementIdEnabledCommands = []\n        for (let elem of res.value) {\n            elementIdEnabledCommands.push(this.elementIdEnabled(elem.ELEMENT))\n        }\n\n        return this.unify(elementIdEnabledCommands, {\n            extractValue: true\n        })\n    })\n}\n\nexport default isEnabled\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/isExisting.js":"/**\n *\n * Returns true if at least one element is existing by given selector\n *\n * <example>\n    :index.html\n    <div id=\"notDisplayed\" style=\"display: none\"></div>\n    <div id=\"notVisible\" style=\"visibility: hidden\"></div>\n    <div id=\"notInViewport\" style=\"position:absolute; left: 9999999\"></div>\n    <div id=\"zeroOpacity\" style=\"opacity: 0\"></div>\n\n    :isExisting.js\n    it('should detect if elements are existing', function () {\n        var isExisting;\n        isExisting = browser.isExisting('#someRandomNonExistingElement');\n        console.log(isExisting); // outputs: false\n\n        isExisting = browser.isExisting('#notDisplayed');\n        console.log(isExisting); // outputs: true\n\n        isExisting = browser.isExisting('#notVisible');\n        console.log(isExisting); // outputs: true\n\n        isExisting = browser.isExisting('#notInViewport');\n        console.log(isExisting); // outputs: true\n\n        isExisting = browser.isExisting('#zeroOpacity');\n        console.log(isExisting); // outputs: true\n    });\n * </example>\n *\n * @alias browser.isExisting\n * @param   {String}             selector  DOM-element\n * @returns {Boolean|Boolean[]}            true if element(s)* [is|are] existing\n * @uses protocol/elements\n * @type state\n *\n */\n\nlet isExisting = function (selector) {\n    return this.elements(selector).then((res) => {\n        if (Array.isArray(res.value) && res.value.length > 0) {\n            return true\n        }\n\n        return false\n    })\n}\n\nexport default isExisting\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/isSelected.js":"/**\n *\n * Return true or false if an `<option>` element, or an `<input>` element of type\n * checkbox or radio is currently selected found by given selector.\n *\n * <example>\n    :index.html\n    <select name=\"selectbox\" id=\"selectbox\">\n        <option value=\"John Doe\">John Doe</option>\n        <option value=\"Layla Terry\" selected=\"selected\">Layla Terry</option>\n        <option value=\"Bill Gilbert\">Bill Gilbert\"</option>\n    </select>\n\n    :isSelected.js\n    it('should detect if an element is selected', function () {\n        var element = $('[value=\"Layla Terry\"]');\n        console.log(element.isSelected()); // outputs: true\n\n        browser.selectByValue('#selectbox', 'Bill Gilbert');\n        console.log(element.isSelected()); // outputs: false\n    });\n * </example>\n *\n * @alias browser.isSelected\n * @param   {String}             selector  option element or input of type checkbox or radio\n * @returns {Boolean|Boolean[]}            true if element is selected\n * @uses protocol/elements, protocol/elementIdSelected\n * @type state\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet isSelected = function (selector) {\n    return this.elements(selector).then((res) => {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        let elementIdSelectedCommands = []\n        for (let elem of res.value) {\n            elementIdSelectedCommands.push(this.elementIdSelected(elem.ELEMENT))\n        }\n\n        return this.unify(elementIdSelectedCommands, {\n            extractValue: true\n        })\n    })\n}\n\nexport default isSelected\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/isVisible.js":"/**\n *\n * Return true if the selected DOM-element found by given selector is visible. Returns an array if multiple DOM-elements are found for the given selector.\n *\n * <example>\n    :index.html\n    <div id=\"notDisplayed\" style=\"display: none\"></div>\n    <div id=\"notVisible\" style=\"visibility: hidden\"></div>\n    <div id=\"notInViewport\" style=\"position:absolute; left: 9999999\"></div>\n    <div id=\"zeroOpacity\" style=\"opacity: 0\"></div>\n\n    :isVisible.js\n    it('should detect if an element is visible', function () {\n        var isVisible = browser.isVisible('#notDisplayed');\n        console.log(isVisible); // outputs: false\n\n        isVisible = browser.isVisible('#notVisible');\n        console.log(isVisible); // outputs: false\n\n        isVisible = browser.isVisible('#notExisting');\n        console.log(isVisible); // outputs: false\n\n        isVisible = browser.isVisible('#notInViewport');\n        console.log(isVisible); // outputs: true\n\n        isVisible = browser.isVisible('#zeroOpacity');\n        console.log(isVisible); // outputs: true\n    });\n * </example>\n *\n * @alias browser.isVisible\n * @param   {String}             selector  DOM-element\n * @returns {Boolean|Boolean[]}            true if element(s)* [is|are] visible\n * @uses protocol/elements, protocol/elementIdDisplayed\n * @type state\n *\n */\n\nlet isVisible = function (selector) {\n    return this.elements(selector).then((res) => {\n        /**\n         * if element does not exist it is automatically not visible ;-)\n         */\n        if (!res.value || res.value.length === 0) {\n            return false\n        }\n\n        let elementIdDisplayedCommands = []\n        for (let elem of res.value) {\n            elementIdDisplayedCommands.push(this.elementIdDisplayed(elem.ELEMENT))\n        }\n\n        return this.unify(elementIdDisplayedCommands, {\n            extractValue: true\n        })\n    })\n}\n\nexport default isVisible\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/isVisibleWithinViewport.js":"/**\n *\n * Return true if the selected DOM-element found by given selector is visible and within the viewport.\n *\n * <example>\n    :index.html\n    <div id=\"notDisplayed\" style=\"display: none\"></div>\n    <div id=\"notVisible\" style=\"visibility: hidden\"></div>\n    <div id=\"notInViewport\" style=\"position:absolute; left: 9999999\"></div>\n    <div id=\"zeroOpacity\" style=\"opacity: 0\"></div>\n\n    :isVisibleWithinViewport.js\n    :isVisible.js\n    it('should detect if an element is visible', function () {\n        var isVisibleWithinViewport = browser.isVisibleWithinViewport('#notDisplayed');\n        console.log(isVisibleWithinViewport); // outputs: false\n\n        isVisibleWithinViewport = browser.isVisibleWithinViewport('#notVisible');\n        console.log(isVisibleWithinViewport); // outputs: false\n\n        isVisibleWithinViewport = browser.isVisibleWithinViewport('#notExisting');\n        console.log(isVisibleWithinViewport); // outputs: false\n\n        isVisibleWithinViewport = browser.isVisibleWithinViewport('#notInViewport');\n        console.log(isVisibleWithinViewport); // outputs: false\n\n        isVisibleWithinViewport = browser.isVisibleWithinViewport('#zeroOpacity');\n        console.log(isVisibleWithinViewport); // outputs: false\n    });\n * </example>\n *\n * @alias browser.isVisibleWithinViewport\n * @param   {String}             selector  DOM-element\n * @returns {Boolean|Boolean[]}            true if element(s)* [is|are] visible\n * @uses protocol/selectorExecute, protocol/timeoutsAsyncScript\n * @type state\n *\n */\n\nimport isVisibleWithinViewportFunc from '../scripts/isWithinViewport'\n\nmodule.exports = function isVisibleWithinViewport (selector) {\n    return this.selectorExecute(selector, isVisibleWithinViewportFunc).then((res) => {\n        if (Array.isArray(res) && res.length === 1) {\n            return res[0]\n        }\n\n        return res\n    }, (err) => {\n        /**\n         * if element does not exist it is automatically not visible :-)\n         */\n        if (err.message.indexOf('NoSuchElement') > -1) {\n            return true\n        }\n\n        throw err\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/$.js":"/**\n * The `$` command is a short way to call the [`element`](/api/protocol/element.html) command in order\n * to fetch a single element on the page. It returns an object that with an extended prototype to call\n * action commands without passing in a selector. However if you still pass in a selector it will look\n * for that element first an call the action on that element.\n *\n * You can chain `$` or `$$` together in order to walk down the DOM tree.\n *\n * <example>\n    :index.html\n    <ul id=\"menu\">\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/\">Developer Guide</a></li>\n        <li><a href=\"/\">API</a></li>\n        <li><a href=\"/\">Contribute</a></li>\n    </ul>\n\n    :$.js\n    it('should get text a menu link', function () {\n        var text = $('#menu');\n\n        console.log(text.$$('li')[2].$('a').getText()); // outputs: \"API\"\n        // same as\n        console.log(text.$$('li')[2].getText('a'));\n    });\n * </example>\n *\n * @alias $\n * @param {String} selector  selector to fetch a certain element\n * @type utility\n *\n */\n\nlet $ = function (selector) {\n    return this.element(selector)\n}\n\nexport default $\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/$$.js":"/**\n * The `$$` command is a short way to call the [`elements`](/api/protocol/elements.html) command in order\n * to fetch multiple elements on the page. It returns an array with element results that will have an\n * extended prototype to call action commands without passing in a selector. However if you still pass\n * in a selector it will look for that element first and call the action on that element.\n *\n * You can chain `$` or `$$` together in order to walk down the DOM tree.\n *\n * <example>\n    :index.html\n    <ul id=\"menu\">\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/\">Developer Guide</a></li>\n        <li><a href=\"/\">API</a></li>\n        <li><a href=\"/\">Contribute</a></li>\n    </ul>\n\n    :$.js\n    it('should get text a menu link', function () {\n        var text = $('#menu');\n\n        console.log(text.$$('li')[2].$('a').getText()); // outputs: \"API\"\n        // same as\n        console.log(text.$$('li')[2].getText('a'));\n    });\n * </example>\n *\n * @alias $$\n * @param {String} selector  selector to fetch multiple elements\n * @type utility\n *\n */\n\nlet $$ = function (selector) {\n    return this.elements(selector).then((res) => res.value.map((el, i) => {\n        el.value = { ELEMENT: el.ELEMENT }\n        el.selector = selector\n        el.index = i\n        return el\n    }))\n}\n\nexport default $$\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/leftClick.js":"/**\n *\n * Apply left click on an element. If selector is not provided, click on the last\n * moved-to location.\n *\n * @alias browser.leftClick\n * @param {String} selector element to click on\n * @param {Number} xoffset  X offset to move to, relative to the top-left corner of the element.\n * @param {Number} yoffset  Y offset to move to, relative to the top-left corner of the element.\n * @uses protocol/element, protocol/buttonPress\n * @type action\n *\n */\n\nimport handleMouseButtonCommand from '../helpers/handleMouseButtonCommand'\n\nlet leftClick = function (selector, xoffset, yoffset) {\n    return handleMouseButtonCommand.call(this, selector, 'left', xoffset, yoffset)\n}\n\nexport default leftClick\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/middleClick.js":"/**\n *\n * Apply middle click on an element. If selector is not provided, click on the last\n * moved-to location.\n *\n * @alias browser.middleClick\n * @param {String} selector element to click on\n * @param {Number} xoffset  X offset to move to, relative to the top-left corner of the element.\n * @param {Number} yoffset  Y offset to move to, relative to the top-left corner of the element.\n * @uses protocol/element, protocol/buttonPress\n * @type action\n *\n */\n\nimport handleMouseButtonCommand from '../helpers/handleMouseButtonCommand'\n\nlet middleClick = function (selector, xoffset, yoffset) {\n    return handleMouseButtonCommand.call(this, selector, 'middle', xoffset, yoffset)\n}\n\nexport default middleClick\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/moveToObject.js":"/**\n *\n * Move the mouse by an offset of the specificed element. If an element is provided but no\n * offset, the mouse will be moved to the center of the element. If the element is not\n * visible, it will be scrolled into view.\n *\n * @alias browser.moveToObject\n * @param {String} selector element to move to\n * @param {Number} xoffset  X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.\n * @param {Number} yoffset  Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.\n * @uses protocol/element, protocol/elementIdLocation\n * @type action\n *\n */\n\nimport { RuntimeError } from '../utils/ErrorHandler'\n\nlet moveToObject = function (selector, xoffset, yoffset) {\n    /**\n     * check for offset params\n     */\n    var hasOffsetParams = true\n    if (typeof xoffset !== 'number' && typeof yoffset !== 'number') {\n        hasOffsetParams = false\n    }\n\n    if (this.isMobile) {\n        return this.element(selector).then((res) => {\n            /**\n             * check if element was found and throw error if not\n             */\n            if (!res.value) {\n                throw new RuntimeError(7)\n            }\n\n            return this.elementIdSize(res.value.ELEMENT).then((size) =>\n                this.elementIdLocation(res.value.ELEMENT).then((location) => {\n                    return { size, location }\n                })\n            )\n        }).then((res) => {\n            let x = res.location.value.x + (res.size.value.width / 2)\n            let y = res.location.value.y + (res.size.value.height / 2)\n\n            if (hasOffsetParams) {\n                x = res.location.value.x + xoffset\n                y = res.location.value.y + yoffset\n            }\n\n            return this.touchMove(x, y)\n        })\n    }\n\n    return this.element(selector).then((res) => {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new RuntimeError(7)\n        }\n\n        return this.moveTo(res.value.ELEMENT, xoffset, yoffset)\n    })\n}\n\nexport default moveToObject\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/newWindow.js":"/**\n *\n * Open new window in browser. This command is the equivalent function to `window.open()`. This command does not\n * work in mobile environments.\n *\n * __Note:__ When calling this command you automatically switch to the new window.\n *\n * <example>\n    :newWindowSync.js\n    it('should open a new tab', function () {\n        browser.url('http://google.com')\n        console.log(browser.getTitle()); // outputs: \"Google\"\n\n        browser.newWindow('http://webdriver.io', 'WebdriverIO window', 'width=420,height=230,resizable,scrollbars=yes,status=1')\n        console.log(browser.getTitle()); // outputs: \"WebdriverIO - Selenium 2.0 javascript bindings for nodejs\"\n\n        browser.close()\n        console.log(browser.getTitle()); // outputs: \"Google\"\n    });\n * </example>\n *\n * @alias browser.newWindow\n * @param {String} url            website URL to open\n * @param {String} windowName     name of the new window\n * @param {String} windowFeatures features of opened window (e.g. size, position, scrollbars, etc.)\n * @uses protocol/execute, window/getTabIds, window/switchTab\n * @type window\n *\n */\n\nimport newWindowHelper from '../scripts/newWindow'\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet newWindow = function (url, windowName = '', windowFeatures = '') {\n    /*!\n     * parameter check\n     */\n    if (typeof url !== 'string' || typeof windowName !== 'string' || typeof windowFeatures !== 'string') {\n        throw new CommandError('number or type of arguments don\\'t agree with newWindow command')\n    }\n\n    /*!\n     * mobile check\n     */\n    if (this.isMobile) {\n        throw new CommandError('newWindow command is not supported on mobile platforms')\n    }\n\n    return this.execute(newWindowHelper, url, windowName, windowFeatures).getTabIds().then(\n        (tabs) => this.switchTab(tabs[tabs.length - 1]))\n}\n\nexport default newWindow\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/pause.js":"/**\n *\n * Pauses execution for a specific amount of time. It is recommended to not use this command to wait for an\n * element to show up. In order to avoid flaky test results it is better to use commands like\n * [`waitforExist`](/api/utility/waitForExist.html) or other waitFor* commands.\n *\n * <example>\n    :pause.js\n    it('should pause the execution', function () {\n        var starttime = new Date().getTime();\n        browser.pause(3000);\n        var endtime = new Date().getTime();\n        console.log(endtime - starttime); // outputs: 3000\n    });\n * </example>\n *\n * @alias browser.pause\n * @param {Number} milliseconds time in ms\n * @type utility\n *\n */\n\nlet pause = function (milliseconds = 1000) {\n    return new Promise((resolve) => setTimeout(resolve, milliseconds))\n}\n\nexport default pause\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/release.js":"/**\n *\n * Release touch sequence on specific element.\n *\n * @alias browser.release\n * @param {String} selector element to release on\n * @uses property/getLocation, protocol/touchUp\n * @type mobile\n *\n */\n\nlet release = function (selector) {\n    return this.getLocation(selector).then(\n        (res) => this.touchUp(res.x, res.y))\n}\n\nexport default release\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/reload.js":"/**\n *\n * Creates a new Selenium session with your current capabilities. This is useful if you\n * test highly stateful application where you need to clean the browser session between\n * the tests in your spec file to avoid creating hundreds of single test files with WDIO.\n * Be careful though, this command affects your test time tremendously since spawning\n * new Selenium sessions is very time consuming especially when using cloud services.\n *\n * <example>\n    :reloadSync.js\n    it('should reload my session', function () {\n        console.log(browser.sessionId); // outputs: e042b3f3cd5a479da4e171825e96e655\n        browser.reload();\n        console.log(browser.sessionId); // outputs: 9a0d9bf9d4864160aa982c50cf18a573\n    })\n * </example>\n *\n * @alias browser.reload\n * @type utility\n *\n */\n\nlet reload = function () {\n    const oldSessionId = this.requestHandler.sessionID\n\n    return this.end().init().then((res) => {\n        const newSessionId = this.requestHandler.sessionID\n\n        if (!Array.isArray(this.options.onReload)) {\n            return Promise.resolve()\n        }\n\n        return Promise.all(this.options.onReload.map(\n            (hook) => hook(oldSessionId, newSessionId)\n        ))\n    }).catch((e) => {\n        console.log(`Error in onReload hook: \"${e.stack}\"`)\n    })\n}\n\nexport default reload\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/rightClick.js":"/**\n *\n * Apply right click on an element. If selector is not provided, click on the last\n * moved-to location.\n *\n * @alias browser.rightClick\n * @param {String} selector element to click on\n * @param {Number} xoffset  X offset to move to, relative to the top-left corner of the element.\n * @param {Number} yoffset  Y offset to move to, relative to the top-left corner of the element.\n * @uses protocol/element, protocol/buttonPress\n * @type action\n *\n */\n\nimport handleMouseButtonCommand from '../helpers/handleMouseButtonCommand'\n\nlet rightClick = function (selector, xoffset, yoffset) {\n    return handleMouseButtonCommand.call(this, selector, 'right', xoffset, yoffset)\n}\n\nexport default rightClick\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/saveScreenshot.js":"/**\n *\n * Save a screenshot as a base64 encoded PNG with the current state of the browser. Be aware that some Selenium driver\n * are taking screenshots of the whole document (e.g. phantomjs) and others only of the current viewport. If you want\n * to always be sure that the screenshot has the size of the whole document, use [wdio-screenshot](https://www.npmjs.com/package/wdio-screenshot)\n * to enhance this command with that functionality.\n *\n * <example>\n    :saveScreenshot.js\n    it('should save a screenshot of the browser view', function () {\n        // receive screenshot as Buffer\n        var screenshot = browser.saveScreenshot(); // returns base64 string buffer\n        fs.writeFileSync('./myShort.png', screenshot)\n\n        // save screenshot to file and receive as Buffer\n        screenshot = browser.saveScreenshot('./snapshot.png');\n\n        // save screenshot to file\n        browser.saveScreenshot('./snapshot.png');\n    });\n * </example>\n *\n * @alias browser.saveScreenshot\n * @param {Function|String=}   filename    path to the generated image (relative to the execution directory)\n * @uses protocol/screenshot\n * @type utility\n *\n */\n\nimport fs from 'fs'\n\nlet saveScreenshot = function (filename) {\n    return this.screenshot().then((res) => {\n        this.emit('screenshot', {data: res.value, filename})\n\n        let screenshot = new Buffer(res.value, 'base64')\n\n        if (typeof filename === 'string') {\n            fs.writeFileSync(filename, screenshot)\n        }\n\n        return screenshot\n    })\n}\n\nexport default saveScreenshot\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/scroll.js":"/**\n *\n * Scroll to a specific element. You can also append/pass two offset values as parameter\n * to scroll to a specific position.\n *\n * <example>\n    :scroll.js\n    it('should demonstrate the scroll command', function () {\n        var elem = $('#myElement');\n\n        // scroll to specific element\n        elem.scroll();\n\n        // scroll to specific element with offset\n        // scroll offset will be added to elements position\n        elem.scroll(100, 100);\n\n        // scroll to specific x and y position\n        browser.scroll(0, 250);\n    });\n * </example>\n *\n * @alias browser.scroll\n * @param {String=}  selector  element to scroll to\n * @param {Number=}   xoffset   x offset to scroll to\n * @param {Number=}   yoffset   y offset to scroll to\n * @uses protocol/element, protocol/elementIdLocation, protocol/touchScroll, protocol/execute\n * @type utility\n *\n */\n\nimport { RuntimeError } from '../utils/ErrorHandler'\nimport scrollHelper from '../scripts/scroll'\n\nlet scroll = function (selector, xoffset, yoffset) {\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if an offset is used\n     */\n    xoffset = typeof xoffset === 'number' ? xoffset : 0\n    yoffset = typeof yoffset === 'number' ? yoffset : 0\n\n    if (typeof selector === 'number' && typeof xoffset === 'number') {\n        yoffset = xoffset\n        xoffset = selector\n        selector = null\n    }\n\n    if (this.isMobile) {\n        var queue = Promise.resolve()\n\n        if (selector) {\n            queue = this.element(selector)\n        }\n\n        return queue.then((res) => {\n            /**\n             * check if element was found and throw error if not\n             */\n            if (res && !res.value) {\n                throw new RuntimeError(7)\n            }\n\n            if (typeof res !== 'undefined') {\n                selector = res.value.ELEMENT\n            }\n\n            return this.touchScroll(selector, xoffset, yoffset)\n        })\n    }\n\n    if (selector) {\n        return this.element(selector).then((res) => {\n            /**\n             * check if element was found and throw error if not\n             */\n            if (!res.value) {\n                throw new RuntimeError(7)\n            }\n\n            return this.elementIdLocation(res.value.ELEMENT)\n        }).then((location) =>\n            this.execute(scrollHelper, location.value.x + xoffset, location.value.y + yoffset)\n        )\n    }\n\n    return this.execute(scrollHelper, xoffset, yoffset)\n}\n\nexport default scroll\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/selectByAttribute.js":"/**\n *\n * Select option with a specific value.\n *\n * <example>\n    :example.html\n    <select id=\"selectbox\">\n        <option value=\"someValue0\">uno</option>\n        <option value=\"someValue1\">dos</option>\n        <option value=\"someValue2\">tres</option>\n        <option value=\"someValue3\">cuatro</option>\n        <option value=\"someValue4\">cinco</option>\n        <option name=\"someName5\" value=\"someValue5\">seis</option>\n    </select>\n\n    :selectByAttribute.js\n    it('should demonstrate the selectByAttribute command', function () {\n        var selectBox = $('#selectbox');\n\n        var value = selectBox.getValue();\n        console.log(value); // returns \"someValue0\"\n\n        selectBox.selectByAttribute('value', 'someValue3');\n        console.log(selectBox.getValue()); // returns \"someValue3\"\n\n        selectBox.selectByAttribute('name', 'someName5');\n        console.log(selectBox.getValue()); // returns \"someValue5\"\n    });\n * </example>\n *\n * @alias browser.selectByAttribute\n * @param {String} selector   select element that contains the options\n * @param {String} attribute  attribute of option element to get selected\n * @param {String} value      value of option element to get selected\n * @uses protocol/element, protocol/elementIdClick, protocol/elementIdElement\n * @type action\n *\n */\n\nimport { RuntimeError } from '../utils/ErrorHandler'\n\nlet selectByAttribute = function (selector, attribute, value) {\n    /**\n     * convert value into string\n     */\n    if (typeof value === 'number') {\n        value = value.toString()\n    }\n\n    /**\n     * get options element by xpath\n     */\n    return this.element(selector).then((res) => {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new RuntimeError(7)\n        }\n\n        /**\n         * find option elem using xpath\n         */\n        var normalized = `[normalize-space(@${attribute.trim()}) = \"${value.trim()}\"]`\n        return this.elementIdElement(res.value.ELEMENT, `./option${normalized}|./optgroup/option${normalized}`)\n    }).then((res) => {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new RuntimeError(7)\n        }\n\n        /**\n         * select option\n         */\n        return this.elementIdClick(res.value.ELEMENT)\n    })\n}\n\nexport default selectByAttribute\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/selectByIndex.js":"/**\n *\n * Select option with a specific index.\n *\n * <example>\n    :example.html\n    <select id=\"selectbox\">\n        <option value=\"someValue0\">uno</option>\n        <option value=\"someValue1\">dos</option>\n        <option value=\"someValue2\">tres</option>\n        <option value=\"someValue3\">cuatro</option>\n        <option value=\"someValue4\">cinco</option>\n        <option value=\"someValue5\">seis</option>\n    </select>\n\n    :selectByIndex.js\n    it('should demonstrate the selectByIndex command', function () {\n        var selectBox = $('#selectbox');\n        console.log(selectBox.getValue()); // returns \"someValue0\"\n\n        selectBox.selectByIndex(4);\n        console.log(selectBox.getValue()); // returns \"someValue4\"\n    });\n * </example>\n *\n * @alias browser.selectByIndex\n * @param {String} selector   select element that contains the options\n * @param {Number} index      option index\n * @uses protocol/element, protocol/elementIdElements, protocol/elementIdClick\n * @type action\n *\n */\n\nimport { CommandError, RuntimeError } from '../utils/ErrorHandler'\n\nlet selectByIndex = function (selector, index) {\n    /*!\n     * negative index check\n     */\n    if (index < 0) {\n        throw new CommandError('index needs to be 0 or any other positive number')\n    }\n\n    return this.element(selector).then((element) => {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!element.value) {\n            throw new RuntimeError(7)\n        }\n\n        return this.elementIdElements(element.value.ELEMENT, '<option>')\n    }).then((elements) => {\n        if (elements.value.length === 0) {\n            throw new CommandError(`select element (${selector}) doesn't contain any option element`)\n        }\n        if (elements.value.length - 1 < index) {\n            throw new CommandError(`option with index \"${index}\" not found. Select element (${selector}) only contains ${elements.value.length} option elements`)\n        }\n\n        return this.elementIdClick(elements.value[index].ELEMENT)\n    })\n}\n\nexport default selectByIndex\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/selectByValue.js":"/**\n *\n * Select option with a specific value.\n *\n * <example>\n    :example.html\n    <select id=\"selectbox\">\n        <option value=\"someValue0\">uno</option>\n        <option value=\"someValue1\">dos</option>\n        <option value=\"someValue2\">tres</option>\n        <option value=\"someValue3\">cuatro</option>\n        <option value=\"someValue4\">cinco</option>\n        <option value=\"someValue5\">seis</option>\n    </select>\n\n    :selectByValue.js\n    it('should demonstrate the selectByValue command', function () {\n        var selectBox = $('#selectbox');\n        console.log(selectBox.getValue()); // returns \"someValue0\"\n\n        selectBox.selectByValue('someValue3');\n        console.log(selectBox.getValue()); // returns \"someValue3\"\n    });\n * </example>\n *\n * @alias browser.selectByValue\n * @param {String} selector   select element that contains the options\n * @param {String} value      value of option element to get selected\n * @uses protocol/element, protocol/elementIdClick, protocol/elementIdElement\n * @type action\n *\n */\n\nlet selectByValue = function (selector, value) {\n    return this.selectByAttribute(selector, 'value', value)\n}\n\nexport default selectByValue\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/selectByVisibleText.js":"/**\n *\n * Select option that display text matching the argument.\n *\n * <example>\n    :example.html\n    <select id=\"selectbox\">\n        <option value=\"someValue0\">uno</option>\n        <option value=\"someValue1\">dos</option>\n        <option value=\"someValue2\">tres</option>\n        <option value=\"someValue3\">cuatro</option>\n        <option value=\"someValue4\">cinco</option>\n        <option value=\"someValue5\">seis</option>\n    </select>\n\n    :selectByVisibleText.js\n    it('demonstrate the selectByVisibleText command', function () {\n        var selectBox = $('#selectbox');\n        console.log(selectBox.getText('option:checked')); // returns \"uno\"\n\n        selectBox.selectByVisibleText('cuatro');\n        console.log(selectBox.getText('option:checked')); // returns \"cuatro\"\n    })\n * </example>\n *\n * @alias browser.selectByVisibleText\n * @param {String} selector   select element that contains the options\n * @param {String} text       text of option element to get selected\n * @uses protocol/element, protocol/elementIdClick, protocol/elementIdElement\n * @type action\n *\n */\n\nimport { RuntimeError } from '../utils/ErrorHandler'\n\nlet selectByVisibleText = function (selector, text) {\n    /**\n     * get select element\n     */\n    return this.element(selector).then((res) => {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new RuntimeError(7)\n        }\n\n        /**\n         * find option elem using xpath\n         */\n        let formatted = `\"${text.trim()}\"`\n\n        if (/\"/.test(text)) {\n            formatted = 'concat(\"' + text.trim().split('\"').join('\", \\'\"\\', \"') + '\")' // escape quotes\n        }\n\n        var normalized = `[normalize-space(.) = ${formatted}]`\n        return this.elementIdElement(res.value.ELEMENT, `./option${normalized}|./optgroup/option${normalized}`)\n    }).then((res) => {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new RuntimeError(7)\n        }\n\n        /**\n         * select option\n         */\n        return this.elementIdClick(res.value.ELEMENT)\n    })\n}\n\nexport default selectByVisibleText\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/selectorExecuteAsync.js":"/**\n * Works just like execute, only you can use Selenium selector strategies to pass html elements to\n * the asynchronous function you wish to execute in the browser.\n *\n * The asynchronous function fn will receive every resolved selector as an array of html elements,\n * even if there is only one result, or no result.\n * These arrays are the first arguments the function fn receives.\n * If you pass an array of selectors, the resulting html element arrays are returned in the same order.\n *\n * All arguments you append after function fn are added as the arguments after the html arrays.\n * You can use any JSON value or a function as such an argument.\n *\n * <example>\n    :selectorExecuteAsync.js\n    it('should be able to inject JavaScript into the page that can be execute asynchronously', function () {\n        var divCount = browser.selectorExecuteAsync(\"//div\", function(divs, message, callback) {\n            callback(divs.length + message);\n        }, \" divs on the page\")\n        console.log(divCount); // returns, for example, \"68 divs on the page\"\n\n        var divLinkCount = browser.selectorExecuteAsync([\"//div\", \"=Read Post\"], function(divs, links, callback) {\n            var message = 'There are ';\n\n            message += divs.length + ' divs on the page';\n            message += ' and ';\n            message += links.length + ' links with an link text \"' + links[0].text + '\"';\n\n            callback(message);\n        })\n        console.log(divLinkCount); // returns, for example, \"There are 68 divs on the page and 42 links with an link text 'Read Post'\"\n    });\n * </example>\n *\n * @alias browser.selectorExecuteAsync\n * @param {String|Array.<String>} selectors                  single selector or array of selectors\n * @param {Function}              script                     asynchronous function to get executed in the browser\n * @param {...*}                  [argument1,...,argumentN]  arguments added to fn. Can be any JSON value or function\n * @uses protocol/execute\n * @type action\n */\n\nimport ensureClientSideSelectorSupport from '../helpers/ensureClientSideSelectorSupport'\nimport createSelectorScript from '../scripts/createSelectorScript'\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet selectorExecuteAsync = function (selector, script, ...args) {\n    /**\n     * if selectorExecuteAsync gets executed with element as first citizen like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.selectorExecuteAsync(function () {...}, some, args);\n     * ```\n     */\n    if (typeof selector === 'function' && this.lastResult && typeof this.lastResult.selector === 'string') {\n        args.unshift(script)\n        script = selector\n        selector = [this.lastResult.selector]\n\n    /**\n     * if selectorExecuteAsync gets executed by getHTML\n     */\n    } else if (selector === null) {\n        selector = [this.lastResult.selector]\n    }\n\n    if (typeof selector === 'string') {\n        selector = [selector]\n    }\n    if (!Array.isArray(selector)) {\n        throw new CommandError('Argument \\'selector\\' must be string or array of strings.')\n    }\n    if (!/string|function/.test(typeof script)) {\n        throw new CommandError('Argument \\'script\\' must be a function or string.')\n    }\n\n    let fullScript = createSelectorScript.call(this, script, selector, args)\n    return ensureClientSideSelectorSupport.call(this).executeAsync(fullScript).then((res) => {\n        var result = res && res.value\n\n        if (result && result.message === 'NoSuchElement') {\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        return result\n    })\n}\n\nexport default selectorExecuteAsync\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/selectorExecute.js":"/**\n * Works just like execute, only you can use selectors to pass html elements to\n * the function you wish to execute in the browser.\n *\n * The function fn will receive every resolved selector as an array of html elements,\n * even if there is only one result, or no result.\n * These arrays are the first arguments the function fn receives.\n * If you pass an array of selectors, the resulting html element arrays are returned in the same order.\n *\n * All arguments you append after function fn are added as the arguments after the html arrays.\n * You can use any JSON value or a function as such an argument.\n *\n * <example>\n    :selectorExecute.js\n    it('it inject JavaScript to the page', function () {\n        var divCount = browser.selectorExecute(\"//div\", function(divs, message) {\n            return divs.length + message;\n        }, \" divs on the page\");\n        console.log(divCount); // returns, for example, \"68 divs on the page\"\n\n        var divLinkCount = browser.selectorExecute([\"//div\", \"=Read Post\"], function(divs, links) {\n            var message = 'There are ';\n\n            message += divs.length + ' divs on the page';\n            message += ' and ';\n            message += links.length + ' links with an link text \"' + links[0].text + '\"';\n\n            return message;\n        });\n        console.log(divLinkCount); // returns, for example, \"There are 68 divs on the page and 42 links with an link text 'Read Post'\"\n    });\n * </example>\n *\n * @alias browser.selectorExecute\n * @param {String|Array.<String>} selectors                  single selector or array of selectors\n * @param {Function}              script                     function to get executed in the browser\n * @param {...*}                  [argument1,...,argumentN]  arguments added to fn. Can be any JSON value or function\n * @uses protocol/execute\n * @type action\n */\n\nimport ensureClientSideSelectorSupport from '../helpers/ensureClientSideSelectorSupport'\nimport createSelectorScript from '../scripts/createSelectorScript'\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet selectorExecute = function (selector, script, ...args) {\n    /**\n     * if selectorExecute gets executed with element as first citizen like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.selectorExecute(function () {...}, some, args);\n     * ```\n     */\n    if (typeof selector === 'function' && this.lastResult && typeof this.lastResult.selector === 'string') {\n        args.unshift(script)\n        script = selector\n        selector = [this.lastResult.selector]\n\n    /**\n     * if selectorExecute gets executed by getHTML\n     */\n    } else if (selector === null) {\n        selector = [this.lastResult.selector]\n    }\n\n    if (typeof selector === 'string') {\n        selector = [selector]\n    }\n\n    if (!Array.isArray(selector)) {\n        throw new CommandError('Argument \\'selector\\' must be string or array of strings.')\n    }\n    if (!/string|function/.test(typeof script)) {\n        throw new CommandError('Argument \\'script\\' must be a function or string.')\n    }\n\n    let fullScript = createSelectorScript.call(this, script, selector, args)\n    return ensureClientSideSelectorSupport.call(this).execute(fullScript).then((res) => {\n        var result = res && res.value\n\n        if (result && result.message === 'NoSuchElement') {\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        return result\n    })\n}\n\nexport default selectorExecute\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/setCookie.js":"/**\n *\n * Sets a [cookie](https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#cookie-json-object)\n * for current page. Make sure you are on the page that should receive the cookie. You can't set\n * a cookie for an arbitrary page without being on that page.\n *\n * <example>\n    :setCookie.js\n    it('should set a cookie for the page', function () {\n        browser.url('/')\n        browser.setCookie({name: 'test', value: '123'});\n\n        var cookies = browser.getCookie();\n        console.log(cookies); // outputs: [{ name: 'test', value: '123' }]\n    });\n * </example>\n *\n * @alias browser.setCookie\n * @param {Object} cookie cookie object\n * @uses protocol/cookie\n * @type cookie\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet setCookie = function (cookieObj) {\n    /*!\n     * parameter check\n     */\n    if (typeof cookieObj !== 'object') {\n        throw new CommandError('Please specify a cookie object to set (see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#cookie-json-object for documentation.')\n    }\n\n    return this.cookie('POST', cookieObj)\n}\n\nexport default setCookie\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/setGeoLocation.js":"/**\n *\n * Set the current geo location.\n *\n * @alias browser.setGeoLocation\n * @param {Object} location the new location (`{latitude: number, longitude: number, altitude: number}`)\n * @uses protocol/location\n * @type mobile\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet setGeoLocation = function (location) {\n    /*!\n     * parameter check\n     */\n    if (typeof location !== 'object' ||\n        location.latitude === undefined ||\n        location.longitude === undefined ||\n        location.altitude === undefined) {\n        throw new CommandError('location object need to have a latitude, longitude and altitude attribute')\n    }\n\n    return this.location(location)\n}\n\nexport default setGeoLocation\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/setOrientation.js":"/**\n *\n * Set a device orientation.\n *\n * <example>\n    :setOrientation.js\n    it('should set a geo location for the device', function () {\n        browser.setOrientation('landscape');\n\n        var orientation = browser.getOrientation();\n        console.log(orientation); // outputs: \"landscape\"\n    });\n * </example>\n *\n * @alias browser.setOrientation\n * @param {String} orientation the new browser orientation (`landscape/portrait`)\n * @uses protocol/orientation\n * @type mobile\n * @for android, ios\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet setOrientation = function (orientation) {\n    /*!\n     * parameter check\n     */\n    if (typeof orientation !== 'string') {\n        throw new CommandError('number or type of arguments don\\'t agree with setOrientation command')\n    }\n\n    return this.orientation(orientation.toUpperCase())\n}\n\nexport default setOrientation\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/setValue.js":"/**\n *\n * Send a sequence of key strokes to an element (clears value before). You can also use\n * unicode characters like Left arrow or Back space. WebdriverIO will take care of\n * translating them into unicode characters. You’ll find all supported characters\n * [here](https://w3c.github.io/webdriver/webdriver-spec.html#dfn-character-types).\n * To do that, the value has to correspond to a key from the table.\n *\n * <example>\n    :setValue.js\n    it('should set value for a certain element', function () {\n        var input = $('.input');\n        input.setValue('test123');\n\n        // same as\n        browser.setValue('.input', 'test123');\n\n        console.log(input.getValue()); // outputs: 'test123'\n    });\n * </example>\n *\n * @alias browser.setValue\n * @param {String}              selector   Input element\n * @param {String|Number|Array} values     Input element\n * @uses protocol/elements, protocol/elementIdClear, protocol/elementIdValue\n * @type action\n *\n */\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet setValue = function (selector, value) {\n    /*!\n     * parameter check\n     */\n    if (typeof value === 'number') {\n        value = value.toString()\n    }\n\n    if (typeof value !== 'string' && !Array.isArray(value)) {\n        throw new CommandError('number or type of arguments don\\'t agree with setValue command')\n    }\n\n    return this.elements(selector).then((res) => {\n        /**\n         * throw NoSuchElement error if no element was found\n         */\n        if (!res.value || res.value.length === 0) {\n            throw new CommandError(7, selector || this.lastResult.selector)\n        }\n\n        let elementIdValueCommands = []\n        for (let elem of res.value) {\n            elementIdValueCommands.push(this.elementIdClear(elem.ELEMENT).elementIdValue(elem.ELEMENT, value))\n        }\n\n        return this.unify(elementIdValueCommands)\n    })\n}\n\nexport default setValue\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/setViewportSize.js":"/**\n *\n * This command changes the viewport size of the browser. When talking about browser size we have to differentiate\n * between the actual window size of the browser application and the document/viewport size of the website. The\n * window size will always be bigger since it includes the height of any menu or status bars.\n *\n * The command tries to resize the browser multiple times (max 5 times) because Webdriver only allows to change\n * the window size and doesn't take the viewport into consideration. This is handled by WebdriverIO internally.\n *\n * <example>\n    :setViewportSize.js\n    it('should resize the current viewport', function () {\n        browser.setViewportSize({\n            width: 500,\n            height: 500\n        });\n\n        var windowSize = browser.windowHandleSize();\n        console.log(windowSize.value); // outputs: { width: 500, height: 602 }\n    });\n * </example>\n *\n * @alias browser.setViewportSize\n * @param {Object}   size  window width/height\n * @param {Boolean}  type  set to `false` to change window size, `true` (default) to change viewport size\n * @uses protocol/execute, protocol/windowHandleSize\n * @type window\n *\n */\n\nimport getViewportSize from '../scripts/getViewportSize'\nimport { CommandError } from '../utils/ErrorHandler'\n\nconst MAX_TRIES = 5\n\nlet setViewportSize = function (size, type) {\n    /**\n     * parameter check\n     */\n    if (typeof size !== 'object' ||\n        typeof size.width !== 'number' ||\n        typeof size.height !== 'number' ||\n        (typeof type !== 'undefined' && typeof type !== 'boolean')) {\n        throw new CommandError('number or type of arguments don\\'t agree with setViewportSize command')\n    }\n\n    let shouldIndent = (typeof type === 'undefined') ? true : type\n    return shouldIndent ? _setViewportSize.call(this, size) : this.windowHandleSize(size)\n}\n\n/**\n * to set viewport size properly we need to execute the process multiple times\n * since the difference between the inner and outer size changes when browser\n * switch between fullscreen modes or visibility of scrollbar\n */\nlet _setViewportSize = function (size, retryNo = 0) {\n    /**\n     * get window size\n     */\n    return this.windowHandleSize().then((windowHandleSize) => {\n        /**\n         * get viewport size\n         */\n        return this.execute(getViewportSize).then((viewportSize) => {\n            let widthDiff = windowHandleSize.value.width - viewportSize.value.screenWidth\n            let heightDiff = windowHandleSize.value.height - viewportSize.value.screenHeight\n\n            /**\n             * change window size with indent\n             */\n            return this.windowHandleSize({\n                width: size.width + widthDiff,\n                height: size.height + heightDiff\n            })\n        }).execute(getViewportSize).then((res) => {\n            /**\n             * if viewport size not equals desired size, execute process again\n             */\n            if (retryNo < MAX_TRIES && (res.value.screenWidth !== size.width || res.value.screenHeight !== size.height)) {\n                return _setViewportSize.call(this, size, ++retryNo)\n            }\n        })\n    })\n}\n\nexport default setViewportSize\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/submitForm.js":"/**\n *\n * Submits a form found by given selector. The submit command may also be applied\n * to any element that is a descendant of a `<form>` element.\n *\n * <example>\n    :index.html\n    <form action=\"/form.php\" method=\"post\" id=\"loginForm\">\n        <label for=\"username\">User:</label>\n        <input type=\"text\" name=\"username\" id=\"username\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" name=\"password\" id=\"password\">\n        <input type=\"submit\" value=\"Login\">\n    </form>\n\n    :submitForm.js\n    it('should submit login form', function () {\n        browser.setValue('#username', 'foobar');\n        browser.setValue('#password', 'test123');\n        browser.submitForm('#loginForm');\n    });\n * </example>\n *\n * @alias browser.submitForm\n * @param {String} selector form element\n * @uses protocol/element, protocol/submit\n * @type action\n *\n */\n\nimport { RuntimeError } from '../utils/ErrorHandler'\n\nlet submitForm = function (selector) {\n    return this.element(selector).then((res) => {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new RuntimeError(7)\n        }\n\n        return this.submit(res.value.ELEMENT)\n    })\n}\n\nexport default submitForm\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/swipeDown.js":"/**\n *\n * Perform a swipe down on an element.\n *\n * @alias browser.swipeDown\n * @param {String} selector  element to swipe on\n * @param {Number} speed     number of pixels go per second\n * @uses mobile/swipe\n * @type mobile\n *\n */\n\nlet swipeDown = function (selector, yOffset, speed) {\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used\n     */\n    yOffset = typeof yOffset === 'number' ? yOffset : 100\n    speed = typeof speed === 'number' ? speed : 100\n\n    /**\n     * make sure yoffset is positive so we scroll up\n     */\n    yOffset = yOffset < 0 ? yOffset * -1 : yOffset\n\n    return this.pause(100).swipe(selector, 0, yOffset, speed)\n}\n\nexport default swipeDown\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/swipe.js":"/**\n *\n * Perform a swipe on the screen or an element. If you want to swipe on a specific\n * element make sure you provide a selector argument. If not just pass `xoffset`\n * and `yoffset` as command arguments.\n *\n * Start at a particular screen location.\n *\n * @alias browser.swipe\n * @param {String=} selector   element to swipe on\n * @param {Number=} xoffset    x offset of swipe gesture (in pixels or relative units)\n * @param {Number=} yoffset    y offset of swipe gesture (in pixels or relative units)\n * @param {Number=} speed      time (in seconds) to spend performing the swipe\n * @uses protocol/element, protocol/touchFlick\n * @type mobile\n *\n */\n\nimport { RuntimeError } from '../utils/ErrorHandler'\n\nlet swipe = function (selector, xoffset, yoffset, speed) {\n    if (arguments.length === 2 && typeof selector === 'number' && typeof xoffset === 'number') {\n        /*!\n         * you don't care where the swipe starts on the screen\n         */\n        let xspeed = selector\n        let yspeed = xoffset\n\n        return this.touchFlick(xspeed, yspeed)\n    }\n\n    /*!\n     * command starts at a particular screen location\n     */\n    return this.element(selector).then((res) => {\n        /**\n         * check if element was found and throw error if not\n         */\n        if (!res.value) {\n            throw new RuntimeError(7)\n        }\n\n        return this.touchFlick(res.value.ELEMENT.toString(), xoffset, yoffset, speed)\n    })\n}\n\nexport default swipe\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/swipeLeft.js":"/**\n *\n * Perform a swipe left on an element.\n *\n * @alias browser.swipeLeft\n * @param {String} selector  element to swipe on\n * @param {Number} speed     time (in seconds) to spend performing the swipe\n * @uses mobile/flick\n * @type mobile\n *\n */\n\nlet swipeLeft = function (selector, xOffset, speed) {\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used\n     */\n    xOffset = typeof xOffset === 'number' ? xOffset : 100\n    speed = typeof speed === 'number' ? speed : 100\n\n    /**\n     * make sure xoffset is positive so we scroll right\n     */\n    xOffset = xOffset > 0 ? xOffset * -1 : xOffset\n\n    return this.pause(100).swipe(selector, xOffset, 0, speed)\n}\n\nexport default swipeLeft\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/swipeRight.js":"/**\n *\n * Perform a swipe right on an element.\n *\n * @alias browser.swipeRight\n * @param {String} selector  element to swipe on\n * @param {Number} speed     time (in seconds) to spend performing the swipe\n * @uses mobile/swipe\n * @type mobile\n *\n */\n\nlet swipeRight = function (selector, xOffset, speed) {\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used\n     */\n    xOffset = typeof xOffset === 'number' ? xOffset : -100\n    speed = typeof speed === 'number' ? speed : 100\n\n    /**\n     * make sure xoffset is negative so we scroll left\n     */\n    xOffset = xOffset < 0 ? xOffset * -1 : xOffset\n\n    return this.pause(100).swipe(selector, xOffset, 0, speed)\n}\n\nexport default swipeRight\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/swipeUp.js":"/**\n *\n * Perform a swipe up on an element.\n *\n * @alias browser.swipeUp\n * @param {String} selector  element to swipe on\n * @param {Number} speed     time (in seconds) to spend performing the swipe\n * @uses mobile/swipe\n * @type mobile\n *\n */\n\nlet swipeUp = function (selector, yOffset, speed) {\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used\n     */\n    yOffset = typeof yOffset === 'number' ? yOffset : -100\n    speed = typeof speed === 'number' ? speed : 100\n\n    /**\n     * make sure yoffset is negative so we scroll down\n     */\n    yOffset = yOffset > 0 ? yOffset * -1 : yOffset\n\n    return this.pause(100).swipe(selector, 0, yOffset, speed)\n}\n\nexport default swipeUp\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/switchTab.js":"/**\n *\n * Switch focus to a particular tab / window handle.\n *\n * @alias browser.switchTab\n * @param {String=} windowHandle window handle URL to focus on (if no handle was specified the command switches to the first available one)\n * @uses protocol/window, window/getTabIds, window/switchTab\n * @type window\n *\n */\n\nlet switchTab = function (windowHandle) {\n    /*!\n     * parameter check\n     */\n    if (typeof windowHandle !== 'string') {\n        windowHandle = null\n    }\n\n    if (windowHandle) {\n        return this.window(windowHandle)\n    }\n\n    return this.windowHandles().then((tabIds) => {\n        if (tabIds && tabIds.value && tabIds.value.length) {\n            return this.switchTab(tabIds.value[0])\n        }\n    })\n}\n\nexport default switchTab\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/touchAction.js":"/**\n *\n * The Touch Action API provides the basis of all gestures that can be automated in Appium.\n * At its core is the ability to chain together _ad hoc_ individual actions, which will then be\n * applied to an element in the application on the device. The basic actions that can be used are:\n *\n * - press (pass selector or (x,y) or both)\n * - longPress (pass selector or (x,y) or both)\n * - tap (pass selector or (x,y) or both)\n * - moveTo (pass selector or (x,y) or both)\n * - wait (pass ms (as milliseconds))\n * - release (no arguments)\n *\n * If you use the touchAction command with a selector you don't need to pass the selector to each\n * action. It will be propagated by the internally (if no x or y parameters are given).\n *\n * <example>\n    :touchAction.js\n    it('should do a touch gesture', function () {\n        var screen = $('//UITextbox');\n\n        // simple touch action on element\n        screen.touchAction('tap');\n        // same as\n        browser.touchAction('//UITextbox', 'tap')\n\n        // simple touch action using x y variables\n        browser.touchAction({\n            actions: 'tap', x: 300, y:200\n        })\n\n        // simple touch action using selector and x y variables\n        // tap location is 30px right and 20px down relative from the center of the element\n        browser.touchAction({\n            actions: 'tap', x: 30, y:20, selector: '//UIAApplication[1]/UIAElement[2]'\n        })\n\n        // multi action on an element (drag&drop)\n        screen.touchAction([\n            'press',\n            { action: 'moveTo', x: 200, y: 0 },\n            'release'\n        ])\n        // same as\n        browser.touchAction('//UITextbox', [\n            'press',\n            { action: 'moveTo', x: 200, y: 0},\n            'release'\n        ])\n\n        // drag&drop to element\n        screen.touchAction([\n            'press',\n            { action: 'moveTo', selector: '//UIAApplication[1]/UIAElement[2]' },\n            'release'\n        ]))\n    });\n\n    :multiTouchAction.js\n    it('should do a multitouch gesture', function () {\n        // drag&drop with two fingers 200px down\n        browser.touchAction([\n            [{action: 'press', x:  10, y: 10}, { action: 'moveTo', x: 0, y: 200 }, 'release'],\n            [{action: 'press', x: 100, y: 10}, { action: 'moveTo', x: 0, y: 200 }, 'release']]\n        ])\n    })\n * </example>\n *\n * @param {String} selector  selector to execute the touchAction on\n * @param {String} action    action to execute\n *\n * @see https://saucelabs.com/blog/appium-sauce-labs-bootcamp-chapter-2-touch-actions\n * @type mobile\n * @for android, ios\n * @uses mobile/performTouchAction, mobile/performMultiAction\n *\n */\n\nconst TOUCH_ACTIONS = ['press', 'longPress', 'tap', 'moveTo', 'wait', 'release']\nconst POS_ACTIONS = TOUCH_ACTIONS.slice(0, -2)\nconst ACCEPTED_OPTIONS = ['x', 'y', 'selector', 'element']\n\nexport default function touchAction (selector, actions) {\n    if (typeof selector !== 'string' || TOUCH_ACTIONS.indexOf(selector) > -1) {\n        actions = selector\n        selector = this.lastResult\n    }\n\n    if (!Array.isArray(actions)) {\n        actions = [actions]\n    }\n\n    /**\n     * check if multiAction\n     */\n    if (Array.isArray(actions[0])) {\n        actions = formatArgs(selector, actions)\n        return Promise.all(getSelectors.call(this, actions, true)).then((jsonElements) => {\n            actions = replaceSelectorsById(actions, jsonElements)\n            return this.performMultiAction({ actions })\n        })\n    }\n\n    actions = formatArgs(selector, actions)\n    return Promise.all(getSelectors.call(this, actions)).then((jsonElements) => {\n        actions = replaceSelectorsById(actions, jsonElements)\n        return this.performTouchAction({ actions })\n    })\n}\n\n/**\n * helper to determine if action has proper option arguments\n * ('press', 'longPress', 'tap', 'moveTo' need at least some kind of position information)\n * @param  {String}  action  name of action\n * @param  {Object}  options action options\n * @return {Boolean}         True if don't need any options or has a position option\n */\nlet hasValidActionOptions = function (action, options) {\n    return POS_ACTIONS.indexOf(action) < 0 || (POS_ACTIONS.indexOf(action) > -1 && Object.keys(options).length > 0)\n}\n\nlet formatArgs = function (selector, actions) {\n    return actions.map((action) => {\n        if (Array.isArray(action)) {\n            return formatArgs(selector, action)\n        }\n\n        const formattedAction = { action: action.action, options: {} }\n\n        /**\n         * propagate selector or element to options object\n         */\n        if (\n            selector &&\n            // selector is given as string `e.g. browser.touchAction(selector, 'tap')`\n            typeof selector === 'string' &&\n            // don't propagate for actions that don't require element options\n            POS_ACTIONS.indexOf(typeof action === 'string' ? action : formattedAction.action) > -1 &&\n            // don't propagate if user has x and y set\n            !(isFinite(action.x) && isFinite(action.y))\n        ) {\n            formattedAction.options.selector = selector\n        } else if (\n            selector &&\n            // selector is given by previous command\n            // e.g. $(selector).touchAction('tap')\n            selector.value &&\n            // don't propagate for actions that don't require element options\n            POS_ACTIONS.indexOf(typeof action === 'string' ? action : formattedAction.action) > -1 &&\n            // don't propagate if user has x and y set\n            !(isFinite(action.x) && isFinite(action.y))\n        ) {\n            formattedAction.options.element = selector.value.ELEMENT\n        }\n\n        if (typeof action === 'string') {\n            if (!hasValidActionOptions(action, formattedAction.options)) {\n                throw new Error(\n                    `Touch action \"${action}\" doesn't have proper options. Make sure certain actions like ` +\n                    `${POS_ACTIONS.join(', ')} have position options like \"selector\", \"x\" or \"y\".`\n                )\n            }\n\n            formattedAction.action = action\n\n            /**\n             * remove options property if empyt\n             */\n            if (Object.keys(formattedAction.options).length === 0) {\n                delete formattedAction.options\n            }\n\n            return formattedAction\n        }\n\n        if (isFinite(action.x)) formattedAction.options.x = action.x\n        if (isFinite(action.y)) formattedAction.options.y = action.y\n        if (action.ms) formattedAction.options.ms = action.ms\n\n        if (action.selector && POS_ACTIONS.indexOf(formattedAction.action) > -1) {\n            formattedAction.options.selector = action.selector\n        }\n\n        if (action.element) {\n            formattedAction.options.element = action.element\n            delete formattedAction.options.selector\n        }\n\n        /**\n         * remove options property if empyt\n         */\n        if (Object.keys(formattedAction.options).length === 0) {\n            delete formattedAction.options\n        }\n\n        /**\n         * option check\n         * make sure action has proper options before sending command to Appium\n         */\n        if (formattedAction.action === 'release' && formattedAction.options) {\n            throw new Error(\n                'action \"release\" doesn\\'t accept any options ' +\n                `(\"${Object.keys(formattedAction.options).join('\", \"')}\" found)`\n            )\n        } else if (\n            formattedAction.action === 'wait' &&\n            (Object.keys(formattedAction.options).indexOf('x') > -1 || Object.keys(formattedAction.options).indexOf('y') > -1)\n        ) {\n            throw new Error('action \"wait\" doesn\\'t accept x, y options')\n        } else if (POS_ACTIONS.indexOf(formattedAction.action) > -1) {\n            for (const option in formattedAction.options) {\n                if (ACCEPTED_OPTIONS.indexOf(option) === -1) {\n                    throw new Error(`action \"${formattedAction.action}\" doesn't accept \"${option}\" as option`)\n                }\n            }\n\n            if (Object.keys(formattedAction.options || {}).length === 0) {\n                throw new Error(\n                    `Touch actions like \"${formattedAction.action}\" need at least some kind of ` +\n                    'position information like \"selector\", \"x\" or \"y\" options, you\\'ve none given.'\n                )\n            }\n        }\n\n        return formattedAction\n    })\n}\n\nlet getSelectors = function (actions, isMultiAction = false) {\n    let queriedSelectors = []\n\n    /**\n     * flatten actions array\n     */\n    if (isMultiAction) {\n        actions = [].concat.apply([], actions)\n    }\n\n    return actions\n        /**\n         * map down to list of selectors\n         */\n        .map((action) => action.options && action.options.selector)\n        /**\n         * filter actions without selector and unique selectors\n         */\n        .filter((selector) => {\n            const res = Boolean(selector) && queriedSelectors.indexOf(selector) === -1\n            queriedSelectors.push(selector)\n            return res\n        })\n        /**\n         * call element command on selectors\n         */\n        .map((selector) => this.element(selector))\n}\n\n/**\n * replaces selector action properties with element ids after they got fetched\n * @param  {Object[]} actions  list of actions\n * @param  {Object[]} elements list of fetched elements\n * @return {Object[]}          list of actions with proper element ids\n */\nlet replaceSelectorsById = function (actions, elements) {\n    return actions.map((action) => {\n        if (Array.isArray(action)) {\n            return replaceSelectorsById(action, elements)\n        }\n\n        if (!action.options || !action.options.selector) {\n            return action\n        }\n\n        elements.forEach((element) => {\n            if (action.options.selector === element.selector) {\n                action.options.element = element.value.ELEMENT\n                delete action.options.selector\n            }\n        })\n\n        return action\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/touch.js":"/**\n * Put finger on an element (only in mobile context).\n *\n * @alias browser.touch\n * @param {String}  selector  element to put finger on\n * @param {Boolean} longClick if true touch click will be long (default: false)\n * @uses property/getLocation, protocol/touchClick\n * @type mobile\n * @uses android\n *\n */\n\nlet touch = function (selector, longClick) {\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used\n     */\n    longClick = typeof longClick === 'boolean' ? longClick : false\n\n    const touchCommand = longClick ? 'touchLongClick' : 'touchClick'\n\n    return this.getLocation(selector).then((val) =>\n        this[touchCommand](val.x, val.y))\n}\n\nexport default touch\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/uploadFile.js":"/**\n *\n * Uploads a file to the selenium server by using the [`file`](/api/protocol/file.html) command. Note that\n * this command might not be supported as it is an undocumented Selenium command.\n *\n * @alias browser.uploadFile\n * @param {String} localPath local path to file\n * @type utility\n * @uses protocol/file\n *\n */\n\nimport fs from 'fs'\nimport path from 'path'\nimport archiver from 'archiver'\n\nimport { CommandError } from '../utils/ErrorHandler'\n\nlet uploadFile = function (localPath) {\n    /*!\n     * parameter check\n     */\n    if (typeof localPath !== 'string') {\n        throw new CommandError('number or type of arguments don\\'t agree with uploadFile command')\n    }\n\n    let zipData = []\n    let source = fs.createReadStream(localPath)\n\n    return new Promise((resolve, reject) => {\n        archiver('zip')\n            .on('error', (e) => { throw new Error(e) })\n            .on('data', (data) => zipData.push(data))\n            .on('end', () => this.file(Buffer.concat(zipData).toString('base64')).then(resolve, reject))\n            .append(source, { name: path.basename(localPath) })\n            .finalize((err) => {\n                /* istanbul ignore next */\n                if (err) {\n                    reject(err)\n                }\n            })\n    })\n}\n\nexport default uploadFile\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/waitForEnabled.js":"/**\n *\n * Wait for an element (selected by css selector) for the provided amount of\n * milliseconds to be (dis/en)abled. If multiple elements get queryied by given\n * selector, it returns true (or false if reverse flag is set) if at least one\n * element is (dis/en)abled.\n *\n * <example>\n    :index.html\n    <input type=\"text\" id=\"username\" value=\"foobar\" disabled=\"disabled\"></input>\n    <script type=\"text/javascript\">\n        setTimeout(function () {\n            document.getElementById('username').disabled = false\n        }, 2000);\n    </script>\n\n    :waitForEnabledExample.js\n    it('should detect when element is enabled', function () {\n        browser.waitForEnabled('#username', 3000);\n\n        // same as\n        elem = $('#username');\n        elem.waitForEnabled(3000)\n    });\n * </example>\n *\n * @alias browser.waitForEnabled\n * @param {String}   selector element to wait for\n * @param {Number=}  ms       time in ms (default: 500)\n * @param {Boolean=} reverse  if true it waits for the opposite (default: false)\n * @uses utility/waitUntil, state/isEnabled\n * @type utility\n *\n */\n\nimport { WaitUntilTimeoutError, isTimeoutError } from '../utils/ErrorHandler'\n\nlet waitForEnabled = function (selector, ms, reverse) {\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used, like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.waitForXXX(10000, true);\n     * ```\n     */\n    reverse = typeof reverse === 'boolean' ? reverse : false\n\n    /*!\n     * ensure that ms is set properly\n     */\n    if (typeof ms !== 'number') {\n        ms = this.options.waitforTimeout\n    }\n\n    return this.waitUntil(() => {\n        return this.isEnabled(selector).then((isEnabled) => {\n            if (!Array.isArray(isEnabled)) {\n                return isEnabled !== reverse\n            }\n\n            var result = reverse\n            for (let val of isEnabled) {\n                if (!reverse) {\n                    result = result || val\n                } else {\n                    result = result && val\n                }\n            }\n\n            return result !== reverse\n        })\n    }, ms).catch((e) => {\n        selector = selector || this.lastResult.selector\n\n        if (isTimeoutError(e)) {\n            let isReversed = reverse ? '' : 'not'\n            throw new WaitUntilTimeoutError(`element (${selector}) still ${isReversed} enabled after ${ms}ms`)\n        }\n        throw e\n    })\n}\n\nexport default waitForEnabled\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/waitForExist.js":"/**\n *\n * Wait for an element (selected by css selector) for the provided amount of\n * milliseconds to be present within the DOM. Returns true if the selector\n * matches at least one element that exists in the DOM, otherwise throws an\n * error. If the reverse flag is true, the command will instead return true\n * if the selector does not match any elements.\n *\n * <example>\n    :waitForExistSyncExample.js\n    it('should display a notification message after successful form submit', function () {\n        var form = $('form');\n        var notification = $('.notification');\n\n        form.submit();\n        notification.waitForExist(5000); // same as `browser.waitForExist('.notification', 5000)`\n        expect(notification.getText()).to.be.equal('Data transmitted successfully!')\n    });\n * </example>\n *\n * @alias browser.waitForExist\n * @param {String}   selector CSS selector to query\n * @param {Number=}  ms       time in ms (default: 500)\n * @param {Boolean=} reverse  if true it instead waits for the selector to not match any elements (default: false)\n * @uses utility/waitUntil, state/isExisting\n * @type utility\n *\n */\n\nimport { WaitUntilTimeoutError, isTimeoutError } from '../utils/ErrorHandler'\n\nlet waitForExist = function (selector, ms, reverse) {\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used, like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.waitForXXX(10000, true);\n     * ```\n     */\n    reverse = typeof reverse === 'boolean' ? reverse : false\n\n    /*!\n     * ensure that ms is set properly\n     */\n    if (typeof ms !== 'number') {\n        ms = this.options.waitforTimeout\n    }\n\n    return this.waitUntil(() => {\n        return this.isExisting(selector).then((isExisting) => {\n            if (!Array.isArray(isExisting)) {\n                return isExisting !== reverse\n            }\n\n            let result = reverse\n            for (let val of isExisting) {\n                if (!reverse) {\n                    result = result || val\n                } else {\n                    result = result && val\n                }\n            }\n\n            return result !== reverse\n        })\n    }, ms).catch((e) => {\n        selector = selector || this.lastResult.selector\n\n        if (isTimeoutError(e)) {\n            let isReversed = reverse ? '' : 'not '\n            throw new WaitUntilTimeoutError(`element (${selector}) still ${isReversed}existing after ${ms}ms`)\n        }\n        throw e\n    })\n}\n\nexport default waitForExist\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/waitForSelected.js":"/**\n *\n * Wait for an option or radio/checkbox element (selected by css selector) for the provided amount of\n * milliseconds to be (un)selected or (un)checked. If multiple elements get queryied by given\n * selector, it returns true (or false if reverse flag is set) if at least one element is (un)selected.\n *\n * <example>\n    :index.html\n    <select>\n        <option value=\"1\" id=\"option1\">1</option>\n        <option value=\"2\" id=\"option2\" selected=\"selected\">2</option>\n        <option value=\"3\" id=\"option3\">3</option>\n    </select>\n    <script type=\"text/javascript\">\n        setTimeout(function () {\n            document.getElementById('option1').selected = true;\n        }, 2000);\n    </script>\n\n    :waitForSelectedExample.js\n    it('should detect when an option is selected', function () {\n        browser.waitForSelected('#option1', 3000);\n\n        // same as\n        elem = $('#option1');\n        elem.waitForSelected(3000)\n    });\n * </example>\n *\n * @alias browser.waitForSelected\n * @param {String}   selector element to wait for\n * @param {Number=}  ms       time in ms (default: 500)\n * @param {Boolean=} reverse  if true it waits for the opposite (default: false)\n * @uses utility/waitUntil, state/isSelected\n * @type utility\n *\n */\n\nimport { WaitUntilTimeoutError, isTimeoutError } from '../utils/ErrorHandler'\n\nlet waitForSelected = function (selector, ms, reverse) {\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used, like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.waitForXXX(10000, true);\n     * ```\n     */\n    reverse = typeof reverse === 'boolean' ? reverse : false\n\n    /*!\n     * ensure that ms is set properly\n     */\n    if (typeof ms !== 'number') {\n        ms = this.options.waitforTimeout\n    }\n\n    return this.waitUntil(() => {\n        return this.isSelected(selector).then((isSelected) => {\n            if (!Array.isArray(isSelected)) {\n                return isSelected !== reverse\n            }\n\n            let result = reverse\n            for (let val of isSelected) {\n                if (!reverse) {\n                    result = result || val\n                } else {\n                    result = result && val\n                }\n            }\n\n            return result !== reverse\n        })\n    }, ms).catch((e) => {\n        selector = selector || this.lastResult.selector\n\n        if (isTimeoutError(e)) {\n            let isReversed = reverse ? '' : 'not'\n            throw new WaitUntilTimeoutError(`element (${selector}) still ${isReversed} selected after ${ms}ms`)\n        }\n        throw e\n    })\n}\n\nexport default waitForSelected\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/waitForText.js":"/**\n *\n * Wait for an element (selected by css selector) for the provided amount of\n * milliseconds to have text/content. If multiple elements get queryied by given\n * selector, it returns true (or false if reverse flag is set) if at least one\n * element has text/content.\n *\n * <example>\n    :index.html\n    <div id=\"elem\"></div>\n    <script type=\"text/javascript\">\n        setTimeout(function () {\n            document.getElementById('elem').innerHTML = 'some text';\n        }, 2000);\n    </script>\n\n    :waitForTextExample.js\n    it('should detect when element has text', function () {\n        browser.waitForText('#elem', 3000);\n\n        // same as\n        elem = $('#elem');\n        elem.waitForText(3000)\n    });\n * </example>\n *\n * @alias browser.waitForText\n * @param {String}   selector element to wait for\n * @param {Number=}  ms       time in ms (default: 500)\n * @param {Boolean=} reverse  if true it waits for the opposite (default: false)\n * @uses utility/waitUntil, property/getText\n * @type utility\n *\n */\n\nimport { WaitUntilTimeoutError, isTimeoutError } from '../utils/ErrorHandler'\n\nlet waitForText = function (selector, ms, reverse) {\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used, like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.waitForXXX(10000, true);\n     * ```\n     */\n    reverse = typeof reverse === 'boolean' ? reverse : false\n\n    /*!\n     * ensure that ms is set properly\n     */\n    if (typeof ms !== 'number') {\n        ms = this.options.waitforTimeout\n    }\n\n    return this.waitUntil(() => {\n        return this.getText(selector).then((text) => {\n            if (!Array.isArray(text)) {\n                return (text !== '') !== reverse\n            }\n\n            let result = reverse\n            for (let val of text) {\n                if (!reverse) {\n                    result = result || val !== ''\n                } else {\n                    result = result && val === ''\n                }\n            }\n\n            return result !== reverse\n        })\n    }, ms).catch((e) => {\n        selector = selector || this.lastResult.selector\n\n        if (isTimeoutError(e)) {\n            let isReversed = reverse ? 'with' : 'without'\n            throw new WaitUntilTimeoutError(`element (${selector}) still ${isReversed} text after ${ms}ms`)\n        }\n        throw e\n    })\n}\n\nexport default waitForText\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/waitForValue.js":"/**\n *\n * Wait for an element (selected by css selector) for the provided amount of\n * milliseconds to have a value. If multiple elements get queryied by given\n * selector, it returns true (or false if reverse flag is set) if at least one\n * element has a value.\n *\n * <example>\n    :index.html\n    <input name=\"someInput\" id=\"elem\" value=\"\"></input>\n    <script type=\"text/javascript\">\n        setTimeout(function () {\n            document.getElementById('elem').value = 'some text';\n        }, 2000);\n    </script>\n\n    :waitForValueExample.js\n    it('should detect when element has value', function () {\n        browser.waitForValue('#elem', 3000);\n\n        // same as\n        elem = $('#elem');\n        elem.waitForValue(3000)\n    });\n * </example>\n *\n * @alias browser.waitForValue\n * @param {String}   selector element to wait\n * @param {Number=}  ms       time in ms (default: 500)\n * @param {Boolean=} reverse  if true it waits for the opposite (default: false)\n * @uses utility/waitUntil, property/getValue\n * @type utility\n *\n */\n\nimport { WaitUntilTimeoutError, isTimeoutError } from '../utils/ErrorHandler'\n\nlet waitForValue = function (selector, ms, reverse) {\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used, like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.waitForXXX(10000, true);\n     * ```\n     */\n    reverse = typeof reverse === 'boolean' ? reverse : false\n\n    /*!\n     * ensure that ms is set properly\n     */\n    if (typeof ms !== 'number') {\n        ms = this.options.waitforTimeout\n    }\n\n    return this.waitUntil(() => {\n        return this.getValue(selector).then((value) => {\n            if (!Array.isArray(value)) {\n                return (value !== '') !== reverse\n            }\n\n            let result = reverse\n            for (let val of value) {\n                if (!reverse) {\n                    result = result || val !== ''\n                } else {\n                    result = result && val === ''\n                }\n            }\n\n            return result !== reverse\n        })\n    }, ms).catch((e) => {\n        selector = selector || this.lastResult.selector\n\n        if (isTimeoutError(e)) {\n            let isReversed = reverse ? 'with' : 'without'\n            throw new WaitUntilTimeoutError(`element (${selector}) still ${isReversed} a value after ${ms}ms`)\n        }\n        throw e\n    })\n}\n\nexport default waitForValue\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/waitForVisible.js":"/**\n *\n * Wait for an element (selected by css selector) for the provided amount of\n * milliseconds to be (in)visible. If multiple elements get queryied by given\n * selector, it returns true (or false if reverse flag is set) if at least one\n * element is visible.\n *\n * <example>\n    :index.html\n    <div id=\"elem\" style=\"visibility: hidden;\">Hello World!</div>\n    <script type=\"text/javascript\">\n        setTimeout(function () {\n            document.getElementById('elem').style.visibility = 'visible';\n        }, 2000);\n    </script>\n\n    :waitForVisibleExample.js\n    it('should detect when element is visible', function () {\n        browser.waitForVisible('#elem', 3000);\n\n        // same as\n        elem = $('#elem');\n        elem.waitForVisible(3000)\n    });\n * </example>\n *\n * @alias browser.waitForVisible\n * @param {String}   selector element to wait for\n * @param {Number=}  ms       time in ms (default: 500)\n * @param {Boolean=} reverse  if true it waits for the opposite (default: false)\n * @uses utility/waitUntil, state/isVisible\n * @type utility\n *\n */\n\nimport { WaitUntilTimeoutError, isTimeoutError } from '../utils/ErrorHandler'\n\nlet waitForVisible = function (selector, ms, reverse) {\n    /**\n     * we can't use default values for function parameter here because this would\n     * break the ability to chain the command with an element if reverse is used, like\n     *\n     * ```js\n     * var elem = $('#elem');\n     * elem.waitForXXX(10000, true);\n     * ```\n     */\n    reverse = typeof reverse === 'boolean' ? reverse : false\n\n    /*!\n     * ensure that ms is set properly\n     */\n    if (typeof ms !== 'number') {\n        ms = this.options.waitforTimeout\n    }\n\n    return this.waitUntil(() => {\n        return this.isVisible(selector).then((isVisible) => {\n            if (!Array.isArray(isVisible)) {\n                return isVisible !== reverse\n            }\n\n            let result = reverse\n            for (let val of isVisible) {\n                if (!reverse) {\n                    result = result || val\n                } else {\n                    result = result && val\n                }\n            }\n\n            return result !== reverse\n        })\n    }, ms).catch((e) => {\n        selector = selector || this.lastResult.selector\n\n        if (isTimeoutError(e)) {\n            let isReversed = reverse ? '' : 'not'\n            throw new WaitUntilTimeoutError(`element (${selector}) still ${isReversed} visible after ${ms}ms`)\n        }\n        throw e\n    })\n}\n\nexport default waitForVisible\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/commands/waitUntil.js":"/**\n *\n * This wait command is your universal weapon if you want to wait on something. It expects a condition\n * and waits until that condition is fulfilled with a truthy value. A condition can be either a promise\n * or a command result. The commands within the condition are getting executed synchronously like in\n * your test.\n *\n * A common example is to wait until a certain element contains a certain text (see example).\n *\n * <example>\n    :example.html\n    <div id=\"someText\">I am some text</div>\n    <script>\n      setTimeout(function() {\n        $('#someText').html('I am now different');\n      }, 1000);\n    </script>\n\n    :waitUntil.js\n    it('should wait until text has changed', function () {\n        browser.waitUntil(function () {\n          return browser.getText('#someText') === 'I am now different'\n        }, 5000, 'expected text to be different after 5s');\n    });\n * </example>\n *\n *\n * @alias browser.waitUntil\n * @param {Function|Promise} condition  condition to wait on\n * @param {Number=}          timeout    timeout in ms (default: 500)\n * @param {String=}          timeoutMsg error message to throw when waitUntil times out\n * @param {Number=}          interval   interval between condition checks (default: 500)\n * @uses utility/pause\n * @type utility\n *\n */\n\nimport { WaitUntilTimeoutError } from '../utils/ErrorHandler'\nimport Timer from '../utils/Timer'\n\nexport default function (condition, timeout, timeoutMsg, interval) {\n    /*!\n     * ensure that timeout and interval are set properly\n     */\n    if (typeof timeout !== 'number') {\n        timeout = this.options.waitforTimeout\n    }\n\n    if (typeof interval !== 'number') {\n        interval = this.options.waitforInterval\n    }\n\n    let fn\n\n    if (typeof condition === 'function') {\n        fn = condition.bind(this)\n    } else {\n        fn = () => Promise.resolve(condition)\n    }\n\n    let isSync = this.options.sync\n    let timer = new Timer(interval, timeout, fn, true, isSync)\n\n    return timer.catch((e) => {\n        if (e === 'timeout' && typeof timeoutMsg === 'string') {\n            throw new WaitUntilTimeoutError(timeoutMsg)\n        }\n        throw new WaitUntilTimeoutError(`Promise was rejected with the following reason: ${e}`)\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/alertAccept.js":"/**\n *\n * Accepts the currently displayed alert dialog. Usually, this is equivalent to\n * clicking on the 'OK' button in the dialog.\n *\n * <example>\n    :alertAccept.js\n    it('demonstrate the alertAccept command', function () {\n        if (browser.alertText()) {\n            browser.alertAccept();\n        }\n        // ...\n    });\n * </example>\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#accept-alert\n * @type protocol\n *\n */\n\nlet alertAccept = function () {\n    // ToDo change path to new route\n    // according to Webdriver specification: /session/{session id}/alert/accept\n    let requestOptions = {\n        path: '/session/:sessionId/accept_alert',\n        method: 'POST'\n    }\n\n    return this.requestHandler.create(requestOptions)\n}\n\nexport default alertAccept\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/alertDismiss.js":"/**\n *\n * Dismisses the currently displayed alert dialog. For confirm() and prompt()\n * dialogs, this is equivalent to clicking the 'Cancel' button. For alert()\n * dialogs, this is equivalent to clicking the 'OK' button.\n *\n * <example>\n    :alertAccept.js\n    it('demonstrate the alertDismiss command', function () {\n        if (browser.alertText()) {\n            browser.alertDismiss();\n        }\n        // ...\n    });\n * </example>\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dismiss-alert\n * @type protocol\n *\n */\n\nlet alertDismiss = function () {\n    // ToDo change path to new route\n    // according to Webdriver specification: /session/{session id}/alert/dismiss\n    let requestOptions = {\n        path: '/session/:sessionId/dismiss_alert',\n        method: 'POST'\n    }\n\n    return this.requestHandler.create(requestOptions)\n}\n\nexport default alertDismiss\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/alertText.js":"/**\n *\n * Gets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.\n *\n * <example>\n    :alertText.js\n    it('demonstrate the alertDismiss command', function () {\n        if (browser.alertText()) {\n            browser.alertDismiss();\n        }\n        // ...\n    });\n * </example>\n *\n * @param {String=} text  Keystrokes to send to the prompt() dialog.\n * @returns {String}      The text of the currently displayed alert.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#get-alert-text\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#send-alert-text\n * @type protocol\n *\n */\n\nlet alertText = function (text) {\n    // ToDo change path to new route\n    // according to Webdriver specification: /session/{session id}/alert/text\n    let requestOptions = '/session/:sessionId/alert_text'\n    let data = {}\n\n    if (typeof text === 'string') {\n        requestOptions = {\n            path: requestOptions,\n            method: 'POST'\n        }\n\n        data = { text: text }\n    }\n\n    return this.unify(this.requestHandler.create(requestOptions, data), {\n        extractValue: true\n    })\n}\n\nexport default alertText\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/applicationCacheStatus.js":"/**\n *\n * Get the status of the html5 application cache.\n *\n * @returns {Number} Status code for application cache: **{UNCACHED = 0, IDLE = 1, CHECKING = 2, DOWNLOADING = 3, UPDATE_READY = 4, OBSOLETE = 5}**\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidapplication_cachestatus\n * @type protocol\n *\n */\n\nlet applicationCacheStatus = function () {\n    return this.requestHandler.create('/session/:sessionId/application_cache/status')\n}\n\nexport default applicationCacheStatus\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/background.js":"/**\n *\n * Send the currently active app to the background.\n *\n * <example>\n    :backgroundApp.js\n    browser.background(1);\n * </example>\n *\n * @param {Number} seconds  number of seconds after the app gets send to background\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#background-app\n * @type mobile\n * @for android\n *\n */\n\nlet background = function (seconds = 0) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/app/background',\n        method: 'POST'\n    }, { seconds })\n}\n\nexport default background\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/back.js":"/**\n *\n * Navigate backwards in the browser history, if possible.\n *\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#back\n * @type protocol\n *\n */\n\nlet back = function () {\n    if (this.desiredCapabilities.browserName === 'safari') {\n        /*!\n         * helper for safaridriver which doesn not support forward\n         * Reason: \"Yikes! Safari history navigation does not work. We can go forward or back,\n         * but once we do, we can no longer communicate with the page\"\n         */\n        return this.execute('history.go(-1)')\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/back',\n        method: 'POST'\n    })\n}\n\nexport default back\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/buttonDown.js":"/**\n *\n * Click and hold the left mouse button (at the coordinates set by the last moveto\n * command). Note that the next mouse-related command that should follow is buttonup.\n * Any other mouse command (such as click or another call to buttondown) will yield\n * undefined behaviour.\n *\n * @param {Number} button  Which button, enum: *{LEFT = 0, MIDDLE = 1 , RIGHT = 2}*. Defaults to the left mouse button if not specified.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidbuttondown\n * @type protocol\n *\n */\n\nimport handleMouseButtonProtocol from '../helpers/handleMouseButtonProtocol'\n\nlet buttonDown = function (button) {\n    return handleMouseButtonProtocol.call(\n        this,\n        '/session/:sessionId/buttondown',\n        button\n    )\n}\n\nexport default buttonDown\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/buttonPress.js":"/**\n *\n * Click any mouse button (at the coordinates set by the last moveto command). Note\n * that calling this command after calling buttondown and before calling button up\n * (or any out-of-order interactions sequence) will yield undefined behaviour.\n *\n * @param {Number} button  Which button, enum: *{LEFT = 0, MIDDLE = 1 , RIGHT = 2}*. Defaults to the left mouse button if not specified.\n * @type protocol\n *\n */\n\nimport handleMouseButtonProtocol from '../helpers/handleMouseButtonProtocol'\n\nlet buttonPress = function (button) {\n    return handleMouseButtonProtocol.call(\n        this,\n        '/session/:sessionId/click',\n        button\n    )\n}\n\nexport default buttonPress\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/buttonUp.js":"/**\n *\n * Releases the mouse button previously held (where the mouse is currently at). Must\n * be called once for every buttondown command issued. See the note in click and\n * buttondown about implications of out-of-order commands.\n *\n * @param {Number} button  Which button, enum: *{LEFT = 0, MIDDLE = 1 , RIGHT = 2}*. Defaults to the left mouse button if not specified.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidbuttonup\n * @type protocol\n *\n */\n\nimport handleMouseButtonProtocol from '../helpers/handleMouseButtonProtocol'\n\nlet buttonUp = function (button) {\n    return handleMouseButtonProtocol.call(\n        this,\n        '/session/:sessionId/buttonup',\n        button\n    )\n}\n\nexport default buttonUp\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/closeApp.js":"/**\n *\n * Close the given application.\n *\n * <example>\n    :closeApp.js\n    browser.closeApp()\n * </example>\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#close-app\n * @type mobile\n * @for ios\n *\n */\n\nlet closeApp = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/app/close',\n        method: 'POST'\n    })\n}\n\nexport default closeApp\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/context.js":"/**\n *\n * Retrieve current context or switch to the specified context\n *\n * @param {String=} id the context to switch to\n *\n * @see http://appium.io/slate/en/v1.1.0/?javascript#automating-hybrid-ios-apps\n * @see https://github.com/admc/wd/blob/master/lib/commands.js#L279\n * @type mobile\n * @for android, ios\n *\n */\n\nlet context = function (id) {\n    let requestOptions = {\n        path: '/session/:sessionId/context',\n        method: 'GET'\n    }\n\n    let data = {}\n\n    if (typeof id === 'string') {\n        requestOptions.method = 'POST'\n        data.name = id\n    }\n\n    return this.requestHandler.create(requestOptions, data)\n}\n\nexport default context\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/contexts.js":"/**\n *\n * Returns an object with a value field containing the list of all available contexts\n *\n * @see http://appium.io/slate/en/v1.1.0/?javascript#automating-hybrid-ios-apps\n * @see https://github.com/admc/wd/blob/master/lib/commands.js#L279\n * @type mobile\n * @for android, ios\n *\n */\n\nlet contexts = function () {\n    return this.requestHandler.create('/session/:sessionId/contexts')\n}\n\nexport default contexts\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/cookie.js":"/**\n * Protocol binding to operate with cookies on the current page.\n *\n * <example>\n    :cookie.js\n    it('should get/set cookies using protocol command', function () {\n        // get all cookies\n        var cookies = browser.cookie();\n        console.log(cookies); // outputs: [{ name: 'test', value: '123' }]\n\n        // set cookie\n        browser.cookie('post', {\n            name: 'myCookie',\n            value: 'some content'\n        });\n\n        // delete cookie (sync)\n        browser.cookie('delete','myCookie');\n    })\n * </example>\n *\n * @param {String=}         method  request method\n * @param {Object=|String=} args    contains cookie information if you want to set a cookie or contains name of cookie if you want to delete it\n *\n * @returns {Object}  cookie data\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#cookies\n * @type protocol\n *\n */\n\nlet cookie = function (method = 'GET', args) {\n    let data = {}\n    let requestOptions = {\n        path: '/session/:sessionId/cookie',\n        method: method\n    }\n\n    /**\n     * set cookie param for POST method\n     */\n    if (method.toUpperCase() === 'POST' && typeof args === 'object') {\n        data.cookie = args\n    }\n\n    /**\n     * add cookie name tp path URL to delete a specific cookie object\n     */\n    if (method.toUpperCase() === 'DELETE' && typeof args === 'string') {\n        requestOptions.path += '/' + args\n    }\n\n    return this.requestHandler.create(requestOptions, data)\n}\n\nexport default cookie\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/currentActivity.js":"/**\n *\n * Receive the current activity on an Android device.\n *\n * <example>\n    :rotateAsync.js\n    it('should get the activity of the android device', function () {\n        var activity = browser.currentActivity()\n        console.log(activity); // returns android activity information\n    });\n * </example>\n *\n * @see https://github.com/appium/appium-android-driver/blob/master/lib/commands/general.js#L59-L61\n * @type mobile\n * @for android\n *\n */\n\nlet currentActivity = function () {\n    return this.requestHandler.create('/session/:sessionId/appium/device/current_activity')\n}\n\nexport default currentActivity\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/deviceKeyEvent.js":"/**\n *\n * send a key event to the device\n *\n * @param {Number} keyValue  device specifc key value\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/appium-bindings.md#key-event\n * @type mobile\n * @for android\n *\n */\n\nlet deviceKeyEvent = function (keycode, metastate) {\n    let data = {\n        keycode: keycode\n    }\n\n    if (metastate) {\n        data.metastate = metastate\n    }\n\n    let requestOptions = {\n        path: '/session/:sessionId/appium/device/keyevent',\n        method: 'POST'\n    }\n\n    return this.requestHandler.create(requestOptions, data)\n}\n\nexport default deviceKeyEvent\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/doDoubleClick.js":"/**\n *\n * Double-clicks at the current mouse coordinates (set by moveto. (Not part of the official Webdriver specification).\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessioniddoubleclick\n * @type protocol\n *\n */\n\nlet doDoubleClick = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/doubleclick',\n        method: 'POST'\n    })\n}\n\nexport default doDoubleClick\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementActive.js":"/**\n *\n * Get the element on the page that currently has focus. The element will be returned as a WebElement JSON object.\n *\n * @returns {String} A WebElement JSON object for the active element.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-active-element\n * @type protocol\n *\n */\n\nlet elementActive = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/element/active',\n        method: 'POST'\n    })\n}\n\nexport default elementActive\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdAttribute.js":"/**\n *\n * Get the value of an element's attribute.\n *\n * @param {String} ID             ID of a WebElement JSON object to route the command to\n * @param {String} attributeName  attribute name of element you want to receive\n *\n * @returns {String|null} The value of the attribute, or null if it is not set on the element.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-element-attribute\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet elementIdAttribute = function (id, attributeName) {\n    if ((typeof id !== 'string' && typeof id !== 'number') || typeof attributeName !== 'string') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdAttribute protocol command')\n    }\n\n    return this.requestHandler.create(`/session/:sessionId/element/${id}/attribute/${attributeName}`)\n}\n\nexport default elementIdAttribute\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdClear.js":"/**\n *\n * Clear a `TEXTAREA` or text `INPUT element's value.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-element-clear\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet elementIdClear = function (id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdClear protocol command')\n    }\n\n    return this.requestHandler.create({\n        path: `/session/:sessionId/element/${id}/clear`,\n        method: 'POST'\n    })\n}\n\nexport default elementIdClear\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdClick.js":"/**\n *\n * Click on an element.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-element-click\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet elementIdClick = function (id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdClick protocol command')\n    }\n\n    return this.requestHandler.create({\n        path: `/session/:sessionId/element/${id}/click`,\n        method: 'POST'\n    })\n}\n\nexport default elementIdClick\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdCssProperty.js":"/**\n *\n * Query the value of an element's computed CSS property. The CSS property to query\n * should be specified using the CSS property name, not the JavaScript property name\n * (e.g. background-color instead of backgroundColor).\n *\n * @param {String} ID                ID of a WebElement JSON object to route the command to\n * @param  {String} cssPropertyName  CSS property\n *\n * @returns {String} The value of the specified CSS property.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-element-property\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet elementIdCssProperty = function (id, cssPropertyName) {\n    if ((typeof id !== 'string' && typeof id !== 'number') || typeof cssPropertyName !== 'string') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdCssProperty protocol command')\n    }\n\n    return this.requestHandler.create(`/session/:sessionId/element/${id}/css/${cssPropertyName}`)\n}\n\nexport default elementIdCssProperty\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdDisplayed.js":"/**\n *\n * Determine if an element is currently displayed.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n * @returns {Boolean} true if the element is displayed\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementiddisplayed\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet elementIdDisplayed = function elementIdDisplayed (id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdDisplayed protocol command')\n    }\n\n    return this.requestHandler.create(`/session/:sessionId/element/${id}/displayed`)\n}\n\nexport default elementIdDisplayed\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdElement.js":"/**\n *\n * Search for an element on the page, starting from an element.\n * The located element will be returned as a WebElement JSON object.\n * The table below lists the locator strategies that each server should support.\n * Each locator must return the first matching element located in the DOM.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n * @param {String} selector selector to query the element\n * @returns {String} A WebElement JSON object for the located element.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidelement\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\nimport findStrategy from '../helpers/findElementStrategy'\n\nlet elementIdElement = function (id, selector) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdElement protocol command')\n    }\n\n    let found = findStrategy(selector, true)\n    return this.requestHandler.create(`/session/:sessionId/element/${id}/element`, {\n        using: found.using,\n        value: found.value\n    }).then((result) => {\n        result.selector = selector\n        return result\n    }, (e) => {\n        let result = e.seleniumStack\n\n        /**\n         * if error is not NoSuchElement throw it\n         */\n        if (!result || result.type !== 'NoSuchElement') {\n            throw e\n        }\n\n        result.state = 'failure'\n        result.sessionId = this.requestHandler.sessionID\n        result.value = null\n        result.selector = selector\n        delete result.orgStatusMessage\n        return result\n    })\n}\n\nexport default elementIdElement\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdElements.js":"/**\n *\n * Search for multiple elements on the page, starting from an element. The located\n * elements will be returned as a WebElement JSON objects. The table below lists the\n * locator strategies that each server should support. Elements should be returned in\n * the order located in the DOM.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n * @param {String} selector selector to query the elements\n * @returns {Object[]} A list of WebElement JSON objects for the located elements.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidelements\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\nimport findStrategy from '../helpers/findElementStrategy'\n\nlet elementIdElements = function (id, selector) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdElements protocol command')\n    }\n\n    let found = findStrategy(selector, true)\n    return this.requestHandler.create(`/session/:sessionId/element/${id}/elements`, {\n        using: found.using,\n        value: found.value\n    })\n}\n\nexport default elementIdElements\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdEnabled.js":"/**\n *\n * Determine if an element is currently enabled.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n * @returns {Boolean} true if the element is enabled\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-is-element-enabled\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet elementIdEnabled = function (id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdEnabled protocol command')\n    }\n\n    return this.requestHandler.create(`/session/:sessionId/element/${id}/enabled`)\n}\n\nexport default elementIdEnabled\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdLocationInView.js":"/**\n *\n * Determine an element's location on the screen once it has been scrolled into view.\n *\n * *Note:* This is considered an internal command and should only be used to determine\n * an element's location for correctly generating native events.\n *\n * Depcrecated command, please use `elementIdRect`.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n * @returns {Object} The X and Y coordinates for the element (`{x:number, y:number}`)\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidlocation_in_view\n * @type protocol\n * @deprecated\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet elementIdLocationInView = function (id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdLocationInView protocol command')\n    }\n\n    return this.requestHandler.create(`/session/:sessionId/element/${id}/location_in_view`)\n}\n\nexport default elementIdLocationInView\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdLocation.js":"/**\n *\n * Determine an element's location on the page. The point (0, 0) refers to the\n * upper-left corner of the page. The element's coordinates are returned as a\n * JSON object with x and y properties.\n *\n * Depcrecated command, please use `elementIdRect`.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n * @returns {Object} The X and Y coordinates for the element on the page (`{x:number, y:number}`)\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidlocation\n * @type protocol\n * @deprecated\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet elementIdLocation = function (id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdLocation protocol command')\n    }\n\n    return this.requestHandler.create(`/session/:sessionId/element/${id}/location`)\n}\n\nexport default elementIdLocation\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdName.js":"/**\n *\n * Query for an element's tag name.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n * @returns {String}  the element's tag name, as a lowercase string\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-element-tag-name\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet elementIdName = function (id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdName protocol command')\n    }\n\n    return this.requestHandler.create(`/session/:sessionId/element/${id}/name`)\n}\n\nexport default elementIdName\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdRect.js":"/**\n *\n * The Get Element Rect command returns the dimensions and coordinates of the given web element.\n * The returned value is a dictionary with `x`. `y`, `width` and `height` properties.\n *\n * Note: this command was recently added to the official Webdriver protocol and might not be\n * working with current Selenium driver.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-element-rect\n * @type protocol\n *\n */\n\nlet elementIdRect = function (id) {\n    return this.requestHandler.create({\n        path: `/session/:sessionId/element/${id}/rect`,\n        method: 'GET'\n    })\n}\n\nexport default elementIdRect\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdSelected.js":"/**\n *\n * Determine if an OPTION element, or an INPUT element of type checkbox or\n * radiobutton is currently selected.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n * @returns {Boolean} true if the element is selected.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-is-element-selected\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet elementIdSelected = function (id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdSelected protocol command')\n    }\n\n    return this.requestHandler.create(`/session/:sessionId/element/${id}/selected`)\n}\n\nexport default elementIdSelected\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdSize.js":"/**\n *\n * Determine an element's size in pixels. The size will be returned as a JSON object\n * with width and height properties.\n *\n * Depcrecated command, please use `elementIdRect`.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n * @returns {Object} The width and height of the element, in pixels (`{width:number, height:number}`)\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidsize\n * @type protocol\n * @deprecated\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet elementIdSize = function (id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdSize protocol command')\n    }\n\n    return this.requestHandler.create(`/session/:sessionId/element/${id}/size`)\n}\n\nexport default elementIdSize\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdText.js":"/**\n *\n * Returns the visible text for the element.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n * @returns {String} visible text for the element\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#getelementtext\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet elementIdText = function (id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdText protocol command')\n    }\n\n    return this.requestHandler.create(`/session/:sessionId/element/${id}/text`)\n}\n\nexport default elementIdText\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elementIdValue.js":"/**\n *\n * Send a sequence of key strokes to an element.\n *\n * @param {String} ID              ID of a WebElement JSON object to route the command to\n * @param {String|String[]} value  The sequence of keys to type. An array must be provided. The server should flatten the array items to a single string to be typed.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#element-send-keys\n * @type protocol\n *\n */\n\nimport { UNICODE_CHARACTERS } from '../helpers/constants'\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet elementIdValue = function (id, value) {\n    let key = []\n\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdValue protocol command')\n    }\n\n    /**\n     * replace key with corresponding unicode character\n     */\n    if (typeof value === 'string') {\n        key = checkUnicode(value)\n    } else if (value instanceof Array) {\n        for (let charSet of value) {\n            key = key.concat(checkUnicode(charSet))\n        }\n    } else {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdValue protocol command')\n    }\n\n    // ToDo change this according to Webdriver spec\n    // /session/{session id}/element/{element id}/sendKeys\n    return this.requestHandler.create(`/session/:sessionId/element/${id}/value`, {\n        'value': key\n    })\n}\n\n/*!\n * check for unicode character or split string into literals\n * @param  {String} value  text\n * @return {Array}         set of characters or unicode symbols\n */\nfunction checkUnicode (value) {\n    return UNICODE_CHARACTERS.hasOwnProperty(value) ? [UNICODE_CHARACTERS[value]] : Array.from(value)\n}\n\nexport default elementIdValue\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/element.js":"/**\n * Search for an element on the page, starting from the document root.\n * The located element will be returned as a WebElement JSON object.\n * The table below lists the locator strategies that each server should support.\n * Each locator must return the first matching element located in the DOM.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#find-element\n *\n * @param {String} selector selector to query the element\n * @returns {String} A WebElement JSON object for the located element.\n *\n * @type protocol\n *\n */\n\nimport findStrategy from '../helpers/findElementStrategy'\nimport hasElementResult from '../helpers/hasElementResultHelper'\nimport q from 'q'\n\nlet element = function (selector) {\n    let requestPath = '/session/:sessionId/element'\n    let lastPromise = this.lastResult ? q(this.lastResult).inspect() : this.lastPromise.inspect()\n    let relative = false\n\n    if (lastPromise.state === 'fulfilled' && hasElementResult(lastPromise.value) === 1) {\n        if (!selector) {\n            return lastPromise.value\n        }\n\n        /**\n         * format xpath selector (global -> relative)\n         */\n        if (selector.slice(0, 2) === '//') {\n            selector = '.' + selector.slice(1)\n        }\n\n        let elem = lastPromise.value.value.ELEMENT\n        relative = true\n        requestPath = `/session/:sessionId/element/${elem}/element`\n    }\n\n    let found = findStrategy(selector, relative)\n    return this.requestHandler.create(\n        requestPath,\n        { using: found.using, value: found.value }\n    ).then((result) => {\n        result.selector = selector\n        return result\n    }, (e) => {\n        let result = e.seleniumStack\n\n        /**\n         * if error is not NoSuchElement throw it\n         */\n        if (!result || result.type !== 'NoSuchElement') {\n            throw e\n        }\n\n        result.state = 'failure'\n        result.sessionId = this.requestHandler.sessionID\n        result.value = null\n        result.selector = selector\n        delete result.orgStatusMessage\n        return result\n    })\n}\n\nexport default element\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/elements.js":"/**\n *\n * Search for multiple elements on the page, starting from the document root. The located\n * elements will be returned as a WebElement JSON objects. The table below lists the\n * locator strategies that each server should support. Elements should be returned in\n * the order located in the DOM.\n *\n * The array of elements can be retrieved  using the 'response.value' which is a\n * collection of element ID's and can be accessed in the subsequent commands\n * using the '.ELEMENT' method.\n *\n * @param {String} selector selector to query the elements\n * @returns {Object[]} A list of WebElement JSON objects for the located elements.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#find-elements\n * @type protocol\n *\n */\n\nimport findStrategy from '../helpers/findElementStrategy'\nimport hasElementResult from '../helpers/hasElementResultHelper'\nimport { CommandError } from '../utils/ErrorHandler'\nimport q from 'q'\n\nlet elements = function (selector) {\n    let requestPath = '/session/:sessionId/elements'\n    let lastPromise = this.lastResult ? q(this.lastResult).inspect() : this.lastPromise.inspect()\n    let relative = false\n    const elementResult = hasElementResult(lastPromise.value)\n\n    if (lastPromise.state === 'fulfilled' && elementResult) {\n        if (!selector) {\n            let newSelector = Object.assign({}, lastPromise.value)\n            /**\n             * if last result was an element result transform result into an array\n             */\n            newSelector.value = Array.isArray(newSelector.value)\n                ? newSelector.value : newSelector.value !== null\n                    ? [newSelector.value] : []\n\n            /**\n             * Only return new selector if existing otherwise fetch again for selector.\n             * This is important in cases you do a waitForExist and use the same element\n             * variable again after the element has appeared.\n             */\n            if (newSelector.value.length === 0) {\n                this.lastResult = null\n                return elements.call(this, newSelector.selector)\n            }\n\n            return newSelector\n        }\n\n        /**\n         * only run elementIdElement if lastPromise was an element command\n         */\n        if (elementResult === 1) {\n            if (lastPromise.value.value === null) {\n                throw new CommandError(7, lastPromise.value.selector)\n            }\n\n            /**\n             * format xpath selector (global -> relative)\n             */\n            if (selector.slice(0, 2) === '//') {\n                selector = '.' + selector.slice(1)\n            }\n\n            var elem = lastPromise.value.value.ELEMENT\n            relative = true\n            requestPath = `/session/:sessionId/element/${elem}/elements`\n        }\n    }\n\n    let found = findStrategy(selector, relative)\n    return this.requestHandler.create(requestPath, {\n        using: found.using,\n        value: found.value\n    }).then((result) => {\n        result.selector = selector\n        return result\n    }, (err) => {\n        if (err.message === 'no such element') {\n            return []\n        }\n\n        throw err\n    })\n}\n\nexport default elements\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/executeAsync.js":"/**\n *\n * Inject a snippet of JavaScript into the page for execution in the context of the currently selected\n * frame. The executed script is assumed to be asynchronous and must signal that is done by invoking\n * the provided callback, which is always provided as the final argument to the function. The value\n * to this callback will be returned to the client.\n *\n * Asynchronous script commands may not span page loads. If an unload event is fired while waiting\n * for a script result, an error should be returned to the client.\n *\n * The script argument defines the script to execute in the form of a function body. The function will\n * be invoked with the provided args array and the values may be accessed via the arguments object\n * in the order specified. The final argument will always be a callback function that must be invoked\n * to signal that the script has finished.\n *\n * Arguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement\n * reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script\n * result will be returned to the client as WebElement JSON objects.\n *\n * <example>\n    :executeAsync.js\n    it('should execute async JavaScript on the page', function () {\n        browser.timeoutsAsyncScript(5000);\n\n        var result = browser.executeAsync(function(a, b, c, d, done) {\n            // browser context - you may access neither client nor console\n            setTimeout(function() {\n                done(a + b + c + d);\n            }, 3000);\n        }, 1, 2, 3, 4)\n\n        // node.js context - client and console are available\n        console.log(result.value); // outputs: 10\n    });\n * </example>\n *\n * @param {String|Function} script     The script to execute.\n * @param {*}               arguments  script arguments\n *\n * @returns {*}             The script result.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-execute-async-script\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet executeAsync = function (...args) {\n    let script = args.shift()\n\n    /*!\n     * parameter check\n     */\n    if ((typeof script !== 'string' && typeof script !== 'function')) {\n        throw new ProtocolError('number or type of arguments don\\'t agree with execute protocol command')\n    }\n\n    /*!\n     * instances started as multibrowserinstance can't getting called with\n     * a function parameter, therefor we need to check if it starts with \"function () {\"\n     */\n    if (typeof script === 'function' || (this.inMultibrowserMode && script.indexOf('function (') === 0)) {\n        script = `return (${script}).apply(null, arguments)`\n    }\n\n    // ToDo change this according to new Webdriver specs to:\n    // /session/{session id}/execute/async\n    return this.requestHandler.create('/session/:sessionId/execute_async', {\n        script: script,\n        args: args\n    })\n}\n\nexport default executeAsync\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/execute.js":"/**\n *\n * Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n * The executed script is assumed to be synchronous and the result of evaluating the script is returned to\n * the client.\n *\n * The script argument defines the script to execute in the form of a function body. The value returned by\n * that function will be returned to the client. The function will be invoked with the provided args array\n * and the values may be accessed via the arguments object in the order specified.\n *\n * Arguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement\n * reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script\n * result will be returned to the client as WebElement JSON objects.\n *\n * <example>\n    :execute.js\n    it('should inject javascript on the page', function () {\n        var result = browser.execute(function(a, b, c, d) {\n            // browser context - you may not access client or console\n            return a + b + c + d;\n        }, 1, 2, 3, 4)\n\n        // node.js context - client and console are available\n        console.log(result.value); // outputs: 10\n    });\n * </example>\n *\n * @param {String|Function} script                     The script to execute.\n * @param {*}               [argument1,...,argumentN]  script arguments\n *\n * @returns {*}             The script result.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-execute-script\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet execute = function (...args) {\n    let script = args.shift()\n\n    /*!\n     * parameter check\n     */\n    if ((typeof script !== 'string' && typeof script !== 'function')) {\n        throw new ProtocolError('number or type of arguments don\\'t agree with execute protocol command')\n    }\n\n    /*!\n     * instances started as multibrowserinstance can't getting called with\n     * a function paramter, therefor we need to check if it starts with \"function () {\"\n     */\n    if (typeof script === 'function' || (this.inMultibrowserMode && script.indexOf('function (') === 0)) {\n        script = `return (${script}).apply(null, arguments)`\n    }\n\n    // ToDo change this according to new Webdriver specs to:\n    // /session/{session id}/execute/sync\n    return this.requestHandler.create('/session/:sessionId/execute', { script, args })\n}\n\nexport default execute\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/file.js":"/**\n *\n * Uploads a base64 data object. (not documented, not part of Webdriver specs)\n *\n * @param {Object} data base64 data object\n *\n * @type protocol\n *\n */\n\nlet file = function (base64data) {\n    return this.requestHandler.create('/session/:sessionId/file', {\n        file: base64data\n    })\n}\n\nexport default file\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/forward.js":"/**\n * Navigate forwards in the browser history, if possible.\n *\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#forward\n * @type protocol\n *\n */\n\nlet forward = function () {\n    /*!\n     * helper for safaridriver which doesn not support forward\n     * Reason: \"Yikes! Safari history navigation does not work. We can go forward or back,\n     * but once we do, we can no longer communicate with the page\"\n     */\n    if (this.desiredCapabilities.browserName === 'safari') {\n        return this.execute('history.go(+1)').waitForExist('body', 5000)\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/forward',\n        method: 'POST'\n    })\n}\n\nexport default forward\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/frame.js":"/**\n * Change focus to another frame on the page. If the frame id is null,\n * the server should switch to the page's default content.\n *\n * <example>\n    :frame.js\n    it('should switch focus to iFrame', function () {\n        // Using `element` to find an iframe and providing it to `frame` method\n        browser.waitForExist('iframe[name=\"my_iframe\"]');\n        var my_frame = $('iframe[name=\"my_iframe\"]').value;\n        browser.frame(my_frame);\n    });\n * </example>\n *\n * @param {String|Number|null|WebElementJSONObject} id   Identifier for the frame to change focus to.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#switch-to-frame\n * @type protocol\n *\n */\n\nlet frame = function (frameId = null) {\n    return this.requestHandler.create('/session/:sessionId/frame', {\n        id: frameId\n    })\n}\n\nexport default frame\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/frameParent.js":"/**\n * Change focus to the parent context. If the current context is the top level browsing context,\n * the context remains unchanged.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#switch-to-parent-frame\n * @type protocol\n *\n */\n\nlet frameParent = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/frame/parent',\n        method: 'POST'\n    })\n}\n\nexport default frameParent\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/getAppStrings.js":"/**\n *\n * Get all defined Strings from an app for the default language.\n *\n * @param {String} language  strings language code\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/appium-bindings.md#app-strings\n * @type mobile\n * @for android\n *\n */\n\nlet getAppStrings = function (language) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/app/strings',\n        method: 'POST'\n    }, {\n        language: language\n    })\n}\n\nexport default getAppStrings\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/getCurrentDeviceActivity.js":"/**\n *\n * Get current device activity.\n *\n * <example>\n    :getCurrentDeviceActivity.js\n    it('should get current Android activity', function () {\n        var activity = browser.getCurrentDeviceActivity();\n        console.log(activity); // returns \".MainActivity\"\n    });\n * </example>\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/appium-bindings.md#current-activity\n * @type mobile\n * @for android\n *\n */\n\nlet getCurrentDeviceActivity = function () {\n    return this.unify(this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/current_activity',\n        method: 'GET'\n    }), {\n        extractValue: true\n    })\n}\n\nexport default getCurrentDeviceActivity\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/getDeviceTime.js":"/**\n *\n * Captures iOS device date and time (command works only for real devices).\n *\n * @see https://github.com/appium/appium-ios-driver/blob/master/lib/commands/general.js#L19-L35\n * @type mobile\n * @for ios\n *\n */\n\nlet getDeviceTime = function () {\n    return this.requestHandler.create('/session/:sessionId/appium/device/system_time')\n}\n\nexport default getDeviceTime\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/getNetworkConnection.js":"/**\n *\n * Get informations about the current network connection (Data/WIFI/Airplane). The actual\n * server value will be a number (see `getNetworkConnection.js` example). However WebdriverIO\n * additional properties to the response object to allow easier assertions (see\n * `getNetworkConnectionEasier.js` example).\n *\n * <example>\n    :getNetworkConnection.js\n    it('should get network connection of Android device', function () {\n        var connection = browser.getNetworkConnection();\n        console.log(connection.value); // returns 6\n        console.log(connection.inAirplaneMode); // returns false\n        console.log(connection.hasWifi); // returns true\n        console.log(connection.hasData); // returns true\n    });\n * </example>\n *\n * @type mobile\n * @see https://github.com/appium/appium-android-driver/blob/master/lib/commands/network.js#L8-L22\n * @for android\n *\n */\n\nimport merge from 'deepmerge'\n\nlet getNetworkConnection = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/network_connection',\n        method: 'GET'\n    }).then((result) => {\n        result = merge(result, {\n            value: result.value,\n            inAirplaneMode: result.value === 1,\n            hasWifi: result.value === 2 || result.value === 6,\n            hasData: result.value === 4 || result.value === 6\n        })\n\n        return result\n    })\n}\n\nexport default getNetworkConnection\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/gridProxyDetails.js":"/**\n *\n * Get the details of the Selenium Grid node running a session\n *\n * <example>\n    :grid.js\n    it('should get grid proxy details', function () {\n        var details = browser.gridProxyDetails(proxyId)\n        console.log(details);\n        // {\n        //     success: true,\n        //     msg: \"proxy found !\",\n        //     id: \"MacMiniA10\",\n        //     request: {\n        //         ...\n        //         configuration: {\n        //             ...\n        //         },\n        //         capabilities: [\n        //             {\n        //                 ...\n        //             }\n        //         ]\n        //     }\n        // }\n    });\n * </example>\n *\n * @type grid\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet gridProxyDetails = function (proxyId) {\n    /*!\n     * parameter check\n     */\n    if (typeof proxyId !== 'string') {\n        throw new ProtocolError('The gridProxyDetails command needs a proxyId to work with.')\n    }\n\n    return this.requestHandler.create({\n        path: `/proxy?id=${proxyId}`,\n        method: 'GET',\n        requiresSession: false,\n        gridCommand: true\n    })\n}\n\nexport default gridProxyDetails\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/gridTestSession.js":"/**\n *\n * Get the details of the Selenium Grid node running a session\n *\n * <example>\n    :grid.js\n    it('should get current session information', function () {\n        var details = browser.gridTestSession();\n        console.log(details);\n        // {\n        //     msg: 'slot found !',\n        //     success: true,\n        //     session: '51797b64-43e1-4018-b7fb-f900d80a37a4',\n        //     internalKey: '413741ea-d48e-4346-844b-b1a90a69b3ed',\n        //     inactivityTime: 219,\n        //     proxyId: 'MacMiniA10’\n        // }\n    });\n * </example>\n *\n * @type grid\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet gridTestSession = function (sessionId) {\n    /*!\n     * parameter check\n     */\n    if (typeof sessionId !== 'string') {\n        if (!this.requestHandler.sessionID) {\n            throw new ProtocolError('The gridTestSession command needs a sessionID to work with.')\n        }\n\n        sessionId = this.requestHandler.sessionID\n    }\n\n    return this.requestHandler.create({\n        path: `/testsession?session=${sessionId}`,\n        method: 'GET',\n        requiresSession: false,\n        gridCommand: true\n    })\n}\n\nexport default gridTestSession\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/hideDeviceKeyboard.js":"/**\n *\n * Hide the keyboard.\n *\n * <example>\n    :hideKeyboard.js\n    it('should hide keyboard by tapping outside of it', function () {\n        browser.hideDeviceKeyboard(); // taps outside to hide keyboard per default\n        browser.hideDeviceKeyboard('tapOutside');\n    });\n\n    it('should hide keyboard by pressing done', function () {\n        browser.hideDeviceKeyboard('pressKey', 'Done');\n    });\n * </example>\n *\n * @param {String} strategy  desired strategy to close keyboard ('tapOutside' or 'pressKey')\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/appium-bindings.md#hide-keyboard-ios-only\n * @type mobile\n * @for ios, android\n *\n */\n\nlet hideDeviceKeyboard = function (strategy = 'tapOutside', key) {\n    let args = { strategy }\n\n    if (key) {\n        args.key = key\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/hide_keyboard',\n        method: 'POST'\n    }, args)\n}\n\nexport default hideDeviceKeyboard\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/imeActivated.js":"/**\n *\n * Indicates whether IME input is active at the moment (not if it's available.\n * (Not part of the official Webdriver specification)\n *\n * @returns {boolean}  true if IME input is available and currently active, false otherwise\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidimeactivated\n * @type protocol\n *\n */\n\nlet imeActivated = function () {\n    return this.requestHandler.create(\n        '/session/:sessionId/ime/activated'\n    )\n}\n\nexport default imeActivated\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/imeActivate.js":"/**\n *\n * Make an engines that is available (appears on the list returned by getAvailableEngines) active.\n * After this call, the engine will be added to the list of engines loaded in the IME daemon and the\n * input sent using sendKeys will be converted by the active engine. Note that this is a\n * platform-independent method of activating IME (the platform-specific way being using keyboard shortcuts.\n * (Not part of the official Webdriver specification)\n *\n * @param {String} engine   Name of the engine to activate.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidimeactive_engine\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet imeActivate = function (engine) {\n    if (typeof engine !== 'string') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with imeActivate protocol command')\n    }\n\n    return this.requestHandler.create('/session/:sessionId/ime/activate', {\n        engine: engine\n    })\n}\n\nexport default imeActivate\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/imeActiveEngine.js":"/**\n *\n * Get the name of the active IME engine. The name string is platform specific. (Not part of the\n * official Webdriver specification)\n *\n * @returns {String} engine   The name of the active IME engine.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidimeactive_engine\n * @type protocol\n *\n */\n\nlet imeActiveEngine = function () {\n    return this.requestHandler.create('/session/:sessionId/ime/active_engine')\n}\n\nexport default imeActiveEngine\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/imeAvailableEngines.js":"/**\n *\n * List all available engines on the machine. To use an engine, it has to be present\n * in this list. (Not part of the official Webdriver specification)\n *\n * @returns {Object[]} engines   A list of available engines\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidimeavailable_engines\n * @type protocol\n *\n */\n\nlet imeAvailableEngines = function () {\n    return this.requestHandler.create('/session/:sessionId/ime/available_engines')\n}\n\nexport default imeAvailableEngines\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/imeDeactivated.js":"/**\n *\n * De-activates the currently-active IME engine. (Not part of the official Webdriver specification)\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidimedeactivate\n * @type protocol\n *\n */\n\nlet imeDeactivated = function () {\n    return this.requestHandler.create('/session/:sessionId/ime/deactivated')\n}\n\nexport default imeDeactivated\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/init.js":"/**\n *\n * Create a new session. The server should attempt to create a session that most\n * closely matches the desired and required capabilities. Required capabilities\n * have higher priority than desired capabilities and must be set for the session\n * to be created.\n *\n * @param {Object} [capabilities] An object describing the session's [desired capabilities](https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities).\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-new-session\n * @type protocol\n *\n */\n\nimport { CommandError, ProtocolError } from '../utils/ErrorHandler'\nimport pkg from '../../package.json'\nimport merge from 'deepmerge'\n\nlet init = function (desiredCapabilities = {}) {\n    const lastCommand = this.commandList.slice(-4, -3)\n    const isInternalCall = lastCommand.length && lastCommand[0].name === 'reload'\n\n    /**\n     * make sure we don't run this command within wdio test run\n     */\n    if (this.options.isWDIO && !isInternalCall) {\n        throw new CommandError('Don\\'t call the \\'init\\' command when using the wdio test runner. ' +\n                               'Your session will get initialised and closed automatically.')\n    }\n\n    /*!\n     * check if session was already established\n     */\n    if (this.requestHandler.sessionID) {\n        throw new ProtocolError('Cannot init a new session, please end your current session first')\n    }\n\n    this.desiredCapabilities = merge(this.desiredCapabilities, desiredCapabilities)\n    if (desiredCapabilities.sessionId) {\n        this.sessionId = desiredCapabilities.sessionId\n    }\n\n    /**\n     * report library identity to server\n     * @see https://groups.google.com/forum/#!topic/selenium-developers/Zj1ikTz632o\n     */\n    this.desiredCapabilities = merge(this.desiredCapabilities, {\n        requestOrigins: {\n            url: pkg.homepage,\n            version: pkg.version,\n            name: pkg.name\n        }\n    })\n\n    return this.requestHandler.create({\n        path: '/session',\n        method: 'POST'\n    }, {\n        desiredCapabilities: this.desiredCapabilities\n    })\n}\n\nexport default init\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/installApp.js":"/**\n *\n * Install an app on device.\n *\n * <example>\n    :installApp.js\n    it('should install app from file system', function () {\n        browser.installApp('/path/to/my/App.app');\n    });\n * </example>\n *\n * @param {String} path  path to Android application\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#install-app\n * @type mobile\n * @for android\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet installApp = function (appPath) {\n    if (typeof appPath !== 'string') {\n        throw new ProtocolError('installApp command requires appPath parameter from type string')\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/install_app',\n        method: 'POST'\n    }, { appPath })\n}\n\nexport default installApp\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/isAppInstalled.js":"/**\n *\n * Check if an app is installed.\n *\n * <example>\n    :isAppInstalled.js\n    it('should check if app is installed', function () {\n        var isAppInstalled = browser.isAppInstalled('com.example.android.apis');\n        console.log(isAppInstalled); // outputs: true\n    });\n * </example>\n *\n * @param {String} bundleId  ID of bundled app\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#is-installed\n * @type mobile\n * @for android\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet isAppInstalled = function (bundleId) {\n    if (typeof bundleId !== 'string') {\n        throw new ProtocolError('isAppInstalled command requires bundleId parameter from type string')\n    }\n\n    return this.unify(this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/app_installed',\n        method: 'POST'\n    }, { bundleId }))\n}\n\nexport default isAppInstalled\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/isLocked.js":"/**\n *\n * Check whether the device is locked or not.\n *\n * <example>\n    :lockIt.js\n    it('demonstrate the lock and unlock command', function () {\n        browser.lock();\n        console.log(browser.isLocked()); // true\n\n        browser.unlock();\n        console.log(browser.isLocked()); // false\n    });\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nlet isLocked = function () {\n    return this.unify(this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/is_locked',\n        method: 'POST'\n    }))\n}\n\nexport default isLocked\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/keys.js":"/**\n *\n * Send a sequence of key strokes to the active element. This command is similar to the\n * send keys command in every aspect except the implicit termination: The modifiers are\n * *not* released at the end of the call. Rather, the state of the modifier keys is kept\n * between calls, so mouse interactions can be performed while modifier keys are depressed.\n *\n * You can also use characters like \"Left arrow\" or \"Back space\". WebdriverIO will take\n * care of translating them into unicode characters. You’ll find all supported characters\n * [here](https://w3c.github.io/webdriver/webdriver-spec.html#keyboard-actions).\n * To do that, the value has to correspond to a key from the table.\n *\n * @param {String|String[]} value  The sequence of keys to type. An array must be provided. The server should flatten the array items to a single string to be typed.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidkeys\n * @type protocol\n * @deprecated\n *\n */\n\nimport { UNICODE_CHARACTERS } from '../helpers/constants'\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nmodule.exports = function keys (value) {\n    let key = []\n\n    /**\n     * replace key with corresponding unicode character\n     */\n    if (typeof value === 'string') {\n        key = checkUnicode(value)\n    } else if (value instanceof Array) {\n        for (let charSet of value) {\n            key = key.concat(checkUnicode(charSet))\n        }\n    } else {\n        throw new ProtocolError('number or type of arguments don\\'t agree with keys protocol command')\n    }\n\n    return this.requestHandler.create('/session/:sessionId/keys', {\n        'value': key\n    })\n}\n\n/*!\n * check for unicode character or split string into literals\n * @param  {String} value  text\n * @return {Array}         set of characters or unicode symbols\n */\nfunction checkUnicode (value) {\n    return UNICODE_CHARACTERS.hasOwnProperty(value) ? [UNICODE_CHARACTERS[value]] : value.split('')\n}\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/launch.js":"/**\n *\n * Launch the session for the desired capabilities. Note that this is the companion\n * to the `autoLaunch=false` capability. This is not for launching arbitrary\n * apps/activities --- for that use [`startActivity`](/api/mobile/startActivity.html).\n * This is for continuing the initialization (\"launch\") process if you have used\n * `autoLaunch=false`.\n *\n * <example>\n    :launch.js\n    it('should launch capability', function () {\n        browser.launch();\n    });\n * </example>\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#launch\n * @type mobile\n * @for ios, android\n *\n */\n\nlet launch = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/app/launch',\n        method: 'POST'\n    })\n}\n\nexport default launch\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/localStorage.js":"/**\n *\n * Protocol bindings for all localStorage operations. This command is not part of the official Webdriver\n * specification and might not be supported for your browser.\n *\n * <example>\n    :localStorage.js\n    it('should set/receive values from local storage', function () {\n        // get the storage item for the given key\n        var values = browser.localStorage('GET', someKey);\n\n        // get all key/value pairs of the storage\n        var storage = browser.localStorage();\n\n        // set the storage item for the given key\n        browser.localStorage('POST', {key: someKey, value: someValue});\n\n        // remove the storage item for the given key\n        browser.localStorage('DELETE', 'someKey');\n\n        // clear the storage\n        browser.localStorage('DELETE');\n    });\n * </example>\n *\n * @param {String}         method  method for storage operation\n * @param {Object|String=} args    operation arguments\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidlocal_storage\n * @type protocol\n *\n */\n\nlet localStorage = function (method = 'GET', args) {\n    /**\n     * set default options\n     */\n    let data = {}\n    let requestOptions = {\n        path: '/session/:sessionId/local_storage',\n        method: method.toUpperCase()\n    }\n\n    if (requestOptions.method === 'POST' && typeof args === 'object') {\n        data = {\n            key: args.key,\n            value: args.value\n        }\n    }\n\n    /**\n     * add/delete specific key\n     */\n    if ((requestOptions.method === 'DELETE' && typeof args === 'string') ||\n       (requestOptions.method === 'GET' && typeof args === 'string')) {\n        requestOptions.path += '/key/' + args\n    }\n\n    return this.requestHandler.create(requestOptions, data)\n}\n\nexport default localStorage\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/localStorageSize.js":"/**\n *\n * protocol bindings to get local_storage size. (Not part of the official Webdriver specification)\n *\n * @returns {Number} The number of items in the storage.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidlocal_storagesize\n * @type protocol\n *\n */\n\nlet localStorageSize = function () {\n    return this.requestHandler.create('/session/:sessionId/local_storage/size')\n}\n\nexport default localStorageSize\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/location.js":"/**\n *\n * Protocol bindings for all geolocation operations. (Not part of the official Webdriver specification).\n *\n * <example>\n    :location.js\n    it('should set geo location for device', function () {\n        // set the current geo location\n        client.location({latitude: 121.21, longitude: 11.56, altitude: 94.23})\n\n        // get the current geo location\n        client.location().then(function(res) { ... });\n    });\n * </example>\n *\n * @param {Object} location  the new location\n * @returns {Object}         the current geo location\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidlocation\n * @type protocol\n *\n */\n\nlet location = function (l) {\n    let location = null\n\n    if (typeof l === 'object' &&\n        l.latitude !== undefined &&\n        l.longitude !== undefined &&\n        l.altitude !== undefined) {\n        location = l\n    }\n\n    /**\n     * get geo location\n     */\n    if (!location) {\n        return this.requestHandler.create('/session/:sessionId/location')\n    }\n\n    /**\n     * set geo location\n     * @type {[type]}\n     */\n    return this.requestHandler.create('/session/:sessionId/location', { location })\n}\n\nexport default location\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/lock.js":"/**\n *\n * Lock the device.\n *\n * <example>\n    :lockIt.js\n    it('demonstrate the lock and unlock command', function () {\n        browser.lock();\n        console.log(browser.isLocked()); // true\n\n        browser.unlock();\n        console.log(browser.isLocked()); // false\n    });\n * </example>\n *\n * @param {Number} seconds  wait in seconds until lock screen\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#lock\n * @type mobile\n * @for android\n *\n */\n\nlet lock = function (seconds = 0) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/lock',\n        method: 'POST'\n    }, { seconds })\n}\n\nexport default lock\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/logTypes.js":"/**\n *\n * Get available log types. This command is not part of the official Webdriver specification. Therefor the\n * result can vary depending on the capability you are runnint the test.\n *\n * <example>\n    :logTypes.js\n    it('demonstrate all available log types', function () {\n        var logTypes = browser.logTypes();\n        console.log(logTypes); // outputs: ['browser', 'driver', 'client', 'server']\n    });\n * </example>\n *\n * @returns {Strings[]}  The list of available [log types](https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#log-type)\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidlogtypes\n * @type protocol\n *\n */\n\nlet logTypes = function () {\n    return this.requestHandler.create('/session/:sessionId/log/types')\n}\n\nexport default logTypes\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/longPressKeycode.js":"/**\n *\n * Press a particular key code on the device.\n *\n * <example>\n    :longPressKeycode.js\n    // press the home button long\n    browser.longPressKeycode(3)\n * </example>\n *\n * @param {String} keycode    key code to press\n * @param {String} metastate  meta state to be activated\n *\n * @see http://developer.android.com/reference/android/view/KeyEvent.html\n * @type mobile\n * @for android\n *\n */\n\nlet longPressKeycode = function (keycode, metastate) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/long_press_keycode',\n        method: 'POST'\n    }, { keycode, metastate })\n}\n\nexport default longPressKeycode\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/moveTo.js":"/**\n *\n * Move the mouse by an offset of the specificed element. If no element is specified,\n * the move is relative to the current mouse cursor. If an element is provided but\n * no offset, the mouse will be moved to the center of the element. If the element\n * is not visible, it will be scrolled into view.\n *\n * (Not part of the official Webdriver specification).\n *\n * @param {String} element  Opaque ID assigned to the element to move to, as described in the WebElement JSON Object. If not specified or is null, the offset is relative to current position of the mouse.\n * @param {Number} xoffset  X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.\n * @param {Number} yoffset  Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidmoveto\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\nimport eventSimulator from '../scripts/eventSimulator'\n\nlet moveTo = function (element, xoffset, yoffset) {\n    let data = {}\n\n    if (typeof element === 'string') {\n        data.element = element\n    }\n\n    if (typeof xoffset === 'number') {\n        data.xoffset = xoffset\n    }\n\n    if (typeof yoffset === 'number') {\n        data.yoffset = yoffset\n    }\n\n    /**\n     * if no attribute is set, throw error\n     */\n    if (Object.keys(data).length === 0) {\n        throw new ProtocolError('number or type of arguments don\\'t agree with moveTo command')\n    }\n\n    /**\n     * simulate event in safari\n     */\n    if (this.desiredCapabilities.browserName === 'safari') {\n        xoffset = xoffset || 0\n        yoffset = yoffset || 0\n\n        let target = { x: xoffset, y: yoffset }\n        return this.elementIdLocation(element).then((res) => {\n            target = { x: res.value.x + xoffset, y: res.value.y + yoffset }\n        }).execute(eventSimulator).execute((elem, x, y) => {\n            return window._wdio_simulate(elem, 'mousemove', x, y)\n        }, { ELEMENT: element }, target.x, target.y)\n    }\n\n    return this.requestHandler.create('/session/:sessionId/moveto', data)\n}\n\nexport default moveTo\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/openNotifications.js":"/**\n *\n * Open the notifications pane on the device.\n *\n * <example>\n    :openNotificationsSync.js\n    browser.openNotifications();\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nlet openNotifications = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/open_notifications',\n        method: 'POST'\n    })\n}\n\nexport default openNotifications\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/orientation.js":"/**\n *\n * Protocol bindings for all mobile orientation operations. (Not part of the official Webdriver specification).\n *\n * <example>\n    :orientation.js\n    it('should set/get orientation using protocol command', function () {\n        // set the browser orientation. The orientation should be\n        // specified as defined in ScreenOrientation: {LANDSCAPE|PORTRAIT}\n        browser.orientation('landscape');\n\n        // get the current browser orientation. The server should\n        // return a valid orientation value as defined in\n        // screen orientation: {LANDSCAPE|PORTRAIT}\n        var orientation = browser.orientation();\n        console.log(orientation.value); // outputs: \"landscape\"\n    });\n * </example>\n *\n * @param   {String=} deviceOrientation  The new browser orientation as defined in ScreenOrientation: `{LANDSCAPE|PORTRAIT}`\n * @returns {String}                     device orientation (`LANDSCAPE/PORTRAIT`)\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidorientation\n * @type mobile\n * @for android, ios\n *\n */\n\nlet orientation = function (deviceOrientation) {\n    let data = {}\n\n    if (typeof deviceOrientation === 'string') {\n        data.orientation = deviceOrientation.toUpperCase()\n    }\n\n    return this.requestHandler.create('/session/:sessionId/orientation', data)\n}\n\nexport default orientation\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/performMultiAction.js":"/**\n *\n * Perform multi touch action\n *\n * @param {Object} touchAttr contains attributes of touch gesture (e.g. `element`, `x` and `y`)\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/appium-bindings.md#touchaction--multitouchaction\n * @type mobile\n * @for android, ios\n *\n */\n\nlet performMultiAction = function (multiTouchAction = {}) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/touch/multi/perform',\n        method: 'POST'\n    }, multiTouchAction)\n}\n\nexport default performMultiAction\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/performTouchAction.js":"/**\n *\n * Perform touch action\n *\n * @param {Object} touchAttr contains attributes of touch gesture (e.g. `element`, `x` and `y`)\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#touchaction--multitouchaction\n * @type mobile\n * @for android, ios\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet performTouchAction = function (action) {\n    if (typeof action !== 'object') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with performTouchAction protocol command')\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/touch/perform',\n        method: 'POST'\n    }, action)\n}\n\nexport default performTouchAction\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/pressKeycode.js":"/**\n *\n * Press a particular key code on the device.\n *\n * <example>\n    :pressKeycode.js\n    // press the home button\n    browser.pressKeycode(3)\n * </example>\n *\n * @param {String} keycode    key code to press\n * @param {String} metastate  meta state to be activated\n *\n * @see http://developer.android.com/reference/android/view/KeyEvent.html\n * @type mobile\n * @for android\n *\n */\n\nlet pressKeycode = function (keycode, metastate) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/press_keycode',\n        method: 'POST'\n    }, { keycode, metastate })\n}\n\nexport default pressKeycode\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/pullFile.js":"/**\n *\n * Pulls a file from the device.\n *\n * <example>\n    :pullFile.js\n    browser.pullFile('/data/local/tmp/file.txt')\n * </example>\n *\n * @param {String} path  device path to file\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/appium-bindings.md#pull-file\n * @type mobile\n * @for ios, android\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet pullFile = function (path) {\n    if (typeof path !== 'string') {\n        throw new ProtocolError('pullFile requires a parameter (path to file) from type string')\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/pull_file',\n        method: 'POST'\n    }, { path })\n}\n\nexport default pullFile\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/pullFolder.js":"/**\n *\n * Pulls a folder from the device's file system.\n *\n * <example>\n    :pullFolder.js\n    browser.pullFolder('/data/local/tmp')\n * </example>\n *\n * @param {String} path  device path to folder\n *\n * @type mobile\n * @for ios, android\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet pullFolder = function (path) {\n    if (typeof path !== 'string') {\n        throw new ProtocolError('pullFolder requires a parameter (path to folder) from type string')\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/pull_folder',\n        method: 'POST'\n    }, { path })\n}\n\nexport default pullFolder\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/pushFile.js":"/**\n *\n * Pushes a file to the device.\n *\n * <example>\n    :pushFile.js\n    var data = new Buffer(\"Hello World\").toString('base64'))\n    browser.pushFile('/data/local/tmp/file.txt', data)\n * </example>\n *\n * @param {String} path  local path to file\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#push-file\n * @type mobile\n * @for ios, android\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet pushFile = function (path, base64Data) {\n    if (typeof path !== 'string' || typeof base64Data !== 'string') {\n        throw new ProtocolError('pushFile requires two parameters (path, base64Data) from type string')\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/push_file',\n        method: 'POST'\n    }, {\n        path,\n        data: base64Data\n    })\n}\n\nexport default pushFile\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/refresh.js":"/**\n *\n * Refresh the current page.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-refresh\n * @type protocol\n *\n */\n\nlet refresh = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/refresh',\n        method: 'POST'\n    })\n}\n\nexport default refresh\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/removeApp.js":"/**\n *\n * Remove an app from the device.\n *\n * <example>\n    :removeApp.js\n    browser.removeApp('com.example.android.apis');\n * </example>\n *\n * @param {String} bundleId  bundle ID of application\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#remove-app\n * @type mobile\n * @for android\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet removeApp = function (bundleId) {\n    if (typeof bundleId !== 'string') {\n        throw new ProtocolError('removeApp command requires bundleId parameter from type string')\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/remove_app',\n        method: 'POST'\n    }, { bundleId })\n}\n\nexport default removeApp\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/reset.js":"/**\n *\n * Reset the device by clearing the device un- and reinstalling app package (if existing).\n *\n * <example>\n    :resetApp.js\n    browser.reset()\n * </example>\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#reset\n * @type mobile\n * @for android\n *\n */\n\nlet reset = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/app/reset',\n        method: 'POST'\n    })\n}\n\nexport default reset\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/rotate.js":"/**\n *\n * Perform a rotation gesture centered on the specified element.\n *\n * <example>\n    :rotate.js\n    browser.rotate(114, 198);\n * </example>\n *\n * @param {Number} x          x offset to use for the center of the rotate gesture (default 0)\n * @param {Number} y          y offset to use for the center of the rotate gesture (default 0)\n * @param {Number} duration   The length of hold time for the specified gesture, in seconds. (default 1)\n * @param {Number} radius     The distance in points from the center to the edge of the circular path.\n * @param {Number} rotation   The length of rotation in radians. (default pi (π))\n * @param {Number} touchCount The number of touches to use in the specified gesture. (Effectively, the number of fingers a user would use to make the specified gesture.) Valid values are 1 to 5. (default 2)\n *\n * @see https://developer.apple.com/library/ios/documentation/ToolsLanguages/Reference/UIAElementClassReference/#//apple_ref/javascript/instm/UIAElement/rotateWithOptions\n * @type mobile\n * @for ios\n *\n */\n\nlet rotate = function (x = 0, y = 0, duration = 1, radius = 0, rotation = Math.PI, touchCount = 2) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/rotate',\n        method: 'POST'\n    }, { x, y, duration, radius, rotation, touchCount })\n}\n\nexport default rotate\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/screenshot.js":"/**\n *\n * Take a screenshot of the current viewport. To get the screenshot of the whole page\n * use the action command `saveScreenshot`\n *\n * @returns {String} screenshot   The screenshot as a base64 encoded PNG.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-take-screenshot\n * @type protocol\n *\n */\n\nlet screenshot = function () {\n    return this.requestHandler.create('/session/:sessionId/screenshot')\n}\n\nexport default screenshot\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/session.js":"/**\n *\n * Protocol bindings for all session operations. In case you are looking for\n * `[POST] session` to initialise a session on the server, take a look at `/lib/protocol/init`.\n *\n * <example>\n    :session.js\n    it('should get/delete current session using the protocol command', function () {\n        // retrieve the resolved capabilities of the specified session\n        var caps = browser.session();\n        console.log(caps); // outputs: { browserName: \"...\", ... }\n\n        // you can also just call (see http://webdriver.io/guide/testrunner/browserobject.html)\n        console.log(browser.desiredCapabilities);\n\n        // delete the session (equivalent to `end` action command)\n        // Note: the wdio testrunner doesn't allow to call this command manually. It will close the session\n        // when the test has ended.\n        browser.session('delete'); // throws an error\n    });\n * </example>\n *\n * @param {String=} doWhat     session operation (`get` (default)|`delete`)\n * @param {String}  sessionId  session id to operate on\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-delete-session\n * @type protocol\n *\n */\n\nimport { ProtocolError, CommandError } from '../utils/ErrorHandler'\n\nlet session = function (doWhat = 'GET', sessionId) {\n    /*!\n     * parameter check\n     */\n    if (typeof sessionId !== 'string') {\n        /*!\n         * if session was already closed return `undefined`\n         * ToDo or maybe throw an error\n         */\n        if (!this.requestHandler.sessionID) {\n            return null\n        }\n\n        sessionId = this.requestHandler.sessionID\n    }\n\n    doWhat = doWhat.toUpperCase()\n\n    /*!\n     * get session\n     */\n    if (doWhat === 'GET') {\n        return this.requestHandler.create({\n            path: `/session/${sessionId}`,\n            method: 'GET',\n            requiresSession: false\n        })\n    }\n\n    const lastCommand = this.commandList.slice(-3, -2)\n    const isInternalCall = lastCommand.length && lastCommand[0].name === 'reload'\n\n    /*!\n     * delete session\n     */\n    if (doWhat === 'DELETE') {\n        /**\n         * make sure we don't run this command within wdio test run\n         */\n        if (this.options.isWDIO && !isInternalCall) {\n            throw new CommandError('Don\\'t end the session manually. This will be done automatically.')\n        }\n\n        this.emit('end', {\n            sessionId: this.requestHandler.sessionID\n        })\n\n        return this.requestHandler.create({\n            path: '/session/' + sessionId,\n            method: 'DELETE',\n            requiresSession: false\n        }).then((res) => {\n            /*!\n             * delete sessionID in RequestHandler\n             */\n            this.requestHandler.sessionID = null\n            return res\n        })\n    }\n\n    throw new ProtocolError('The session command need either a \\'delete\\' or \\'get\\'attribute to know what to do. example: client.session(\\'get\\').then(callback) to get the capabilities of the session.')\n}\n\nexport default session\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/sessions.js":"/**\n *\n * Returns a list of the currently active sessions. Each session will be returned\n * as a list of JSON objects with the following keys:\n *\n * | Key          | Type   | Description    |\n * |--------------|--------|----------------|\n * | id           | string | The session ID |\n * | capabilities | object | An object describing the [session capabilities](https://w3c.github.io/webdriver/webdriver-spec.html#capabilities) |\n *\n * (Not part of the official Webdriver specification).\n *\n * @returns {Object[]} a list of the currently active sessions\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessions\n * @type protocol\n * @depcrecated\n *\n */\n\nlet sessions = function () {\n    return this.requestHandler.create({\n        path: '/sessions',\n        method: 'GET',\n        requiresSession: false\n    })\n}\n\nexport default sessions\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/sessionStorage.js":"/**\n *\n * Protocol bindings for all sessionStorage operations. This command is not part of the official Webdriver\n * specification. Therefor it might not be supported in your browser.\n *\n * <example>\n    :sessionStorage.js\n    it('should set/receive values from session storage', function () {\n        // get the storage item for the given key\n        var values = browser.sessionStorage('GET', someKey);\n\n        // get all key/value pairs of the storage\n        var storage = browser.sessionStorage();\n\n        // set the storage item for the given key\n        browser.sessionStorage('POST', {key: someKey, value: someValue});\n\n        // remove the storage item for the given key\n        browser.sessionStorage('DELETE', 'someKey');\n\n        // clear the storage\n        browser.sessionStorage('DELETE');\n    });\n * </example>\n *\n * @param {String=}        method  method for storage operation\n * @param {Object|String=} args    operation arguments\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidsession_storage\n * @type protocol\n *\n */\n\nlet sessionStorage = function (method = 'GET', args) {\n    /**\n     * set default options\n     */\n    let data = {}\n    let requestOptions = {\n        path: '/session/:sessionId/session_storage',\n        method: method.toUpperCase()\n    }\n\n    if (requestOptions.method === 'POST' && typeof args === 'object') {\n        data = {\n            key: args.key,\n            value: args.value\n        }\n    }\n\n    /**\n     * add/delete specific key\n     */\n    if ((requestOptions.method === 'DELETE' && typeof args === 'string') ||\n       (requestOptions.method === 'GET' && typeof args === 'string')) {\n        requestOptions.path += '/key/' + args\n    }\n\n    return this.requestHandler.create(requestOptions, data)\n}\n\nexport default sessionStorage\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/sessionStorageSize.js":"/**\n *\n * Protocol bindings to get the session storage size. (Not part of the official Webdriver specification).\n *\n * @returns {Number} The number of items in the storage.\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidsession_storagesize\n * @type protocol\n *\n */\n\nlet sessionStorageSize = function () {\n    return this.requestHandler.create('/session/:sessionId/session_storage/size')\n}\n\nexport default sessionStorageSize\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/setImmediateValue.js":"/**\n *\n * Set immediate value in app.\n *\n * <example>\n    :setImmediateValue.js\n    browser.setImmediateValue(el, 'foo')\n * </example>\n *\n * @param {String} ID              ID of a WebElement JSON object to route the command to\n * @param {String|String[]} value  The sequence of keys to type. An array must be provided. The server should flatten the array items to a single string to be typed.\n *\n * @type mobile\n * @for ios\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet setImmediateValue = function (id, value) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('setImmediateValue requires two parameters (id, value) from type string')\n    }\n\n    return this.requestHandler.create({\n        path: `/session/:sessionId/appium/element/${id}/value`,\n        method: 'POST'\n    }, { value })\n}\n\nexport default setImmediateValue\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/setNetworkConnection.js":"/**\n *\n * Set network connection.<br>\n * Types:<br>\n * \t- airplane mode\n * \t- wifi on\n * \t- data on\n *\n * These properties behave like a bitmask so if you set the network connection to 0\n * everything will get turned off. However if you for example set the network connection\n * to 4 it will disable the airplane mode and turn off the wifi so that only data will\n * be enabled. WebdriverIO provides a simplified interface to set these values without\n * calculating bitmasks.\n *\n * Note: if you have airplane mode enabled you can't have wifi or data be enabled too\n * (for obvious reasons)\n *\n * <example>\n    :setNetworkConnection.js\n    it('should emulate network connection', function () {\n        browser.setNetworkConnection(0) // airplane mode off, wifi off, data off\n        browser.setNetworkConnection(1) // airplane mode on, wifi off, data off\n        browser.setNetworkConnection(2) // airplane mode off, wifi on, data off\n        browser.setNetworkConnection(4) // airplane mode off, wifi off, data on\n        browser.setNetworkConnection(6) // airplane mode off, wifi on, data on\n    });\n * </example>\n *\n * @type mobile\n * @for selendroid\n * @see https://github.com/appium/appium-android-driver/blob/master/lib/commands/network.js#L24-L46\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet setNetworkConnection = function (type) {\n    if (typeof type !== 'number') {\n        throw new ProtocolError('Number or type of arguments don\\'t agree with setNetworkConnection protocol command.')\n    } else if (type > 6 || type < 0) {\n        throw new ProtocolError('Invalid value for network connection.')\n    } else if (type === 3 || type === 5) {\n        throw new ProtocolError('You can\\'t have wifi or data enabled while in airplane mode.')\n    }\n\n    return this.requestHandler.create({\n        path: '/session/:sessionId/network_connection',\n        method: 'POST'\n    }, {\n        parameters: {\n            type: type\n        }\n    })\n}\n\nexport default setNetworkConnection\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/settings.js":"/**\n *\n * Either retrieve a JSON hash of all the currently specified settings or update the current setting on the device.\n *\n * <example>\n    :settings.js\n    it('should update/get settinsg on the device', function () {\n        // update setting on the device\n        browser.settings({ cyberdelia: 'open' });\n\n        // get current settings\n        var settings = browser.settings()\n        console.log(settings.cyberdelia); // returns 'open'\n    });\n * </example>\n *\n * @type mobile\n * @param {Object=}  settings  key/value pairs defining settings on the device\n * @returns {Object} current settings (only if method was called without parameters)\n *\n */\n\nlet settings = function (settings) {\n    const settingsRoute = '/session/:sessionId/appium/settings'\n\n    /**\n     * get current settings\n     */\n    if (!settings) {\n        return this.requestHandler.create(settingsRoute)\n    }\n\n    return this.requestHandler.create({\n        path: settingsRoute,\n        method: 'POST'\n    }, { settings })\n}\n\nexport default settings\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/shake.js":"/**\n *\n * Perform a shake action on the device.\n *\n * <example>\n    :shakeIt.js\n    browser.shake()\n * </example>\n *\n * @see  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#shake\n * @type mobile\n * @for ios\n *\n */\n\nlet shake = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/shake',\n        method: 'POST'\n    })\n}\n\nexport default shake\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/source.js":"/**\n *\n * Get the current page source.\n *\n * @returns {String} The current page source.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-page-source\n * @type protocol\n *\n */\n\nlet source = function () {\n    return this.requestHandler.create('/session/:sessionId/source')\n}\n\nexport default source\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/startActivity.js":"/**\n *\n * Start an arbitrary Android activity during a session.\n *\n * <example>\n    :startActivity.js\n    browser.startActivity({\n        appPackage: 'io.appium.android.apis',\n        appActivity: '.view.DragAndDropDemo'\n    });\n * </example>\n *\n * @param {String} appPackage   name of app\n * @param {String} appActivity  name of activity\n * @type mobile\n * @for android\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet startActivity = function (appPackage, appActivity) {\n    if (typeof appPackage !== 'string' || typeof appActivity !== 'string') {\n        throw new ProtocolError('startActivity command requires two parameter (appPackage, appActivity) from type string')\n    }\n\n    return this.requestHandler.create(\n        '/session/:sessionId/appium/device/start_activity',\n        { appPackage, appActivity }\n    )\n}\n\nexport default startActivity\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/status.js":"/**\n *\n * Query the server's current status. The server should respond with a general\n * \"HTTP 200 OK\" response if it is alive and accepting commands. The response\n * body should be a JSON object describing the state of the server. All server\n * implementations should return two basic objects describing the server's\n * current platform and when the server was built. All fields are optional;\n * if omitted, the client should assume the value is uknown. Furthermore,\n * server implementations may include additional fields not listed here.\n *\n * | Key            | Type   | Description |\n * | -------------- | ------ | ----------- |\n * | build.version  | string | A generic release label (i.e. \"2.0rc3\") |\n * | build.revision | string | The revision of the local source control client from which the server was built |\n * | build.time     | string | A timestamp from when the server was built |\n * | os.arch        | string | The current system architecture |\n * | os.name        | string | The name of the operating system the server is currently running on: \"windows\", \"linux\", etc. |\n * | os.version     | string | The operating system version |\n *\n * (Not part of the official Webdriver specification).\n *\n * @returns {Object} An object describing the general status of the server\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#status\n * @type protocol\n *\n */\n\nlet status = function () {\n    return this.requestHandler.create({\n        path: '/status',\n        method: 'GET',\n        requiresSession: false\n    })\n}\n\nexport default status\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/strings.js":"/**\n *\n * Returns application strings of the application in a specific language.\n *\n * <example>\n    :stringsAsync.js\n    it('should return app strings for Android application', function () {\n        var appStrings = browser.strings();\n        console.log(appStrings); // outputs all app strings\n\n        var russianAppStrings = browser.strings('ru')\n        console.log(russianAppStrings); // outputs all russian app strings (if available)\n    });\n * </example>\n *\n * @param {String} language  if set it returns app strings only for that specific language\n *\n * @see https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/appium-bindings.md#app-strings\n * @type mobile\n * @for android\n *\n */\n\nlet strings = function (language) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/app/strings',\n        method: 'POST'\n    }, { language })\n}\n\nexport default strings\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/submit.js":"/**\n *\n * Submit a FORM element. The submit command may also be applied to any element\n * that is a descendant of a FORM element. (Not part of the official Webdriver specification).\n *\n * @param {String} ID ID of a `<form />` WebElement JSON object to route the command to\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidsubmit\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet submit = function (id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with submit protocol command')\n    }\n\n    return this.requestHandler.create({\n        path: `/session/:sessionId/element/${id}/submit`,\n        method: 'POST'\n    })\n}\n\nexport default submit\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/timeoutsAsyncScript.js":"/**\n *\n * Set the amount of time, in milliseconds, that asynchronous scripts executed\n * by /session/:sessionId/execute_async are permitted to run before they are\n * aborted and a |Timeout| error is returned to the client.\n *\n * Depcrecated! Please use the `timeouts` command instead.\n *\n * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtimeoutsasync_script\n *\n * @param {Number} ms   The amount of time, in milliseconds, that time-limited commands are permitted to run.\n * @type protocol\n * @deprecated\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet timeoutsAsyncScript = function (ms) {\n    /*!\n     * parameter check\n     */\n    if (typeof ms !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with timeoutsAsyncScript protocol command')\n    }\n\n    return this.requestHandler.create('/session/:sessionId/timeouts/async_script', {\n        ms: ms\n    })\n}\n\nexport default timeoutsAsyncScript\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/timeoutsImplicitWait.js":"/**\n *\n * Set the amount of time the driver should wait when searching for elements. When searching for a single element,\n * the driver should poll the page until an element is found or the timeout expires, whichever occurs first. When\n * searching for multiple elements, the driver should poll the page until at least one element is found or the\n * timeout expires, at which point it should return an empty list.\n *\n * If this command is never sent, the driver should default to an implicit wait of 0ms.\n *\n * Depcrecated! Please use the `timeouts` command instead.\n *\n * @param {Number} ms   The amount of time to wait, in milliseconds. This value has a lower bound of 0.\n *\n * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtimeoutsimplicit_wait\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet timeoutsImplicitWait = function (ms) {\n    /*!\n     * parameter check\n     */\n    if (typeof ms !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with timeoutsImplicitWait protocol command')\n    }\n\n    return this.requestHandler.create('/session/:sessionId/timeouts/implicit_wait', {\n        ms: ms\n    })\n}\n\nexport default timeoutsImplicitWait\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/timeouts.js":"/**\n * Configure the amount of time that a particular type of operation can execute\n * for before they are aborted and a |Timeout| error is returned to the client.\n *\n * @param {String} type The type of operation to set the timeout for. Valid values are:<br>- **script** for script timeouts<br>- **implicit** for modifying the implicit wait timeout<br>- **page load** for setting a page load timeout.\n * @param {Number} ms   The amount of time, in milliseconds, that time-limited commands are permitted to run.\n *\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#dfn-set-timeout\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet timeouts = function (type, ms) {\n    /*!\n     * parameter check\n     */\n    if (typeof type !== 'string' || typeof ms !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with timeouts protocol command')\n    }\n\n    return this.requestHandler.create('/session/:sessionId/timeouts', {\n        type: type,\n        ms: ms\n    })\n}\n\nexport default timeouts\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/title.js":"/**\n *\n * Gets an object containing the current page title.\n *\n * <example>\n    :title.js\n    it('should return title using protocol command', function () {\n        browser.url('http://webdriver.io');\n\n        var title = browser.title();\n        console.log(title);\n        // outputs the following:\n        //  {\n        //      state: 'success',\n        //      sessionId: '0c49951c-eb15-4053-96af-c1ebc79fb8b7',\n        //      hCode: 388233301,\n        //      value: 'WebdriverIO - Selenium 2.0 javascript bindings for nodejs',\n        //      class: 'org.openqa.selenium.remote.Response',\n        //      status: 0\n        //  }\n    });\n * </example>\n *\n * @returns {String} The current page title.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-title\n * @type protocol\n *\n */\n\nlet title = function () {\n    return this.requestHandler.create('/session/:sessionId/title')\n}\n\nexport default title\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/toggleAirplaneMode.js":"/**\n *\n * Switch the state (enabled/disabled) of airplane mode.\n *\n * <example>\n    :toggleAirplaneMode.js\n    browser.toggleAirplaneMode()\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nlet toggleAirplaneMode = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/toggle_airplane_mode',\n        method: 'POST'\n    })\n}\n\nexport default toggleAirplaneMode\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/toggleData.js":"/**\n *\n * Switch the state (enabled/disabled) of data service.\n *\n * <example>\n    :toggleData.js\n    browser.toggleData()\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nlet toggleData = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/toggle_data',\n        method: 'POST'\n    })\n}\n\nexport default toggleData\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/toggleLocationServices.js":"/**\n *\n * Switch the state (enabled/disabled) of the location service.\n *\n * <example>\n    :toggleLocationServices.js\n    browser.toggleLocationServices();\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nlet toggleLocationServices = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/toggle_location_services',\n        method: 'POST'\n    })\n}\n\nexport default toggleLocationServices\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/toggleWiFi.js":"/**\n *\n * Switch the state (enabled/disabled) of the wifi service.\n *\n * <example>\n    :toggleWiFi.js\n    client.toggleWiFi()\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nlet toggleWiFi = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/toggle_wifi',\n        method: 'POST'\n    })\n}\n\nexport default toggleWiFi\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/touchClick.js":"/**\n *\n * Single tap on the touch enabled device. Depcrecated! Please use `touchPerform` instead.\n *\n * @param {String} ID ID of a WebElement JSON object to route the command to\n *\n * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchclick\n * @type protocol\n * @for android\n * @depcrecated\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet touchClick = function (id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with elementIdCssProperty protocol command')\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/click', {\n        element: id.toString()\n    })\n}\n\nexport default touchClick\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/touchDown.js":"/**\n *\n * Finger down on the screen. Depcrecated! Please use `touchPerform` instead.\n *\n * @param {Number} x  X coordinate on the screen\n * @param {Number} y  Y coordinate on the screen\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchdown\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet touchDown = function (x, y) {\n    if (typeof x !== 'number' || typeof y !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with touchDown command')\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/down', {\n        x: x,\n        y: y\n    })\n}\n\nexport default touchDown\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/touchFlick.js":"/**\n * Flick on the touch screen using finger motion events. This flick command starts\n * at a particular screen location. Depcrecated! Please use `touchPerform` instead.\n *\n * @param {String} ID      ID of the element where the flick starts\n * @param {Number} xoffset the x offset in pixels to flick by\n * @param {Number} yoffset the y offset in pixels to flick by\n * @param {Number} speed   the speed in pixels per seconds\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchflick\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet touchFlick = function (id, xoffset, yoffset, speed) {\n    let data = {}\n\n    if (typeof id === 'number' && typeof xoffset === 'number') {\n        data = {\n            xoffset: id,\n            yoffset: xoffset\n        }\n    } else if (!id && typeof xoffset === 'number' && typeof yoffset === 'number') {\n        data = { xoffset, yoffset }\n    } else if (typeof id === 'string' && typeof xoffset === 'number' && typeof yoffset === 'number' && typeof speed === 'number') {\n        data = { element: id, xoffset, yoffset, speed }\n    } else {\n        throw new ProtocolError('number or type of arguments don\\'t agree with touchFlick command')\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/flick', data)\n}\n\nexport default touchFlick\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/touchId.js":"/**\n *\n * Simulate Touch ID with either valid (match == true) or invalid (match == false) fingerprint.\n *\n * <example>\n    :touchId.js\n    it('should simulate fingerprint', function () {\n        browser.touchId(); // simulates valid fingerprint\n        browser.touchId(true); // simulates valid fingerprint\n        browser.touchId(false); // simulates invalid fingerprint\n    });\n * </example>\n *\n * @param {Boolean} match if true the command simulates a valid fingerprint\n *\n * @type mobile\n * @for  ios\n * @see https://developer.apple.com/videos/play/wwdc2015/406/\n *\n */\n\nexport default function touchId (match = true) {\n    return this.requestHandler.create('session/:session_id/appium/simulator/touch_id', { match })\n}\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/touchLongClick.js":"/**\n *\n * Long press on the touch screen using finger motion events. Depcrecated! Please use `touchPerform` instead.\n *\n * @param {String} id ID of the element to long press on\n *\n * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchlongclick\n * @type protocol\n * @for android\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet touchLongClick = function (id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with touchLongClick protocol command')\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/longclick', {\n        element: id.toString()\n    })\n}\n\nexport default touchLongClick\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/touchMove.js":"/**\n *\n * Finger move on the screen. Depcrecated! Please use `touchPerform` instead.\n * Depcrecated! Please use `touchPerform` instead.\n *\n * @param {Number} x  coordinate on the screen\n * @param {Number} y  coordinate on the screen\n *\n * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchmove\n * @type protocol\n * @depcrecated\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet touchMove = function (x, y) {\n    if (typeof x !== 'number' || typeof y !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with touchMove command')\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/move', { x, y })\n}\n\nexport default touchMove\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/touchMultiPerform.js":"/**\n * Performs multiple touch actions. The action object is an array and its\n * objects have to contain the action name (longPress, press, tap, wait,\n * moveTo, release) and additional information about either the element, x/y\n * coordinates or touch counts.\n *\n * <example>\n    :simpleDragAndDrop.js\n    browser.touchMultiPerform([\n        { action: 'press', options: { x: 100, y: 250 }},\n        { action: 'moveTo', options: { x: 300, y: 100 }},\n        { action: 'release' }\n    ]);\n * </example>\n *\n * @param {Object} actions  touch action as object or object[] with attributes like touchCount, x, y, duration\n *\n * @see  https://github.com/appium/node-mobile-json-wire-protocol/blob/master/docs/protocol-methods.md#mobile-json-wire-protocol-endpoints\n * @type mobile\n * @for android, ios\n *\n */\n\nlet touchMultiPerform = function (actions) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/touch/multi/perform',\n        method: 'POST'\n    }, { actions })\n}\n\nexport default touchMultiPerform\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/touchPerform.js":"/**\n *\n * Performs a specific touch action. The action object need to contain the action\n * name (longPress, press, tap, wait, moveTo, release) and additional information\n * about either the element, x/y coordinates or touch counts.\n *\n * <example>\n    :touchPerformPress.js\n    browser.touchPerform([{\n        action: 'press',\n        options: {\n            x: 100,\n            y: 250\n        }\n    }]);\n\n    :touchPerformTap.js\n    browser.touchPerform([{\n        action: 'tap',\n        options: {\n            element: '1', // json web element was queried before\n            x: 10,   // x offset\n            y: 20,   // y offset\n            count: 1 // number of touches\n        }\n    }]);\n * </example>\n *\n * @param {Object} actions  touch action as object or object[] with attributes like touchCount, x, y, duration\n *\n * @see  https://github.com/appium/node-mobile-json-wire-protocol/blob/master/docs/protocol-methods.md#mobile-json-wire-protocol-endpoints\n * @type mobile\n * @for android, ios\n *\n */\n\nlet touchPerform = function (actions) {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/touch/perform',\n        method: 'POST'\n    }, { actions })\n}\n\nexport default touchPerform\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/touchScroll.js":"/**\n * Scroll on the touch screen using finger based motion events. If\n * element ID is given start scrolling at a particular screen location.\n *\n * Depcrecated! Please use `touchPerform` instead.\n *\n * @param {String} id       the element where the scroll starts.\n * @param {Number} xoffset  in pixels to scroll by\n * @param {Number} yoffset  in pixels to scroll by\n *\n * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchscroll\n * @type protocol\n * @depcrecated\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet touchScroll = function (id, xoffset, yoffset) {\n    let data = {}\n\n    /*!\n     * start scrolling at a particular screen location\n     */\n    if (arguments.length === 3 && id && typeof xoffset === 'number' && typeof yoffset === 'number') {\n        data = { element: id, xoffset, yoffset }\n\n    /*!\n     * if you don't care where the scroll starts on the screen\n     */\n    } else if (arguments.length === 3 && !id && typeof xoffset === 'number' && typeof yoffset === 'number') {\n        data = { xoffset, yoffset }\n\n    /*!\n     * if you don't care where the scroll starts on the screen\n     */\n    } else if (arguments.length === 2 && typeof id === 'number' && typeof xoffset === 'number') {\n        data = {\n            xoffset: id,\n            yoffset: xoffset\n        }\n    } else {\n        throw new ProtocolError('number or type of arguments don\\'t agree with touchScroll command')\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/scroll', data)\n}\n\nexport default touchScroll\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/touchUp.js":"/**\n *\n * Finger up on the screen. Depcrecated! Please use `touchPerform` instead.\n *\n * @param {Number} x  coordinate on the screen\n * @param {Number} y  coordinate on the screen\n *\n * @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtouchup\n * @type protocol\n * @depcrecated\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet touchUp = function (x, y) {\n    if (typeof x !== 'number' || typeof y !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with touchUp command')\n    }\n\n    return this.requestHandler.create('/session/:sessionId/touch/up', { x, y })\n}\n\nexport default touchUp\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/unlock.js":"/**\n *\n * Unlock the device.\n *\n * <example>\n    :unlockIt.js\n    it('demonstrate the lock and unlock command', function () {\n        browser.lock();\n        console.log(browser.isLocked()); // true\n\n        browser.unlock();\n        console.log(browser.isLocked()); // false\n    });\n * </example>\n *\n * @type mobile\n * @for android\n *\n */\n\nlet unlock = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/appium/device/unlock',\n        method: 'POST'\n    })\n}\n\nexport default unlock\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/url.js":"/**\n *\n * Protocol binding to load or get the URL of the browser.\n *\n * <example>\n    :url.js\n    // navigate to a new URL\n    browser.url('http://webdriver.io');\n    // receive url\n    console.log(browser.getUrl()); // outputs: \"http://webdriver.io\"\n * </example>\n *\n * @param {String=} url  the URL to navigate to\n * @returns {String}     the current URL\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get\n * @type protocol\n *\n */\n\nlet url = function (uri) {\n    let data = {}\n\n    if (typeof uri === 'string') {\n        data.url = uri\n        if (typeof this.options.baseUrl === 'string' && /^(\\/|\\?)/.test(data.url)) {\n            data.url = this.options.baseUrl + data.url\n        }\n    }\n\n    return this.requestHandler.create('/session/:sessionId/url', data)\n}\n\nexport default url\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/windowHandleFullscreen.js":"/**\n *\n * The Fullscreen Window command invokes the window manager-specific “full screen” operation,\n * if any, on the window containing the current top-level browsing context. This typically\n * increases the window to the size of the physical display and can hide browser UI elements\n * such as toolbars.\n *\n * Note: this command was recently added to the official Webdriver protocol and might not be\n * working with current Selenium driver.\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-fullscreen-window\n * @type protocol\n *\n */\n\nlet windowHandleMaximize = function () {\n    return this.requestHandler.create({\n        path: '/session/:sessionId/window/fullscreen',\n        method: 'POST'\n    })\n}\n\nexport default windowHandleMaximize\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/windowHandle.js":"/**\n * Retrieve the current window handle.\n *\n * <example>\n    :windowHandle.js\n    it('should return window handle', function () {\n        browser.url('http://webdriver.io');\n\n        var handle = browser.windowHandle()\n        console.log(handle);\n        // outputs something like the following:\n        //  {\n        //      state: 'success',\n        //      sessionId: 'e6782264-9eb1-427b-9250-d8302ac35161',\n        //      hCode: 988127308,\n        //      value: 'CDwindow-849D79B1-5CCB-4A1D-A217-5BA809D935F3',\n        //      class: 'org.openqa.selenium.remote.Response',\n        //      status: 0\n        //  }\n    });\n * </example>\n *\n * @returns {String} the current window handle\n *\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-window-handle\n * @type protocol\n *\n */\n\nlet windowHandle = function () {\n    // ToDo fix path according to new Webdriver standard\n    return this.requestHandler.create('/session/:sessionId/window_handle')\n}\n\nexport default windowHandle\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/windowHandleMaximize.js":"/**\n *\n * Maximize the specified window if not already maximized. If the :windowHandle URL parameter is \"current\",\n * the currently active window will be maximized.\n *\n * @param {String=} windowHandle window to maximize (if parameter is falsy the currently active window will be maximized)\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-maximize-window\n * @type protocol\n *\n */\n\nlet windowHandleMaximize = function (windowHandle = 'current') {\n    return this.requestHandler.create({\n        path: `/session/:sessionId/window/${windowHandle}/maximize`,\n        method: 'POST'\n    })\n}\n\nexport default windowHandleMaximize\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/windowHandlePosition.js":"/**\n *\n * Protocol bindings to receive or change the position of the browser window.\n * If the `windowHandle` URL parameter is falsy, the currently active window will be considered.\n * (Not part of the official Webdriver specification).\n *\n * <example>\n    :windowHandlePosition.js\n    it('should get or set window position', function () {\n        // change the position of a specified window\n        client.windowHandlePosition('{dc30381e-e2f3-9444-8bf3-12cc44e8372a}', {x: 100, y: 200});\n        // or set the current window position\n        browser.windowHandlePosition({x: 100, y: 200});\n\n        // get the position of a specified window\n        var position = browser.windowHandlePosition('{dc30381e-e2f3-9444-8bf3-12cc44e8372a}');\n        // or of the current window\n        position = browser.windowHandlePosition();\n\n        console.log(position); // outputs: {x: 100, y: 200}\n    });\n * </example>\n *\n * @param {String=} windowHandle the window to receive/change the position\n * @param {Object=} position     the X and Y coordinates to position the window at, relative to the upper left corner of the screen\n *\n * @returns {Object} the X and Y coordinates for the window, relative to the upper left corner of the screen (`{x: number, y: number}`)\n *\n * @see  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidwindowwindowhandleposition\n * @type protocol\n *\n */\n\nlet windowHandlePosition = function (windowHandle, position) {\n    let data = {}\n    let requestOptions = {\n        method: 'POST'\n    }\n\n    if (typeof windowHandle !== 'string') {\n        position = windowHandle\n        windowHandle = 'current'\n    }\n\n    requestOptions.path = `/session/:sessionId/window/${windowHandle}/position`\n\n    /**\n     * check if arguments provide proper position parameter\n     */\n    if (typeof position === 'object' && typeof position.x === 'number' && typeof position.y === 'number') {\n        data = position\n\n    /**\n     * otherwise fall back to get operation\n     */\n    } else {\n        requestOptions.method = 'GET'\n    }\n\n    return this.requestHandler.create(requestOptions, data)\n}\n\nexport default windowHandlePosition\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/windowHandleSize.js":"/**\n *\n * Protocol binding to get or change the size of the browser.\n *\n * <example>\n    :windowHandleSize.js\n    it('should get or set window position', function () {\n        // change the size of a specified window\n        client.windowHandleSize('{dc30381e-e2f3-9444-8bf3-12cc44e8372a}', {width: 800, height: 600});\n        // or set the current window size\n        browser.windowHandleSize({width: 800, height: 600});\n\n        // get the size of a specified window\n        var size = browser.windowHandleSize('{dc30381e-e2f3-9444-8bf3-12cc44e8372a}');\n        // or of the current window\n        size = browser.windowHandleSize();\n\n        console.log(size); // outputs: {width: 800, height: 600}\n    });\n * </example>\n *\n * @param {String=} windowHandle the window to receive/change the size\n * @param {Object=} dimension    the new size of the window\n *\n * @returns {Object} the size of the window (`{width: number, height: number}`)\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-set-window-size\n * @type protocol\n *\n */\n\nimport { ProtocolError } from '../utils/ErrorHandler'\n\nlet windowHandleSize = function (windowHandle = 'current', size) {\n    let data = {}\n\n    if (typeof windowHandle === 'object') {\n        [windowHandle, size] = ['current', windowHandle]\n    }\n\n    /*!\n     * protocol options\n     */\n    let requestOptions = {\n        path: `/session/:sessionId/window/${windowHandle}/size`,\n        method: 'GET'\n    }\n\n    /*!\n     * change window size if the new size is given\n     */\n    if (typeof size === 'object' && size.width && size.height) {\n        requestOptions.method = 'POST'\n        // The width and height value might return as a negative value, so\n        // we make sure to use its absolute value.\n        data = {\n            width: Math.abs(size.width),\n            height: Math.abs(size.height)\n        }\n    }\n\n    /*!\n     * type check\n     */\n    if (requestOptions.method === 'POST' && typeof data.width !== 'number' && typeof data.height !== 'number') {\n        throw new ProtocolError('number or type of arguments don\\'t agree with windowHandleSize protocol command')\n    }\n\n    return this.requestHandler.create(requestOptions, data)\n}\n\nexport default windowHandleSize\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/windowHandles.js":"/**\n *\n * Retrieve the list of all window handles available to the session.\n *\n * <example>\n    :windowHandles.js\n    it('should return all window handles', function () {\n        browser.url('http://localhost/one.html');\n        browser.newWindow('http://localhost/two.html');\n\n        var windowHandles = browser.windowHandles()\n        console.log(windowHandles);\n        // Outputs something like\n        // {\n        //    state: 'success',\n        //    sessionId: '31dc8253-a27e-4bae-8d20-338d6b0541c9',\n        //    hCode: 273402755,\n        //    value:\n        //    [ 'CDwindow-CBFE1412-8D46-495C-96B4-42E04F9153C0',\n        //        'CDwindow-BD7BE568-52F2-4552-B834-FE2D041DCE5B' ],\n        //    class: 'org.openqa.selenium.remote.Response',\n        //    status: 0\n        // }\n    });\n * </example>\n *\n * @returns {String[]} a list of window handles\n *\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get-window-handles\n * @type protocol\n *\n */\n\nlet windowHandles = function () {\n    // ToDo fix path according to new Webdriver standard\n    return this.requestHandler.create('/session/:sessionId/window_handles')\n}\n\nexport default windowHandles\n","/home/travis/build/npmtest/node-npmtest-webdriverio/node_modules/webdriverio/lib/protocol/window.js":"/**\n *\n * Protocol binding to handle with tabs in the browser.\n *\n * <example>\n    :window.js\n    // change focus to another window\n    // using window handle\n    browser.window('{dc30381e-e2f3-9444-8bf3-12cc44e8372a}');\n\n    // using tab name attribute\n    browser.window('my tab');\n\n    // close the current window\n    browser.window();\n * </example>\n *\n * @param {String=} windowHandle the window to change focus to\n *\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-switch-to-window\n * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-close-window\n * @type protocol\n *\n */\n\nlet window = function (windowHandle) {\n    let data = {}\n    let requestOptions = {\n        path: '/session/:sessionId/window',\n        method: 'DELETE'\n    }\n\n    if (typeof windowHandle === 'string') {\n        data = { name: windowHandle }\n        requestOptions.method = 'POST'\n    }\n\n    return this.requestHandler.create(requestOptions, data)\n}\n\nexport default window\n"}